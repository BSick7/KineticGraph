var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (TextWrapping) {
            TextWrapping[TextWrapping["NoWrap"] = 0] = "NoWrap";
            TextWrapping[TextWrapping["Wrap"] = 1] = "Wrap";
            TextWrapping[TextWrapping["WrapWithOverflow"] = 2] = "WrapWithOverflow";
        })(Controls.TextWrapping || (Controls.TextWrapping = {}));
        var TextWrapping = Controls.TextWrapping;
        (function (ScrollBarVisibility) {
            ScrollBarVisibility[ScrollBarVisibility["Disabled"] = 0] = "Disabled";
            ScrollBarVisibility[ScrollBarVisibility["Auto"] = 1] = "Auto";
            ScrollBarVisibility[ScrollBarVisibility["Hidden"] = 2] = "Hidden";
            ScrollBarVisibility[ScrollBarVisibility["Visible"] = 3] = "Visible";
        })(Controls.ScrollBarVisibility || (Controls.ScrollBarVisibility = {}));
        var ScrollBarVisibility = Controls.ScrollBarVisibility;
        (function (TextTrimming) {
            TextTrimming[TextTrimming["None"] = 0] = "None";
        })(Controls.TextTrimming || (Controls.TextTrimming = {}));
        var TextTrimming = Controls.TextTrimming;
        (function (ClickMode) {
            ClickMode[ClickMode["Release"] = 0] = "Release";
            ClickMode[ClickMode["Press"] = 1] = "Press";
            ClickMode[ClickMode["Hover"] = 2] = "Hover";
        })(Controls.ClickMode || (Controls.ClickMode = {}));
        var ClickMode = Controls.ClickMode;
        (function (PlacementMode) {
            PlacementMode[PlacementMode["Bottom"] = 0] = "Bottom";
            PlacementMode[PlacementMode["Right"] = 1] = "Right";
            PlacementMode[PlacementMode["Mouse"] = 2] = "Mouse";
            PlacementMode[PlacementMode["Left"] = 3] = "Left";
            PlacementMode[PlacementMode["Top"] = 4] = "Top";
        })(Controls.PlacementMode || (Controls.PlacementMode = {}));
        var PlacementMode = Controls.PlacementMode;
        (function (SelectionMode) {
            SelectionMode[SelectionMode["Single"] = 0] = "Single";
            SelectionMode[SelectionMode["Multiple"] = 1] = "Multiple";
            SelectionMode[SelectionMode["Extended"] = 2] = "Extended";
        })(Controls.SelectionMode || (Controls.SelectionMode = {}));
        var SelectionMode = Controls.SelectionMode;
        (function (MediaElementState) {
            MediaElementState[MediaElementState["Closed"] = 0] = "Closed";
            MediaElementState[MediaElementState["Opening"] = 1] = "Opening";
            MediaElementState[MediaElementState["Buffering"] = 4] = "Buffering";
            MediaElementState[MediaElementState["Playing"] = 5] = "Playing";
            MediaElementState[MediaElementState["Paused"] = 6] = "Paused";
            MediaElementState[MediaElementState["Stopped"] = 7] = "Stopped";
        })(Controls.MediaElementState || (Controls.MediaElementState = {}));
        var MediaElementState = Controls.MediaElementState;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ItemContainerGenerator = (function () {
            function ItemContainerGenerator(Owner) {
                this.Owner = Owner;
                this._Cache = [];
                this._Containers = [];
                this._RealizedCount = 0;
                this._Items = [];
                this.ItemsChanged = new MulticastEvent();
            }
            ItemContainerGenerator.prototype.GenerateNext = function (isNewlyRealized) {
                if (!this._GenerationState)
                    throw new InvalidOperationException("Cannot call GenerateNext before calling StartAt");
                var owner = this.Owner;
                var ownerItems = owner.Items;
                var state = this._GenerationState;
                var pos = state.Position;
                var index = this.IndexFromGeneratorPosition(pos);
                isNewlyRealized.Value = this._Containers[index] == null;
                if (!state.AllowStartAtRealizedItem && !isNewlyRealized.Value && pos.Offset === 0) {
                    index += state.Step;
                    isNewlyRealized.Value = this._Containers[index] == null;
                }
                if (index < 0 || index >= ownerItems.Count) {
                    isNewlyRealized.Value = false;
                    return null;
                }
                if (!isNewlyRealized.Value) {
                    pos.Index = index;
                    pos.Offset = state.Step;
                    return this._Containers[index];
                }
                var container;
                var item = ownerItems.GetValueAt(index);
                if (owner.IsItemItsOwnContainer(item)) {
                    if (item instanceof Fayde.DependencyObject)
                        container = item;
                    isNewlyRealized.Value = true;
                } else {
                    if (this._Cache.length > 0) {
                        container = this._Cache.pop();
                        isNewlyRealized.Value = false;
                    } else {
                        container = owner.GetContainerForItem();
                        isNewlyRealized.Value = true;
                    }
                }
                if (container instanceof Fayde.FrameworkElement && !(item instanceof Fayde.UIElement))
                    (container).DataContext = item;
                this._Items[index] = item;
                this._Containers[index] = container;
                if (isNewlyRealized.Value)
                    this._RealizedCount++;
                pos.Index = index;
                pos.Offset = state.Step;
                return container;
            };
            ItemContainerGenerator.prototype.GetItemContainerGeneratorForPanel = function (panel) {
                if (this.Owner.Panel === panel)
                    return this;
                return null;
            };
            ItemContainerGenerator.prototype.PrepareItemContainer = function (container) {
                var item = this.ItemFromContainer(container);
                this.Owner.PrepareContainerForItem(container, item);
            };
            ItemContainerGenerator.prototype.Recycle = function (position, count) {
                this._KillContainers(position, count, false);
            };
            ItemContainerGenerator.prototype.Remove = function (position, count) {
                this._KillContainers(position, count, false);
            };
            ItemContainerGenerator.prototype.RemoveAll = function () {
                var container;
                var item;
                var containers = this._Containers;
                var items = this._Items;
                var ic = this.Owner;
                while ((container = containers.shift()) !== undefined && (item = items.shift()) !== undefined) {
                    ic.ClearContainerForItem(container, item);
                }
                this._RealizedCount = 0;
            };
            ItemContainerGenerator.prototype.StartAt = function (position, forward, allowStartAtRealizedItem) {
                var _this = this;
                if (this._GenerationState)
                    throw new InvalidOperationException("Cannot call StartAt while a generation operation is in progress");
                this._GenerationState = {
                    AllowStartAtRealizedItem: allowStartAtRealizedItem,
                    Position: { Index: position.Index, Offset: position.Offset },
                    Step: forward ? 1 : -1,
                    Dispose: function () {
                        return _this._GenerationState = null;
                    }
                };
                return this._GenerationState;
            };
            ItemContainerGenerator.prototype.IndexFromContainer = function (container) {
                return this._Containers.indexOf(container);
            };
            ItemContainerGenerator.prototype.ContainerFromIndex = function (index) {
                return this._Containers[index];
            };
            ItemContainerGenerator.prototype.ItemFromContainer = function (container) {
                var index = this._Containers.indexOf(container);
                if (index < 0)
                    return undefined;
                return this._Items[index];
            };
            ItemContainerGenerator.prototype.ContainerFromItem = function (item) {
                if (item == null)
                    return undefined;
                var index = this._Items.indexOf(item);
                if (index < 0)
                    return undefined;
                return this._Containers[index];
            };
            ItemContainerGenerator.prototype.GeneratorPositionFromIndex = function (itemIndex) {
                if (itemIndex < 0)
                    return { Index: -1, Offset: 0 };
                if (this._RealizedCount === 0)
                    return { Index: -1, Offset: itemIndex + 1 };
                if (itemIndex > this.Owner.Items.Count)
                    return { Index: -1, Offset: 0 };
                var realizedIndex = -1;
                var runningOffset = 0;
                var containers = this._Containers;
                var len = containers.length;
                for (var i = 0; i < len && (realizedIndex + runningOffset) < itemIndex; i++) {
                    if (containers[i] != null) {
                        realizedIndex++;
                        runningOffset = 0;
                    } else {
                        runningOffset++;
                    }
                }
                return { Index: realizedIndex, Offset: runningOffset };
            };
            ItemContainerGenerator.prototype.IndexFromGeneratorPosition = function (position) {
                var index = position.Index;
                var offset = position.Offset;
                if (index === -1) {
                    if (offset < 0)
                        return this.Owner.Items.Count + offset;
                    return offset - 1;
                }
                if (index > this.Owner.Items.Count)
                    return -1;
                var realizedIndex = index;
                var containers = this._Containers;
                var len = containers.length;
                var i = 0;
                for (; i < len && realizedIndex >= 0; i++) {
                    if (containers[i] != null)
                        realizedIndex--;
                }
                return i + offset - 1;
            };
            ItemContainerGenerator.prototype.OnOwnerItemsItemsChanged = function (e) {
                var itemCount;
                var itemUICount;
                var oldPosition = { Index: -1, Offset: 0 };
                var position;
                switch (e.Action) {
                    case Fayde.Collections.NotifyCollectionChangedAction.Add:
                        itemCount = e.NewItems.length;
                        Fayde.ArrayEx.Fill(this._Containers, e.NewStartingIndex, itemCount, null);
                        Fayde.ArrayEx.Fill(this._Items, e.NewStartingIndex, itemCount, null);
                        itemUICount = 0;
                        position = this.GeneratorPositionFromIndex(e.NewStartingIndex);
                        position.Offset = 1;
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                        itemCount = (e.OldItems) ? e.OldItems.length : 1;
                        itemUICount = this._GetNumAlreadyRealizedItems(e.OldItems);
                        position = this.GeneratorPositionFromIndex(e.OldStartingIndex);
                        this.Remove(position, itemUICount);
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                        itemCount = 1;
                        itemUICount = 1;
                        position = this.GeneratorPositionFromIndex(e.NewStartingIndex);
                        this.Remove(position, 1);
                        var newPos = this.GeneratorPositionFromIndex(e.NewStartingIndex);
                        var state = this.StartAt(newPos, true, true);
                        try  {
                            this.PrepareItemContainer(this.GenerateNext({ Value: null }));
                        } finally {
                            state.Dispose();
                        }
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                        itemCount = (e.OldItems) ? e.OldItems.length : 0;
                        itemUICount = this._RealizedCount;
                        position = { Index: -1, Offset: 0 };
                        this.RemoveAll();
                        break;
                    default:
                        Warn("*** Critical error in ItemContainerGenerator.OnOwnerItemsItemsChanged. NotifyCollectionChangedAction." + e.Action + " is not supported");
                        break;
                }
                var args = new Controls.Primitives.ItemsChangedEventArgs(e.Action, itemCount, itemUICount, oldPosition, position);
                this.ItemsChanged.Raise(this, args);
            };
            ItemContainerGenerator.prototype._GetNumAlreadyRealizedItems = function (items) {
                var count = 0;
                var len = items.length;
                for (var i = 0; i < len; i++) {
                    if (this.ContainerFromItem(items[i]) != null)
                        count++;
                }
                return count;
            };
            ItemContainerGenerator.prototype._KillContainers = function (position, count, recycle) {
                if (position.Offset !== 0)
                    throw new ArgumentException("position.Offset must be zero as the position must refer to a realized element");
                var index = this.IndexFromGeneratorPosition(position);
                this._Items.splice(index, count);
                if (recycle)
                    this._Cache = this._Cache.concat(this._Containers.splice(index, count));
else
                    this._Containers.splice(index, count);
                this._RealizedCount -= count;
            };
            return ItemContainerGenerator;
        })();
        Controls.ItemContainerGenerator = ItemContainerGenerator;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var ScrollData = (function () {
                function ScrollData() {
                    this.CanHorizontallyScroll = false;
                    this.CanVerticallyScroll = false;
                    this.ScrollOwner = null;
                    this.OffsetX = 0;
                    this.OffsetY = 0;
                    this.CachedOffsetX = 0;
                    this.CachedOffsetY = 0;
                    this.ViewportWidth = 0;
                    this.ViewportHeight = 0;
                    this.ExtentWidth = 0;
                    this.ExtentHeight = 0;
                    this.MaxDesiredWidth = 0;
                    this.MaxDesiredHeight = 0;
                }
                return ScrollData;
            })();
            Primitives.ScrollData = ScrollData;
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    function Clone(value) {
        if (value === undefined)
            return undefined;
        if (value === null)
            return null;
        if (value instanceof Fayde.XamlObject)
            return (value).Clone();
        if (typeof value === "number" || typeof value === "string")
            return value;
        var typeName = value.constructor._TypeName;
        switch (typeName) {
            case "Uri":
            case "rect":
            case "size":
            case "FontFamily":
            case "Point":
            case "Color":
            case "PropertyPath":
            case "RepeatBehavior":
            case "Duration":
            case "KeyTime":
            case "GridLength":
            case "CornerRadius":
            case "Thickness":
                return (value).Clone();
        }
        return new value.constructor();
    }
    Fayde.Clone = Clone;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var VisualTreeHelper = (function () {
        function VisualTreeHelper() {
        }
        VisualTreeHelper.GetParent = function (d) {
            if (!(d instanceof Fayde.FrameworkElement))
                throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
            var parentNode = (d).XamlNode.VisualParentNode;
            if (parentNode)
                return parentNode.XObject;
        };
        VisualTreeHelper.GetRoot = function (d) {
            if (!(d instanceof Fayde.FrameworkElement))
                throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
            var rootNode = (d).XamlNode.GetVisualRoot();
            if (rootNode)
                return rootNode.XObject;
        };
        VisualTreeHelper.GetChild = function (d, childIndex) {
            if (!(d instanceof Fayde.FrameworkElement))
                throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
            var feNode = d.XamlNode;
            var subtreeNode = feNode.SubtreeNode;
            var subtree = subtreeNode.XObject;
            if (subtree instanceof Fayde.XamlObjectCollection)
                return (subtree).GetValueAt(childIndex);
            if ((subtree instanceof Fayde.UIElement) && childIndex === 0)
                return subtree;
            throw new IndexOutOfRangeException(childIndex);
        };
        VisualTreeHelper.GetChildrenCount = function (d) {
            if (!(d instanceof Fayde.FrameworkElement))
                throw new InvalidOperationException("Reference is not a valid visual DependencyObject");
            var feNode = d.XamlNode;
            var subtreeNode = feNode.SubtreeNode;
            var subtree = subtreeNode.XObject;
            if (subtreeNode.XObject instanceof Fayde.XamlObjectCollection)
                return (subtree).Count;
            if (subtree instanceof Fayde.UIElement)
                return 1;
            return 0;
        };
        VisualTreeHelper.FindElementsInHostCoordinates = function (intersectingPoint, subtree) {
            return subtree.XamlNode.LayoutUpdater.FindElementsInHostCoordinates(intersectingPoint).map(function (uin) {
                return uin.XObject;
            });
        };
        VisualTreeHelper.__Debug = function (ui, func) {
            var uin;
            if (ui instanceof Fayde.UIElement) {
                uin = (ui).XamlNode;
            } else if (ui instanceof Fayde.UINode) {
                uin = ui;
            } else if (ui instanceof Fayde.LayoutUpdater) {
                uin = (ui).Node;
            }
            var topNode;
            if (!uin) {
                var rv = Fayde.Application.Current.RootVisual;
                topNode = (rv) ? rv.XamlNode : null;
            } else {
                topNode = uin.GetVisualRoot();
            }
            if (!topNode)
                return "[No top node.]";
            if (!func)
                func = VisualTreeHelper.__DebugUIElement;
            return VisualTreeHelper.__DebugTree(topNode, uin, 1, func);
        };
        VisualTreeHelper.__DebugTree = function (curNode, matchNode, tabIndex, func) {
            var str = "";
            if (curNode === matchNode) {
                for (var i = 0; i < tabIndex; i++) {
                    str += ">>>>>>>>";
                }
            } else {
                for (var i = 0; i < tabIndex; i++) {
                    str += "\t";
                }
            }
            var cur = curNode.XObject;
            str += (cur).constructor._TypeName;
            var id = (cur)._ID;
            if (id)
                str += "[" + id + "]";
            var name = curNode.Name;
            str += " [";
            var ns = curNode.NameScope;
            if (!ns)
                str += "^";
else if (ns.IsRoot)
                str += "+";
else
                str += "-";
            str += name + "]";
            ;
            if (func)
                str += func(curNode, tabIndex);
            str += "\n";
            var enumerator = curNode.GetVisualTreeEnumerator();
            if (!enumerator)
                return str;
            var childNode;
            while (enumerator.MoveNext()) {
                childNode = enumerator.Current;
                str += VisualTreeHelper.__DebugTree(childNode, matchNode, tabIndex + 1, func);
            }
            return str;
        };
        VisualTreeHelper.__DebugUIElement = function (uin, tabIndex) {
            if (!uin)
                return "";
            var uie = uin.XObject;
            var str = "(";
            if (uie.Visibility === Fayde.Visibility.Visible)
                str += "Visible";
else
                str += "Collapsed";
            var lu = uin.LayoutUpdater;
            if (lu) {
                str += " ";
                var p = lu.VisualOffset;
                if (p)
                    str += p.toString();
                var s = size.fromRaw(lu.ActualWidth, lu.ActualHeight);
                str += " ";
                str += s.toString();
            }
            str += ")";
            var gridStr = VisualTreeHelper.__DebugGrid(uin, tabIndex);
            if (gridStr)
                str += "\n" + gridStr;
            return str;
        };
        VisualTreeHelper.__DebugGrid = function (uin, tabIndex) {
            var grid;
            if (uin instanceof Fayde.Controls.GridNode)
                grid = uin.XObject;
            if (!grid)
                return "";
            var rds = grid.RowDefinitions;
            var rcount = rds.Count;
            var cds = grid.ColumnDefinitions;
            var ccount = cds.Count;
            var tabs = "";
            for (var i = 0; i < tabIndex; i++) {
                tabs += "\t";
            }
            var enumerator;
            var str = "";
            if (rcount > 0) {
                str += tabs;
                str += "  Rows (" + rcount + "):\n";
                enumerator = rds.GetEnumerator();
                var rowdef;
                var i = 0;
                while (enumerator.MoveNext()) {
                    rowdef = enumerator.Current;
                    str += tabs;
                    str += "\t[" + i + "] -> " + rowdef.ActualHeight + "\n";
                    i++;
                }
            }
            var enumerator2;
            if (ccount > 0) {
                str += tabs;
                str += "  Columns (" + ccount + "):\n";
                enumerator2 = cds.GetEnumerator();
                var coldef;
                var i = 0;
                while (enumerator2.MoveNext()) {
                    coldef = enumerator2.Current;
                    str += tabs;
                    str += "\t[" + i + "] -> " + coldef.ActualWidth + "\n";
                    i++;
                }
            }
            return str;
        };
        VisualTreeHelper.__DebugUIElementLayout = function (uin, tabIndex) {
            if (!uin)
                return "";
            var lu = uin.LayoutUpdater;
            var str = VisualTreeHelper._SerializeDirt(lu.DirtyFlags);
            str += VisualTreeHelper._SerializeFlags(lu.Flags);
            str += " (";
            str += lu.HiddenDesire.toString();
            str += " ";
            str += lu.RenderSize.toString();
            str += ")";
            return str;
        };
        VisualTreeHelper.__DebugLayout = function (ui) {
            return VisualTreeHelper.__Debug(ui, VisualTreeHelper.__DebugUIElementLayout);
        };
        VisualTreeHelper._SerializeDirt = function (dirt) {
            var curdirt = dirt;
            var down = "";
            if (curdirt & _Dirty.ChildrenZIndices) {
                curdirt &= ~_Dirty.ChildrenZIndices;
                down += "ZI+";
            }
            if (curdirt & _Dirty.Arrange) {
                curdirt &= ~_Dirty.Arrange;
                down += "A+";
            }
            if (curdirt & _Dirty.Measure) {
                curdirt &= ~_Dirty.Measure;
                down += "M+";
            }
            if (curdirt & _Dirty.HitTestVisibility) {
                curdirt &= ~_Dirty.HitTestVisibility;
                down += "HTV+";
            }
            if (curdirt & _Dirty.RenderVisibility) {
                curdirt &= ~_Dirty.RenderVisibility;
                down += "RV+";
            }
            if (curdirt & _Dirty.LocalClip) {
                curdirt &= ~_Dirty.LocalClip;
                down += "LC+";
            }
            if (curdirt & _Dirty.Clip) {
                curdirt &= ~_Dirty.Clip;
                down += "C+";
            }
            if (curdirt & _Dirty.LocalProjection) {
                curdirt &= ~_Dirty.LocalProjection;
                down += "LP+";
            }
            if (curdirt & _Dirty.LocalTransform) {
                curdirt &= ~_Dirty.LocalTransform;
                down += "LT+";
            }
            if (curdirt & _Dirty.Transform) {
                curdirt &= ~_Dirty.Transform;
                down += "T+";
            }
            if (down)
                down = down.substr(0, down.length - 1);
            var up = "";
            if (curdirt & _Dirty.Invalidate) {
                curdirt &= ~_Dirty.Invalidate;
                up += "I+";
            }
            if (curdirt & _Dirty.Bounds) {
                curdirt &= ~_Dirty.Bounds;
                up += "B+";
            }
            if (up)
                up = up.substr(0, up.length - 1);
            return "[" + down + ":" + up + "]";
        };
        VisualTreeHelper._SerializeFlags = function (flags) {
            var str = "";
            if (flags & Fayde.UIElementFlags.DirtySizeHint) {
                flags &= ~Fayde.UIElementFlags.DirtySizeHint;
                str += "S+";
            }
            if (flags & Fayde.UIElementFlags.DirtyMeasureHint) {
                flags &= ~Fayde.UIElementFlags.DirtyMeasureHint;
                str += "M+";
            }
            if (flags & Fayde.UIElementFlags.DirtyArrangeHint) {
                flags &= ~Fayde.UIElementFlags.DirtyArrangeHint;
                str += "A+";
            }
            if (flags & Fayde.UIElementFlags.TotalHitTestVisible) {
                flags &= ~Fayde.UIElementFlags.TotalHitTestVisible;
                str += "THT+";
            }
            if (flags & Fayde.UIElementFlags.TotalRenderVisible) {
                flags &= ~Fayde.UIElementFlags.TotalRenderVisible;
                str += "TRV+";
            }
            if (flags & Fayde.UIElementFlags.HitTestVisible) {
                flags &= ~Fayde.UIElementFlags.HitTestVisible;
                str += "HT+";
            }
            if (flags & Fayde.UIElementFlags.RenderVisible) {
                flags &= ~Fayde.UIElementFlags.RenderVisible;
                str += "RV+";
            }
            if (str)
                str = str.substring(0, str.length - 1);
            return "[" + str + "]";
        };
        VisualTreeHelper.__GetById = function (id) {
            var rv = Fayde.Application.Current.RootVisual;
            var topNode = (rv) ? rv.XamlNode : null;
            if (!topNode)
                return;
            var walker = Fayde.DeepTreeWalker(topNode);
            var curNode;
            while (curNode = walker.Step()) {
                if ((curNode.XObject)._ID === id)
                    return curNode.XObject;
            }
        };
        return VisualTreeHelper;
    })();
    Fayde.VisualTreeHelper = VisualTreeHelper;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    function setterSort(setter1, setter2) {
        var a = setter1.Property;
        var b = setter2.Property;
        return (a === b) ? 0 : ((a._ID > b._ID) ? 1 : -1);
    }
    function mergeSetters(arr, dps, style) {
        var enumerator = style.Setters.GetEnumerator(true);
        var setter;
        while (enumerator.MoveNext()) {
            setter = enumerator.Current;
            if (!(setter instanceof Fayde.Setter))
                continue;
            var propd = setter.Property;
            if (!propd)
                continue;
            if (dps[propd._ID])
                continue;
            dps[propd._ID] = setter;
            arr.push(setter);
        }
    }
    function SingleStyleWalker(style) {
        var dps = [];
        var flattenedSetters = [];
        var cur = style;
        while (cur) {
            mergeSetters(flattenedSetters, dps, cur);
            cur = cur.BasedOn;
        }
        flattenedSetters.sort(setterSort);
        return {
            Step: function () {
                return flattenedSetters.shift();
            }
        };
    }
    Fayde.SingleStyleWalker = SingleStyleWalker;
    function MultipleStylesWalker(styles) {
        var flattenedSetters = [];
        if (styles) {
            var dps = [];
            var stylesSeen = [];
            var len = styles.length;
            for (var i = 0; i < len; i++) {
                var style = styles[i];
                while (style) {
                    if (stylesSeen.indexOf(style) > -1)
                        continue;
                    mergeSetters(flattenedSetters, dps, style);
                    stylesSeen.push(style);
                    style = style.BasedOn;
                }
            }
            flattenedSetters.sort(setterSort);
        }
        return {
            Step: function () {
                return flattenedSetters.shift();
            }
        };
    }
    Fayde.MultipleStylesWalker = MultipleStylesWalker;
    function DeepTreeWalker(topNode, direction) {
        var last = undefined;
        var dir = Fayde.VisualTreeDirection.Logical;
        var walkList = [topNode];
        if (direction)
            dir = direction;
        return {
            Step: function () {
                if (last) {
                    var enumerator = last.GetVisualTreeEnumerator(dir);
                    var insertIndex = 0;
                    while (enumerator.MoveNext()) {
                        walkList.splice(insertIndex, 0, enumerator.Current);
                        insertIndex++;
                    }
                }
                var next = walkList.shift();
                if (!next) {
                    last = undefined;
                    return;
                }
                return (last = next);
            },
            SkipBranch: function () {
                last = undefined;
            }
        };
    }
    Fayde.DeepTreeWalker = DeepTreeWalker;
    function compare(left, right) {
        if (!left)
            return !right ? 0 : -1;
        if (!right)
            return 1;
        var v1 = left.XObject.TabIndex;
        var v2 = right.XObject.TabIndex;
        if (v1 == null) {
            return v2 != null ? -1 : 0;
        } else if (v2 == null) {
            return 1;
        }
        if (v1 > v2)
            return 1;
        return v1 === v2 ? 0 : -1;
    }
    function getParentNavigationMode(uin) {
        while (uin) {
            if (uin instanceof Fayde.Controls.ControlNode)
                return (uin).XObject.TabNavigation;
            return Fayde.Input.KeyboardNavigationMode.Local;
        }
        return Fayde.Input.KeyboardNavigationMode.Local;
    }
    function getActiveNavigationMode(uin) {
        while (uin) {
            if (uin instanceof Fayde.Controls.ControlNode)
                return (uin).XObject.TabNavigation;
            uin = uin.VisualParentNode;
        }
        return Fayde.Input.KeyboardNavigationMode.Local;
    }
    function walkChildren(root, cur, forwards) {
        var walker = new TabNavigationWalker(root, cur, forwards);
        return walker.FocusChild();
    }
    var TabNavigationWalker = (function () {
        function TabNavigationWalker(root, cur, forwards) {
            this._Root = root;
            this._Current = cur;
            this._Forwards = forwards;
            this._TabSorted = [];
        }
        TabNavigationWalker.prototype.FocusChild = function () {
            var childNode;
            var childIsControl;
            var curIndex = -1;
            var childWalker = DeepTreeWalker(this._Root);
            while (childNode = childWalker.Step()) {
                if (childNode === this._Root || !(childNode instanceof Fayde.Controls.ControlNode))
                    continue;
                this._TabSorted.push(childNode);
                childWalker.SkipBranch();
            }
            if (this._TabSorted.length > 1) {
                this._TabSorted.sort(compare);
                if (!this._Forwards)
                    this._TabSorted = this._TabSorted.reverse();
            }
            var len = this._TabSorted.length;
            for (var i = 0; i < len; i++) {
                if (this._TabSorted[i] === this._Current)
                    curIndex = i;
            }
            if (curIndex !== -1 && getActiveNavigationMode(this._Root) === Fayde.Input.KeyboardNavigationMode.Once) {
                if (!this._Forwards && this._Root instanceof Fayde.Controls.ControlNode)
                    return (this._Root).TabTo();
                return false;
            }
            var len = this._TabSorted.length;
            if (len > 0) {
                for (var j = 0; j < len; j++) {
                    if ((j + curIndex + 1) === len && getActiveNavigationMode(this._Root) !== Fayde.Input.KeyboardNavigationMode.Cycle)
                        break;
                    childNode = this._TabSorted[(j + curIndex + 1) % len];
                    childIsControl = childNode instanceof Fayde.Controls.ControlNode;
                    if (childIsControl && !(childNode).XObject.IsEnabled)
                        continue;
                    if (!this._Forwards && walkChildren(childNode))
                        return true;
                    if (childIsControl && (childNode).TabTo())
                        return true;
                    if (this._Forwards && walkChildren(childNode))
                        return true;
                }
            }
            if (curIndex !== -1 && !this._Forwards) {
                if (this._Root instanceof Fayde.Controls.ControlNode)
                    return (this._Root).TabTo();
            }
            return false;
        };
        TabNavigationWalker.Focus = function (uin, forwards) {
            var focused = false;
            var cur = uin;
            var root = uin;
            if ((root.VisualParentNode && getParentNavigationMode(root.VisualParentNode) === Fayde.Input.KeyboardNavigationMode.Once) || (!forwards && root && root.VisualParentNode)) {
                while (root = root.VisualParentNode)
                    if (root instanceof Fayde.Controls.ControlNode || !root.VisualParentNode)
                        break;
            }
            do {
                focused = focused || walkChildren(root, cur, forwards);
                if (!focused && getActiveNavigationMode(root) === Fayde.Input.KeyboardNavigationMode.Cycle)
                    return true;
                cur = root;
                root = root.VisualParentNode;
                while (root && !(root instanceof Fayde.Controls.ControlNode) && root.VisualParentNode)
                    root = root.VisualParentNode;
            } while(!focused && root);
            if (!focused)
                focused = focused || walkChildren(cur, null, forwards);
            return focused;
        };
        return TabNavigationWalker;
    })();
    Fayde.TabNavigationWalker = TabNavigationWalker;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Providers) {
        (function (StyleIndex) {
            StyleIndex[StyleIndex["VisualTree"] = 0] = "VisualTree";
            StyleIndex[StyleIndex["ApplicationResources"] = 1] = "ApplicationResources";
            StyleIndex[StyleIndex["GenericXaml"] = 2] = "GenericXaml";
            StyleIndex[StyleIndex["Count"] = 3] = "Count";
        })(Providers.StyleIndex || (Providers.StyleIndex = {}));
        var StyleIndex = Providers.StyleIndex;
        (function (StyleMask) {
            StyleMask[StyleMask["None"] = 0] = "None";
            StyleMask[StyleMask["VisualTree"] = 1 << StyleIndex.VisualTree] = "VisualTree";
            StyleMask[StyleMask["ApplicationResources"] = 1 << StyleIndex.ApplicationResources] = "ApplicationResources";
            StyleMask[StyleMask["GenericXaml"] = 1 << StyleIndex.GenericXaml] = "GenericXaml";
            StyleMask[StyleMask["All"] = StyleMask.VisualTree | StyleMask.ApplicationResources | StyleMask.GenericXaml] = "All";
        })(Providers.StyleMask || (Providers.StyleMask = {}));
        var StyleMask = Providers.StyleMask;

        var ImplicitStyleBroker = (function () {
            function ImplicitStyleBroker() {
            }
            ImplicitStyleBroker.Set = function (fe, mask, styles) {
                if (!styles)
                    styles = ImplicitStyleBroker.GetImplicitStyles(fe, mask);
                if (styles) {
                    var error = new BError();
                    var len = StyleIndex.Count;
                    for (var i = 0; i < len; i++) {
                        var style = styles[i];
                        if (!style)
                            continue;
                        if (!style.Validate(fe, error)) {
                            error.ThrowException();
                            return;
                        }
                    }
                }
                ImplicitStyleBroker.SetImpl(fe, mask, styles);
            };
            ImplicitStyleBroker.SetImpl = function (fe, mask, styles) {
                if (!styles)
                    return;
                var oldStyles = (fe.XamlNode)._ImplicitStyles;
                var newStyles = [null, null, null];
                if (oldStyles) {
                    newStyles[StyleIndex.GenericXaml] = oldStyles[StyleIndex.GenericXaml];
                    newStyles[StyleIndex.ApplicationResources] = oldStyles[StyleIndex.ApplicationResources];
                    newStyles[StyleIndex.VisualTree] = oldStyles[StyleIndex.VisualTree];
                }
                if (mask & StyleMask.GenericXaml)
                    newStyles[StyleIndex.GenericXaml] = styles[StyleIndex.GenericXaml];
                if (mask & StyleMask.ApplicationResources)
                    newStyles[StyleIndex.ApplicationResources] = styles[StyleIndex.ApplicationResources];
                if (mask & StyleMask.VisualTree)
                    newStyles[StyleIndex.VisualTree] = styles[StyleIndex.VisualTree];
                ImplicitStyleBroker.ApplyStyles(fe, mask, styles);
            };
            ImplicitStyleBroker.Clear = function (fe, mask) {
                var holder = fe.XamlNode;
                var oldStyles = holder._ImplicitStyles;
                if (!oldStyles)
                    return;
                var newStyles = oldStyles.slice(0);
                if (mask & StyleMask.GenericXaml)
                    newStyles[StyleIndex.GenericXaml] = null;
                if (mask & StyleMask.ApplicationResources)
                    newStyles[StyleIndex.ApplicationResources] = null;
                if (mask & StyleMask.VisualTree)
                    newStyles[StyleIndex.VisualTree] = null;
                ImplicitStyleBroker.ApplyStyles(fe, holder._StyleMask & ~mask, newStyles);
            };
            ImplicitStyleBroker.ApplyStyles = function (fe, mask, styles) {
                var holder = fe.XamlNode;
                var oldStyles = holder._ImplicitStyles;
                var isChanged = !oldStyles || mask !== holder._StyleMask;
                if (!isChanged) {
                    for (var i = 0; i < StyleIndex.Count; i++) {
                        if (styles[i] !== oldStyles[i]) {
                            isChanged = true;
                            break;
                        }
                    }
                }
                if (!isChanged)
                    return;
                var arr = (fe)._PropertyStorage;
                var oldWalker = Fayde.MultipleStylesWalker(oldStyles);
                var newWalker = Fayde.MultipleStylesWalker(styles);
                var oldSetter = oldWalker.Step();
                var newSetter = newWalker.Step();
                var oldProp;
                var newProp;
                var storage;
                var oldValue = undefined;
                var newValue = undefined;
                var propd;
                while (oldSetter || newSetter) {
                    if (oldSetter) {
                        propd = oldProp = oldSetter.Property;
                        oldValue = oldSetter.ConvertedValue;
                    }
                    if (newSetter) {
                        propd = newProp = newSetter.Property;
                        newValue = newSetter.ConvertedValue;
                    }
                    storage = arr[propd._ID];
                    if (!storage)
                        storage = arr[propd._ID] = propd.Store.CreateStorage(fe, propd);
                    propd.Store.SetImplicitStyle(storage, newValue);
                    if (oldProp)
                        oldSetter = oldWalker.Step();
                    if (newProp)
                        newSetter = newWalker.Step();
                }
                holder._ImplicitStyles = styles;
                holder._StyleMask = mask;
            };
            ImplicitStyleBroker.GetImplicitStyles = function (fe, mask) {
                var feType = (fe).constructor;
                var feTypeName = (feType)._TypeName;
                var app = Fayde.Application.Current;
                var genericXamlStyle = undefined;
                if (app) {
                    if ((mask & StyleMask.GenericXaml) != 0) {
                        if (fe instanceof Fayde.Controls.Control) {
                            genericXamlStyle = (fe).GetDefaultStyle();
                            if (!genericXamlStyle) {
                                var styleKey = fe.DefaultStyleKey;
                                if (styleKey)
                                    genericXamlStyle = app.GetImplicitStyle(styleKey);
                            }
                        }
                    }
                }
                if (false) {
                    var appResourcesStyle = undefined;
                    var rd = app.Resources;
                    if ((mask & StyleMask.ApplicationResources) != 0) {
                        appResourcesStyle = rd.Get(feType);
                        if (!appResourcesStyle)
                            appResourcesStyle = rd.Get(feTypeName);
                    }
                }
                var visualTreeStyle = undefined;
                if ((mask & StyleMask.VisualTree) != 0) {
                    var cur = fe;
                    var curNode = fe.XamlNode;
                    var isControl = curNode instanceof Fayde.Controls.ControlNode;
                    while (curNode) {
                        cur = curNode.XObject;
                        if (cur.TemplateOwner && !fe.TemplateOwner) {
                            cur = cur.TemplateOwner;
                            curNode = cur.XamlNode;
                            continue;
                        }
                        if (!isControl && cur === fe.TemplateOwner)
                            break;
                        rd = cur.Resources;
                        if (rd) {
                            visualTreeStyle = rd.Get(feType);
                            if (!visualTreeStyle)
                                visualTreeStyle = rd.Get(feTypeName);
                            if (visualTreeStyle)
                                break;
                        }
                        curNode = curNode.VisualParentNode;
                    }
                }
                var styles = [];
                styles[StyleIndex.GenericXaml] = genericXamlStyle;
                styles[StyleIndex.ApplicationResources] = appResourcesStyle;
                styles[StyleIndex.VisualTree] = visualTreeStyle;
                return styles;
            };
            return ImplicitStyleBroker;
        })();
        Providers.ImplicitStyleBroker = ImplicitStyleBroker;
    })(Fayde.Providers || (Fayde.Providers = {}));
    var Providers = Fayde.Providers;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Providers) {
        var LocalStyleBroker = (function () {
            function LocalStyleBroker() {
            }
            LocalStyleBroker.Set = function (fe, newStyle) {
                var holder = fe.XamlNode;
                var arr = (fe)._PropertyStorage;
                var oldWalker = Fayde.SingleStyleWalker(holder._LocalStyle);
                var newWalker = Fayde.SingleStyleWalker(newStyle);
                newStyle.Seal();
                var oldSetter = oldWalker.Step();
                var newSetter = newWalker.Step();
                var oldProp;
                var newProp;
                var storage;
                var oldValue = undefined;
                var newValue = undefined;
                var propd;
                while (oldSetter || newSetter) {
                    if (oldSetter) {
                        propd = oldProp = oldSetter.Property;
                        oldValue = oldSetter.ConvertedValue;
                    }
                    if (newSetter) {
                        propd = newProp = newSetter.Property;
                        newValue = newSetter.ConvertedValue;
                    }
                    storage = arr[propd._ID];
                    if (!storage)
                        storage = arr[propd._ID] = propd.Store.CreateStorage(fe, propd);
                    propd.Store.SetLocalStyleValue(storage, newValue);
                    if (oldProp)
                        oldSetter = oldWalker.Step();
                    if (newProp)
                        newSetter = newWalker.Step();
                }
                holder._LocalStyle = newStyle;
            };
            return LocalStyleBroker;
        })();
        Providers.LocalStyleBroker = LocalStyleBroker;
    })(Fayde.Providers || (Fayde.Providers = {}));
    var Providers = Fayde.Providers;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    Fayde.UnsetValue = {};
})(Fayde || (Fayde = {}));
var Fayde;
(function (Fayde) {
    (function (Providers) {
        (function (PropertyPrecedence) {
            PropertyPrecedence[PropertyPrecedence["IsEnabled"] = 0] = "IsEnabled";
            PropertyPrecedence[PropertyPrecedence["LocalValue"] = 1] = "LocalValue";
            PropertyPrecedence[PropertyPrecedence["LocalStyle"] = 2] = "LocalStyle";
            PropertyPrecedence[PropertyPrecedence["ImplicitStyle"] = 3] = "ImplicitStyle";
            PropertyPrecedence[PropertyPrecedence["Inherited"] = 4] = "Inherited";
            PropertyPrecedence[PropertyPrecedence["InheritedDataContext"] = 5] = "InheritedDataContext";
            PropertyPrecedence[PropertyPrecedence["DefaultValue"] = 6] = "DefaultValue";
            PropertyPrecedence[PropertyPrecedence["Lowest"] = 6] = "Lowest";
            PropertyPrecedence[PropertyPrecedence["Highest"] = 0] = "Highest";
            PropertyPrecedence[PropertyPrecedence["Count"] = 7] = "Count";
        })(Providers.PropertyPrecedence || (Providers.PropertyPrecedence = {}));
        var PropertyPrecedence = Providers.PropertyPrecedence;

        function GetStorage(dobj, propd) {
            var arr = (dobj)._PropertyStorage;
            var storage = arr[propd._ID];
            if (!storage)
                arr[propd._ID] = storage = propd.Store.CreateStorage(dobj, propd);
            return storage;
        }
        Providers.GetStorage = GetStorage;
        var PropertyStore = (function () {
            function PropertyStore() {
            }
            PropertyStore.prototype.GetValue = function (storage) {
                var val;
                if ((val = storage.Local) !== undefined)
                    return val;
                if ((val = storage.LocalStyleValue) !== undefined)
                    return val;
                if ((val = storage.ImplicitStyleValue) !== undefined)
                    return val;
                return storage.Property.DefaultValue;
            };
            PropertyStore.prototype.GetValuePrecedence = function (storage) {
                if (storage.Local !== undefined)
                    return PropertyPrecedence.LocalValue;
                if (storage.LocalStyleValue !== undefined)
                    return PropertyPrecedence.LocalStyle;
                if (storage.ImplicitStyleValue !== undefined)
                    return PropertyPrecedence.ImplicitStyle;
                return PropertyPrecedence.DefaultValue;
            };
            PropertyStore.prototype.SetLocalValue = function (storage, newValue) {
                if (newValue === undefined || newValue === Fayde.UnsetValue) {
                    this.ClearValue(storage);
                    return;
                }
                var propd = storage.Property;
                if (newValue && propd.GetTargetType() === String) {
                    if (typeof newValue !== "string")
                        newValue = newValue.toString();
                }
                var isValidOut = { IsValid: false };
                newValue = propd.ValidateSetValue(storage.OwnerNode.XObject, newValue, isValidOut);
                if (!isValidOut.IsValid)
                    return;
                var precDiff = storage.Precedence - PropertyPrecedence.LocalValue;
                if (!propd.AlwaysChange && precDiff < 0) {
                    storage.Local = newValue;
                    return;
                }
                var oldValue = undefined;
                if (precDiff > 0)
                    oldValue = this.GetValue(storage);
else
                    oldValue = storage.Local;
                storage.Local = newValue;
                this.OnPropertyChanged(storage, PropertyPrecedence.LocalValue, oldValue, newValue);
            };
            PropertyStore.prototype.SetLocalStyleValue = function (storage, newValue) {
                var precDiff = storage.Precedence - PropertyPrecedence.LocalStyle;
                if (precDiff < 0) {
                    storage.LocalStyleValue = newValue;
                    return;
                }
                var oldValue = undefined;
                if (precDiff > 0)
                    oldValue = this.GetValue(storage);
else
                    oldValue = storage.LocalStyleValue;
                storage.LocalStyleValue = newValue;
                this.OnPropertyChanged(storage, PropertyPrecedence.LocalStyle, oldValue, newValue);
            };
            PropertyStore.prototype.SetImplicitStyle = function (storage, newValue) {
                var precDiff = storage.Precedence - PropertyPrecedence.ImplicitStyle;
                if (precDiff < 0) {
                    storage.ImplicitStyleValue = newValue;
                    return;
                }
                var oldValue = undefined;
                if (precDiff > 0)
                    oldValue = this.GetValue(storage);
else
                    oldValue = storage.ImplicitStyleValue;
                storage.ImplicitStyleValue = newValue;
                this.OnPropertyChanged(storage, PropertyPrecedence.ImplicitStyle, oldValue, newValue);
            };
            PropertyStore.prototype.ClearValue = function (storage) {
                var oldLocal = storage.Local;
                if (oldLocal === undefined)
                    return;
                storage.Local = undefined;
                this.OnPropertyChanged(storage, PropertyPrecedence.LocalValue, oldLocal, undefined);
            };
            PropertyStore.prototype.OnPropertyChanged = function (storage, effectivePrecedence, oldValue, newValue) {
                var propd = storage.Property;
                if (newValue === undefined) {
                    effectivePrecedence = this.GetValuePrecedence(storage);
                    newValue = this.GetValue(storage);
                }
                storage.Precedence = effectivePrecedence;
                if (!propd.AlwaysChange && oldValue === newValue)
                    return undefined;
                if (!storage.Property.IsCustom) {
                    if (oldValue instanceof Fayde.XamlObject)
                        (oldValue).XamlNode.Detach();
                    if (newValue instanceof Fayde.XamlObject) {
                        var error = new BError();
                        if (!(newValue).XamlNode.AttachTo(storage.OwnerNode, error))
                            error.ThrowException();
                    }
                }
                var args = {
                    Property: propd,
                    OldValue: oldValue,
                    NewValue: newValue
                };
                var sender = storage.OwnerNode.XObject;
                if (propd.ChangedCallback)
                    propd.ChangedCallback(sender, args);
                var listeners = storage.PropListeners;
                if (listeners) {
                    var len = listeners.length;
                    for (var i = 0; i < len; i++) {
                        listeners[i].OnPropertyChanged(sender, args);
                    }
                }
                return args;
            };
            PropertyStore.prototype.ListenToChanged = function (target, propd, func, closure) {
                var storage = GetStorage(target, propd);
                var listeners = storage.PropListeners;
                if (!listeners)
                    listeners = storage.PropListeners = [];
                var listener = {
                    Detach: function () {
                        var index = listeners.indexOf(listener);
                        if (index > -1)
                            listeners.splice(index, 1);
                    },
                    Property: propd,
                    OnPropertyChanged: function (sender, args) {
                        func.call(closure, sender, args);
                    }
                };
                listeners.push(listener);
                return listener;
            };
            PropertyStore.prototype.CreateStorage = function (dobj, propd) {
                return {
                    OwnerNode: dobj.XamlNode,
                    Property: propd,
                    Precedence: PropertyPrecedence.DefaultValue,
                    Animations: undefined,
                    Local: undefined,
                    LocalStyleValue: undefined,
                    ImplicitStyleValue: undefined,
                    PropListeners: undefined
                };
            };
            PropertyStore.prototype.Clone = function (dobj, sourceStorage) {
                var newStorage = this.CreateStorage(dobj, sourceStorage.Property);
                newStorage.Precedence = sourceStorage.Precedence;
                newStorage.Local = Fayde.Clone(sourceStorage.Local);
                var anims = newStorage.Animations = sourceStorage.Animations;
                if (anims) {
                    for (var i = 0; i < anims.length; i++) {
                        anims[i].PropStorage = newStorage;
                    }
                }
                return newStorage;
            };
            return PropertyStore;
        })();
        Providers.PropertyStore = PropertyStore;
        PropertyStore.Instance = new PropertyStore();
    })(Fayde.Providers || (Fayde.Providers = {}));
    var Providers = Fayde.Providers;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Data) {
        (function (RelativeSourceMode) {
            RelativeSourceMode[RelativeSourceMode["TemplatedParent"] = 1] = "TemplatedParent";
            RelativeSourceMode[RelativeSourceMode["Self"] = 2] = "Self";
            RelativeSourceMode[RelativeSourceMode["FindAncestor"] = 3] = "FindAncestor";
        })(Data.RelativeSourceMode || (Data.RelativeSourceMode = {}));
        var RelativeSourceMode = Data.RelativeSourceMode;
        (function (BindingMode) {
            BindingMode[BindingMode["TwoWay"] = 0] = "TwoWay";
            BindingMode[BindingMode["OneWay"] = 1] = "OneWay";
            BindingMode[BindingMode["OneTime"] = 2] = "OneTime";
            BindingMode[BindingMode["OneWayToSource"] = 3] = "OneWayToSource";
        })(Data.BindingMode || (Data.BindingMode = {}));
        var BindingMode = Data.BindingMode;
        (function (UpdateSourceTrigger) {
            UpdateSourceTrigger[UpdateSourceTrigger["Default"] = 0] = "Default";
            UpdateSourceTrigger[UpdateSourceTrigger["PropertyChanged"] = 1] = "PropertyChanged";
            UpdateSourceTrigger[UpdateSourceTrigger["Explicit"] = 3] = "Explicit";
        })(Data.UpdateSourceTrigger || (Data.UpdateSourceTrigger = {}));
        var UpdateSourceTrigger = Data.UpdateSourceTrigger;
        (function (_PropertyNodeType) {
            _PropertyNodeType[_PropertyNodeType["AttachedProperty"] = 0] = "AttachedProperty";
            _PropertyNodeType[_PropertyNodeType["Property"] = 1] = "Property";
            _PropertyNodeType[_PropertyNodeType["Indexed"] = 2] = "Indexed";
            _PropertyNodeType[_PropertyNodeType["None"] = 3] = "None";
        })(Data._PropertyNodeType || (Data._PropertyNodeType = {}));
        var _PropertyNodeType = Data._PropertyNodeType;
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Data) {
        (function (PropertyNodeType) {
            PropertyNodeType[PropertyNodeType["None"] = 0] = "None";
            PropertyNodeType[PropertyNodeType["AttachedProperty"] = 1] = "AttachedProperty";
            PropertyNodeType[PropertyNodeType["Indexed"] = 2] = "Indexed";
            PropertyNodeType[PropertyNodeType["Property"] = 3] = "Property";
        })(Data.PropertyNodeType || (Data.PropertyNodeType = {}));
        var PropertyNodeType = Data.PropertyNodeType;
        var PropertyPathParser = (function () {
            function PropertyPathParser(path) {
                this.Path = path;
            }
            PropertyPathParser.prototype.Step = function (data) {
                var type = PropertyNodeType.None;
                var path = this.Path;
                if (path.length === 0) {
                    data.typeName = null;
                    data.propertyName = null;
                    data.index = null;
                    return type;
                }
                var end = 0;
                if (path.charAt(0) === '(') {
                    type = PropertyNodeType.AttachedProperty;
                    end = path.indexOf(')');
                    if (end === -1)
                        throw new ArgumentException("Invalid property path. Attached property is missing the closing bracket");
                    var tickOpen = path.indexOf('\'');
                    var tickClose = 0;
                    var typeOpen;
                    var typeClose;
                    var propOpen;
                    var propClose;
                    typeOpen = path.indexOf('\'');
                    if (typeOpen > 0) {
                        typeOpen++;
                        typeClose = path.indexOf('\'', typeOpen + 1);
                        if (typeClose < 0)
                            throw new Exception("Invalid property path, Unclosed type name '" + path + "'.");
                        propOpen = path.indexOf('.', typeClose);
                        if (propOpen < 0)
                            throw new Exception("Invalid properth path, No property indexer found '" + path + "'.");
                        propOpen++;
                    } else {
                        typeOpen = 1;
                        typeClose = path.indexOf('.', typeOpen);
                        if (typeClose < 0)
                            throw new Exception("Invalid property path, No property indexer found on '" + path + "'.");
                        propOpen = typeClose + 1;
                    }
                    propClose = end;
                    data.typeName = path.slice(typeOpen, typeClose);
                    data.propertyName = path.slice(propOpen, propClose);
                    data.index = null;
                    if (path.length > (end + 1) && path.charAt(end + 1) === '.')
                        end++;
                    path = path.substr(end + 1);
                } else if (path.charAt(0) === '[') {
                    type = PropertyNodeType.Indexed;
                    end = path.indexOf(']');
                    data.typeName = null;
                    data.propertyName = null;
                    data.index = parseInt(path.substr(1, end - 1));
                    path = path.substr(end + 1);
                    if (path.charAt(0) === '.')
                        path = path.substr(1);
                } else {
                    type = PropertyNodeType.Property;
                    end = indexOfAny(path, ['.', '[']);
                    if (end === -1) {
                        data.propertyName = path;
                        path = "";
                    } else {
                        data.propertyName = path.substr(0, end);
                        if (path.charAt(end) === '.')
                            path = path.substr(end + 1);
else
                            path = path.substr(end);
                    }
                    data.typeName = null;
                    data.index = null;
                }
                this.Path = path;
                return type;
            };
            return PropertyPathParser;
        })();
        Data.PropertyPathParser = PropertyPathParser;
        function indexOfAny(str, carr, start) {
            if (!carr)
                return -1;
            if (!start)
                start = 0;
            for (var cur = start; cur < str.length; cur++) {
                var c = str.charAt(cur);
                for (var i = 0; i < carr.length; i++) {
                    if (c === carr[i])
                        return cur;
                }
            }
            return -1;
        }
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Data) {
        var PropertyPathWalker = (function () {
            function PropertyPathWalker(path, bindDirectlyToSource, bindsToView, isDataContextBound) {
                bindDirectlyToSource = bindDirectlyToSource !== false;
                bindsToView = bindsToView === true;
                this.IsDataContextBound = isDataContextBound === true;
                this.Path = path;
                this.IsDataContextBound = isDataContextBound;
                var lastCVNode = null;
                if (!path || path === ".") {
                    lastCVNode = createCollectionViewNode(bindDirectlyToSource, bindsToView);
                    this.Node = lastCVNode;
                    this.FinalNode = lastCVNode;
                } else {
                    var data = {
                        typeName: undefined,
                        propertyName: undefined,
                        index: undefined
                    };
                    var type;
                    var parser = new Data.PropertyPathParser(path);
                    while ((type = parser.Step(data)) !== Data.PropertyNodeType.None) {
                        var isViewProperty = false;
                        var node = createCollectionViewNode(bindDirectlyToSource, isViewProperty);
                        lastCVNode = node;
                        switch (type) {
                            case Data.PropertyNodeType.AttachedProperty:
                            case Data.PropertyNodeType.Property:
                                node.Next = createStandardNode(data.typeName, data.propertyName);
                                break;
                            case Data.PropertyNodeType.Indexed:
                                node.Next = createIndexedNode(data.index);
                                break;
                            default:
                                break;
                        }
                        if (this.FinalNode)
                            this.FinalNode.Next = node;
else
                            this.Node = node;
                        this.FinalNode = node.Next;
                    }
                }
                lastCVNode.BindToView = lastCVNode.BindToView || bindsToView;
                this.FinalNode.Listen(this);
            }
            Object.defineProperty(PropertyPathWalker.prototype, "Value", {
                get: function () {
                    return this._Value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPathWalker.prototype, "IsPathBroken", {
                get: function () {
                    var path = this.Path;
                    if (this.IsDataContextBound && (!path || path.length < 1))
                        return false;
                    var node = this.Node;
                    while (node) {
                        if (node.IsBroken)
                            return true;
                        node = node.Next;
                    }
                    return false;
                },
                enumerable: true,
                configurable: true
            });

            PropertyPathWalker.prototype.GetValue = function (item) {
                this.Update(item);
                var o = this.FinalNode.Value;
                this.Update(null);
                return o;
            };
            PropertyPathWalker.prototype.Update = function (source) {
                this.Source = source;
                this.Node.SetSource(source);
            };
            PropertyPathWalker.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            PropertyPathWalker.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            PropertyPathWalker.prototype.IsBrokenChanged = function (node) {
                this.ValueInternal = node.Value;
                var listener = this._Listener;
                if (listener)
                    listener.IsBrokenChanged();
            };
            PropertyPathWalker.prototype.ValueChanged = function (node) {
                this.ValueInternal = node.Value;
                var listener = this._Listener;
                if (listener)
                    listener.ValueChanged();
            };
            return PropertyPathWalker;
        })();
        Data.PropertyPathWalker = PropertyPathWalker;
        var PropertyPathNode = (function () {
            function PropertyPathNode() {
            }
            Object.defineProperty(PropertyPathNode.prototype, "IsBroken", {
                get: function () {
                    return this._IsBroken;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPathNode.prototype, "Source", {
                get: function () {
                    return this._Source;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPathNode.prototype, "Value", {
                get: function () {
                    return this._Value;
                },
                enumerable: true,
                configurable: true
            });
            PropertyPathNode.prototype.Listen = function (listener) {
                this._NodeListener = listener;
            };
            PropertyPathNode.prototype.Unlisten = function (listener) {
                if (this._NodeListener === listener)
                    this._NodeListener = null;
            };
            PropertyPathNode.prototype.OnSourceChanged = function (oldSource, newSource) {
            };
            PropertyPathNode.prototype.OnSourcePropertyChanged = function (o, e) {
            };
            PropertyPathNode.prototype.UpdateValue = function () {
                AbstractMethod("PropertyPathNode.UpdateValue");
            };
            PropertyPathNode.prototype.SetValue = function (value) {
                AbstractMethod("PropertyPathNode.SetValue");
            };
            PropertyPathNode.prototype.SetSource = function (value) {
                if (value == null || !Nullstone.Equals(value, this._Source)) {
                    var oldSource = this._Source;
                    if (oldSource && Nullstone.ImplementsInterface(oldSource, Fayde.INotifyPropertyChanged_))
                        (oldSource).PropertyChanged.Unsubscribe(this.OnSourcePropertyChanged, this);
                    this._Source = value;
                    if (this._Source && Nullstone.ImplementsInterface(this._Source, Fayde.INotifyPropertyChanged_)) {
                        (this._Source).PropertyChanged.Subscribe(this.OnSourcePropertyChanged, this);
                    }
                    this.OnSourceChanged(oldSource, this._Source);
                    this.UpdateValue();
                    if (this.Next)
                        this.Next.SetSource(this._Value);
                }
            };
            PropertyPathNode.prototype.UpdateValueAndIsBroken = function (newValue, isBroken) {
                var emitBrokenChanged = this._IsBroken !== isBroken;
                var emitValueChanged = !Nullstone.Equals(this.Value, newValue);
                this._IsBroken = isBroken;
                this._Value = newValue;
                if (emitValueChanged) {
                    var listener = this._NodeListener;
                    if (listener)
                        listener.ValueChanged(this);
                } else if (emitBrokenChanged) {
                    var listener = this._NodeListener;
                    if (listener)
                        listener.IsBrokenChanged(this);
                }
            };
            PropertyPathNode.prototype._CheckIsBroken = function () {
                return !this.Source || (!this.PropertyInfo && !this.DependencyProperty);
            };
            return PropertyPathNode;
        })();
        function createStandardNode(typeName, propertyName) {
            return new StandardPropertyPathNode(typeName, propertyName);
        }
        var StandardPropertyPathNode = (function (_super) {
            __extends(StandardPropertyPathNode, _super);
            function StandardPropertyPathNode(typeName, propertyName) {
                _super.call(this);
                this._STypeName = typeName;
                this._PropertyName = propertyName;
            }
            StandardPropertyPathNode.prototype.SetValue = function (value) {
                if (this.DependencyProperty)
                    (this.Source).SetValue(this.DependencyProperty, value);
else if (this.PropertyInfo)
                    this.PropertyInfo.SetValue(this.Source, value);
            };
            StandardPropertyPathNode.prototype.UpdateValue = function () {
                if (this.DependencyProperty) {
                    this.ValueType = this.DependencyProperty.GetTargetType();
                    this.UpdateValueAndIsBroken((this.Source).GetValue(this.DependencyProperty), this._CheckIsBroken());
                } else if (this.PropertyInfo) {
                    this.ValueType = null;
                    try  {
                        this.UpdateValueAndIsBroken(this.PropertyInfo.GetValue(this.Source), this._CheckIsBroken());
                    } catch (err) {
                        this.UpdateValueAndIsBroken(null, this._CheckIsBroken());
                    }
                } else {
                    this.ValueType = null;
                    this.UpdateValueAndIsBroken(null, this._CheckIsBroken());
                }
            };
            StandardPropertyPathNode.prototype.OnSourceChanged = function (oldSource, newSource) {
                _super.prototype.OnSourceChanged.call(this, oldSource, newSource);
                var oldDO;
                var newDO;
                if (oldSource instanceof Fayde.DependencyObject)
                    oldDO = oldSource;
                if (newSource instanceof Fayde.DependencyObject)
                    newDO = newSource;
                var listener = this._DPListener;
                if (listener) {
                    listener.Detach();
                    this._DPListener = listener = null;
                }
                this.DependencyProperty = null;
                this.PropertyInfo = null;
                if (!this.Source)
                    return;
                if (newDO) {
                    var propd = DependencyProperty.GetDependencyProperty(this.Source.constructor, this._PropertyName);
                    if (propd) {
                        this.DependencyProperty = propd;
                        this._DPListener = listener = propd.Store.ListenToChanged(newDO, propd, this.OnPropertyChanged, this);
                    }
                }
                if (!this.DependencyProperty || !this.DependencyProperty.IsAttached) {
                    this.PropertyInfo = PropertyInfo.Find(this.Source, this._PropertyName);
                }
            };
            StandardPropertyPathNode.prototype.OnPropertyChanged = function (sender, args) {
                try  {
                    this.UpdateValue();
                    if (this.Next)
                        this.Next.SetSource(this.Value);
                } catch (err) {
                }
            };
            StandardPropertyPathNode.prototype.OnSourcePropertyChanged = function (sender, e) {
                if (e.PropertyName === this._PropertyName && this.PropertyInfo) {
                    this.UpdateValue();
                    var next = this.Next;
                    if (next)
                        next.SetSource(this.Value);
                }
            };
            return StandardPropertyPathNode;
        })(PropertyPathNode);
        function createCollectionViewNode(bindsDirectlyToSource, bindsToView) {
            return new CollectionViewNode(bindsDirectlyToSource, bindsToView);
        }
        var CollectionViewNode = (function (_super) {
            __extends(CollectionViewNode, _super);
            function CollectionViewNode(bindsDirectlyToSource, bindToView) {
                _super.call(this);
                this.BindsDirectlyToSource = bindsDirectlyToSource === true;
                this.BindToView = bindToView === true;
            }
            CollectionViewNode.prototype.OnSourceChanged = function (oldSource, newSource) {
                _super.prototype.OnSourceChanged.call(this, oldSource, newSource);
                this.DisconnectViewHandlers();
                this.ConnectViewHandlers(newSource, newSource);
            };
            CollectionViewNode.prototype.ViewChanged = function (sender, e) {
                this.DisconnectViewHandlers(true);
                this.ConnectViewHandlers(null, e.NewValue);
                this.ViewCurrentChanged(this, EventArgs.Empty);
            };
            CollectionViewNode.prototype.ViewCurrentChanged = function (sender, e) {
                this.UpdateValue();
                if (this.Next)
                    this.Next.SetSource(this.Value);
            };
            CollectionViewNode.prototype.SetValue = function () {
                throw new NotSupportedException("SetValue");
            };
            CollectionViewNode.prototype.UpdateValue = function () {
                if (this.BindsDirectlyToSource) {
                    this.ValueType = this.Source == null ? null : this.Source.constructor;
                    this.UpdateValueAndIsBroken(this.Source, this._CheckIsBroken());
                } else {
                    var usableSource = this.Source;
                    var view;
                    if (this.Source instanceof Data.CollectionViewSource) {
                        usableSource = null;
                        view = this.Source.View;
                    } else if (Nullstone.ImplementsInterface(this.Source, Data.ICollectionView_)) {
                        view = this.Source;
                    }
                    if (!view) {
                        this.ValueType = usableSource == null ? null : usableSource.constructor;
                        this.UpdateValueAndIsBroken(usableSource, this._CheckIsBroken());
                    } else {
                        if (this.BindToView) {
                            this.ValueType = view.constructor;
                            this.UpdateValueAndIsBroken(view, this._CheckIsBroken());
                        } else {
                            this.ValueType = view.GetCurrentItem() == null ? null : view.GetCurrentItem().constructor;
                            this.UpdateValueAndIsBroken(view.GetCurrentItem(), this._CheckIsBroken());
                        }
                    }
                }
            };
            CollectionViewNode.prototype._CheckIsBroken = function () {
                return this.Source == null;
            };
            CollectionViewNode.prototype.ConnectViewHandlers = function (source, view) {
                if (source instanceof Data.CollectionViewSource) {
                    this._ViewPropertyListener = Data.CollectionViewSource.ViewProperty.Store.ListenToChanged(source, Data.CollectionViewSource.ViewProperty, this.ViewChanged, this);
                    view = source.View;
                }
                if (Nullstone.ImplementsInterface(view, Data.ICollectionView_)) {
                    this._View = view;
                    this._View.CurrentChanged.Subscribe(this.ViewCurrentChanged, this);
                }
            };
            CollectionViewNode.prototype.DisconnectViewHandlers = function (onlyView) {
                if (!onlyView)
                    onlyView = false;
                if (this._ViewPropertyListener && !onlyView) {
                    this._ViewPropertyListener.Detach();
                    this._ViewPropertyListener = null;
                }
                if (this._View) {
                    this._View.CurrentChanged.Unsubscribe(this.ViewCurrentChanged, this);
                }
            };
            return CollectionViewNode;
        })(PropertyPathNode);
        function createIndexedNode(index) {
            return new IndexedPropertyPathNode(index);
        }
        var IndexedPropertyPathNode = (function (_super) {
            __extends(IndexedPropertyPathNode, _super);
            function IndexedPropertyPathNode(index) {
                _super.call(this);
                this._IsBroken = false;
                var val = parseInt(index, 10);
                if (isNaN(val))
                    this._Index = index;
else
                    this._Index = val;
            }
            Object.defineProperty(IndexedPropertyPathNode.prototype, "Index", {
                get: function () {
                    return this._Index;
                },
                enumerable: true,
                configurable: true
            });
            IndexedPropertyPathNode.prototype.UpdateValue = function () {
                if (this.PropertyInfo == null) {
                    this._IsBroken = true;
                    this.ValueType = null;
                    this.UpdateValueAndIsBroken(null, this._IsBroken);
                    return;
                }
                try  {
                    var newVal = this.PropertyInfo.GetValue(this.Source, this._Index);
                    this._IsBroken = false;
                    this.ValueType = this.PropertyInfo.PropertyType;
                    this.UpdateValueAndIsBroken(newVal, this._IsBroken);
                } catch (err) {
                    this._IsBroken = true;
                    this.ValueType = null;
                    this.UpdateValueAndIsBroken(null, this._IsBroken);
                }
            };
            IndexedPropertyPathNode.prototype.SetValue = function (value) {
                if (this.PropertyInfo != null)
                    this.PropertyInfo.SetValue(this.Source, this._Index, value);
            };
            IndexedPropertyPathNode.prototype._CheckIsBroken = function () {
                return this._IsBroken || _super.prototype._CheckIsBroken.call(this);
            };
            IndexedPropertyPathNode.prototype.OnSourcePropertyChanged = function (o, e) {
                this.UpdateValue();
                if (this.Next != null)
                    this.Next.SetSource(this.Value);
            };
            IndexedPropertyPathNode.prototype.OnSourceChanged = function (oldSource, newSource) {
                _super.prototype.OnSourceChanged.call(this, oldSource, newSource);
                if (this.Listener != null) {
                    this.Listener.Detach();
                    this.Listener = null;
                }
                if (Nullstone.ImplementsInterface(newSource, Fayde.Collections.INotifyCollectionChanged_)) {
                    (newSource).CollectionChanged.Subscribe(this.CollectionChanged, this);
                }
                this._GetIndexer();
            };
            IndexedPropertyPathNode.prototype._GetIndexer = function () {
                this.PropertyInfo = null;
                if (this._Source != null) {
                    this.PropertyInfo = IndexedPropertyInfo.Find(this._Source);
                }
            };
            IndexedPropertyPathNode.prototype.CollectionChanged = function (o, e) {
                this.UpdateValue();
                if (this.Next != null)
                    this.Next.SetSource(this.Value);
            };
            return IndexedPropertyPathNode;
        })(PropertyPathNode);
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var _Dirty;
(function (_Dirty) {
    _Dirty[_Dirty["Transform"] = 1 << 0] = "Transform";
    _Dirty[_Dirty["LocalTransform"] = 1 << 1] = "LocalTransform";
    _Dirty[_Dirty["LocalProjection"] = 1 << 2] = "LocalProjection";
    _Dirty[_Dirty["Clip"] = 1 << 3] = "Clip";
    _Dirty[_Dirty["LocalClip"] = 1 << 4] = "LocalClip";
    _Dirty[_Dirty["LayoutClip"] = 1 << 5] = "LayoutClip";
    _Dirty[_Dirty["RenderVisibility"] = 1 << 6] = "RenderVisibility";
    _Dirty[_Dirty["HitTestVisibility"] = 1 << 7] = "HitTestVisibility";
    _Dirty[_Dirty["Measure"] = 1 << 8] = "Measure";
    _Dirty[_Dirty["Arrange"] = 1 << 9] = "Arrange";
    _Dirty[_Dirty["ChildrenZIndices"] = 1 << 10] = "ChildrenZIndices";
    _Dirty[_Dirty["Bounds"] = 1 << 20] = "Bounds";
    _Dirty[_Dirty["NewBounds"] = 1 << 21] = "NewBounds";
    _Dirty[_Dirty["Invalidate"] = 1 << 22] = "Invalidate";
    _Dirty[_Dirty["InUpDirtyList"] = 1 << 30] = "InUpDirtyList";
    _Dirty[_Dirty["InDownDirtyList"] = 1 << 31] = "InDownDirtyList";
    _Dirty[_Dirty["DownDirtyState"] = _Dirty.Transform | _Dirty.LocalTransform | _Dirty.LocalProjection | _Dirty.Clip | _Dirty.LocalClip | _Dirty.LayoutClip | _Dirty.RenderVisibility | _Dirty.HitTestVisibility | _Dirty.ChildrenZIndices] = "DownDirtyState";
    _Dirty[_Dirty["UpDirtyState"] = _Dirty.Bounds | _Dirty.Invalidate] = "UpDirtyState";
})(_Dirty || (_Dirty = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (BrushMappingMode) {
            BrushMappingMode[BrushMappingMode["Absolute"] = 0] = "Absolute";
            BrushMappingMode[BrushMappingMode["RelativeToBoundingBox"] = 1] = "RelativeToBoundingBox";
        })(Media.BrushMappingMode || (Media.BrushMappingMode = {}));
        var BrushMappingMode = Media.BrushMappingMode;
        (function (GradientSpreadMethod) {
            GradientSpreadMethod[GradientSpreadMethod["Pad"] = 0] = "Pad";
            GradientSpreadMethod[GradientSpreadMethod["Reflect"] = 1] = "Reflect";
            GradientSpreadMethod[GradientSpreadMethod["Repeat"] = 2] = "Repeat";
        })(Media.GradientSpreadMethod || (Media.GradientSpreadMethod = {}));
        var GradientSpreadMethod = Media.GradientSpreadMethod;
        (function (Stretch) {
            Stretch[Stretch["None"] = 0] = "None";
            Stretch[Stretch["Fill"] = 1] = "Fill";
            Stretch[Stretch["Uniform"] = 2] = "Uniform";
            Stretch[Stretch["UniformToFill"] = 3] = "UniformToFill";
        })(Media.Stretch || (Media.Stretch = {}));
        var Stretch = Media.Stretch;
        (function (AlignmentX) {
            AlignmentX[AlignmentX["Left"] = 0] = "Left";
            AlignmentX[AlignmentX["Center"] = 1] = "Center";
            AlignmentX[AlignmentX["Right"] = 2] = "Right";
        })(Media.AlignmentX || (Media.AlignmentX = {}));
        var AlignmentX = Media.AlignmentX;
        (function (AlignmentY) {
            AlignmentY[AlignmentY["Top"] = 0] = "Top";
            AlignmentY[AlignmentY["Center"] = 1] = "Center";
            AlignmentY[AlignmentY["Bottom"] = 2] = "Bottom";
        })(Media.AlignmentY || (Media.AlignmentY = {}));
        var AlignmentY = Media.AlignmentY;
        (function (TextHintingMode) {
            TextHintingMode[TextHintingMode["Fixed"] = 0] = "Fixed";
            TextHintingMode[TextHintingMode["Animated"] = 1] = "Animated";
        })(Media.TextHintingMode || (Media.TextHintingMode = {}));
        var TextHintingMode = Media.TextHintingMode;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var GradientMetrics = (function () {
            function GradientMetrics() {
            }
            GradientMetrics.Calculate = function (dir, first, last, bounds) {
                if (dir.y === 0) {
                    if (dir.x < 0)
                        GradientMetrics.W(dir, first, last, bounds);
else
                        GradientMetrics.E(dir, first, last, bounds);
                } else if (dir.x === 0) {
                    if (dir.y < 0)
                        GradientMetrics.N(dir, first, last, bounds);
else
                        GradientMetrics.S(dir, first, last, bounds);
                } else if (dir.x < 0 && dir.y < 0) {
                    GradientMetrics.NW(dir, first, last, bounds);
                } else if (dir.x < 0 && dir.y > 0) {
                    GradientMetrics.SW(dir, first, last, bounds);
                } else if (dir.x > 0 && dir.y < 0) {
                    GradientMetrics.NE(dir, first, last, bounds);
                } else if (dir.x > 0 && dir.y > 0) {
                    GradientMetrics.SE(dir, first, last, bounds);
                }
            };
            GradientMetrics.E = function (dir, first, last, bounds) {
                var maxX = bounds.X + bounds.Width;
                while (first.x >= bounds.X)
                    first.x -= dir.x;
                while (last.x <= maxX)
                    last.x += dir.x;
            };
            GradientMetrics.W = function (dir, first, last, bounds) {
                var maxX = bounds.X + bounds.Width;
                while (first.x <= maxX)
                    first.x -= dir.x;
                while (last.x >= bounds.X)
                    last.x += dir.x;
            };
            GradientMetrics.S = function (dir, first, last, bounds) {
                var maxY = bounds.Y + bounds.Height;
                while (first.y >= bounds.Y)
                    first.y -= dir.y;
                while (last.y <= maxY)
                    last.y += dir.y;
            };
            GradientMetrics.N = function (dir, first, last, bounds) {
                var maxY = bounds.Y + bounds.Height;
                while (first.y <= maxY)
                    first.y -= dir.y;
                while (last.y >= bounds.Y)
                    last.y += dir.y;
            };
            GradientMetrics.NW = function (dir, first, last, bounds) {
                var maxX = bounds.X + bounds.Width;
                var maxY = bounds.Y + bounds.Height;
                while (first.x <= maxX && first.y <= maxY) {
                    first.x -= dir.x;
                    first.y -= dir.y;
                }
                while (last.x >= bounds.X && last.y >= bounds.Y) {
                    last.x += dir.x;
                    last.y += dir.y;
                }
            };
            GradientMetrics.SW = function (dir, first, last, bounds) {
                var maxX = bounds.X + bounds.Width;
                var maxY = bounds.Y + bounds.Height;
                while (first.x <= maxX && first.y >= bounds.Y) {
                    first.x -= dir.x;
                    first.y -= dir.y;
                }
                while (last.x >= bounds.X && last.y <= maxY) {
                    last.x += dir.x;
                    last.y += dir.y;
                }
            };
            GradientMetrics.NE = function (dir, first, last, bounds) {
                var maxX = bounds.X + bounds.Width;
                var maxY = bounds.Y + bounds.Height;
                while (first.x >= bounds.X && first.y <= maxY) {
                    first.x -= dir.x;
                    first.y -= dir.y;
                }
                while (last.x <= maxX && last.y >= bounds.Y) {
                    last.x += dir.x;
                    last.y += dir.y;
                }
            };
            GradientMetrics.SE = function (dir, first, last, bounds) {
                var maxX = bounds.X + bounds.Width;
                var maxY = bounds.Y + bounds.Height;
                while (first.x >= bounds.X && first.y >= bounds.Y) {
                    first.x -= dir.x;
                    first.y -= dir.y;
                }
                while (last.x <= maxX && last.y <= maxY) {
                    last.x += dir.x;
                    last.y += dir.y;
                }
            };
            return GradientMetrics;
        })();
        Media.GradientMetrics = GradientMetrics;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var AnimationStore = (function () {
                function AnimationStore() {
                }
                AnimationStore.Create = function (target, propd) {
                    var baseValue = target.GetValue(propd);
                    if (baseValue === undefined) {
                        var targetType = propd.GetTargetType();
                        if (targetType === Number)
                            baseValue = 0;
else if (targetType === String)
                            baseValue = "";
else
                            baseValue = new (targetType)();
                    }
                    return {
                        Animation: undefined,
                        PropStorage: Fayde.Providers.GetStorage(target, propd),
                        IsDisabled: false,
                        BaseValue: baseValue,
                        CurrentValue: undefined,
                        StopValue: undefined
                    };
                };
                AnimationStore.Attach = function (animStorage) {
                    var storage = animStorage.PropStorage;
                    var list = storage.Animations;
                    if (!list)
                        storage.Animations = list = [];
                    var prevStorage = list[list.length - 1];
                    list.push(animStorage);
                    if (prevStorage) {
                        animStorage.StopValue = prevStorage.StopValue;
                        prevStorage.IsDisabled = true;
                    } else {
                        animStorage.StopValue = storage.Local;
                    }
                };
                AnimationStore.Detach = function (animStorage) {
                    var storage = animStorage.PropStorage;
                    var list = storage.Animations;
                    if (!list)
                        return false;
                    var len = list.length;
                    if (len < 1)
                        return false;
                    var i = list.lastIndexOf(animStorage);
                    if (i === (len - 1)) {
                        list.pop();
                        if (len > 1) {
                            var last = list[len - 2];
                            if (last.IsDisabled) {
                                last.IsDisabled = false;
                                AnimationStore.ApplyCurrent(last);
                                return true;
                            }
                        }
                    } else {
                        list.splice(i, 1);
                        list[i].StopValue = animStorage.StopValue;
                    }
                    return false;
                };
                AnimationStore.ApplyCurrent = function (animStorage) {
                    var cv = animStorage.CurrentValue;
                    if (cv === undefined)
                        return;
                    var storage = animStorage.PropStorage;
                    if (Animation.Debug && window.console) {
                        console.log("ANIMATION:ApplyCurrent:" + storage.OwnerNode.Name + "->" + storage.Property.Name + "=" + cv);
                    }
                    storage.Property.Store.SetLocalValue(storage, animStorage.CurrentValue);
                };
                AnimationStore.ApplyStop = function (animStorage) {
                    var storage = animStorage.PropStorage;
                    var sv = animStorage.StopValue;
                    if (Animation.Debug && window.console) {
                        console.log("ANIMATION:ApplyStop:" + storage.OwnerNode.Name + "->" + storage.Property.Name + "=" + (sv != null ? sv.toString() : ""));
                    }
                    storage.Property.Store.SetLocalValue(storage, animStorage.StopValue);
                };
                return AnimationStore;
            })();
            Animation.AnimationStore = AnimationStore;
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var Curves = (function () {
                function Curves() {
                }
                Curves.QuadraticArrayYForX = function (arr, x, count) {
                    for (var i = 0; i < count; i++) {
                        if (x < arr[i].c2.x)
                            return Curves.QuadraticYForX(x, arr[i]);
                    }
                    return 0.0;
                };
                Curves.QuadraticYForX = function (x, src) {
                    var l = src.c2.x - src.c0.x;
                    if (l <= 0)
                        return 0.0;
                    x = (x - src.c0.x) / l;
                    return ((1 - x) * (1 - x)) * src.c0.y + ((2 * x) * (1 - x) * src.c1.y) + ((x * x) * src.c2.y);
                };
                Curves.SubdivideCubicAtLevel = function (b, lvl, src) {
                    Curves.RecursiveSubdivide(b, lvl, 1, 0, src);
                };
                Curves.RecursiveSubdivide = function (b, lvl, currentlvl, pos, src) {
                    var data = { b1: null, b2: null };
                    Curves.SubdivideCubic(data, src);
                    var b1 = data.b1;
                    var b2 = data.b2;
                    if (currentlvl === lvl) {
                        b[pos] = b1;
                        b[pos + 1] = b2;
                        return pos + 2;
                    }
                    pos = Curves.RecursiveSubdivide(b, lvl, currentlvl + 1, pos, b1);
                    pos = Curves.RecursiveSubdivide(b, lvl, currentlvl + 1, pos, b2);
                    return pos;
                };
                Curves.SubdivideCubic = function (data, src) {
                    var p01 = { x: 0, y: 0 }, p012 = { x: 0, y: 0 }, p0123 = { x: 0, y: 0 };
                    var p12 = { x: 0, y: 0 }, p123 = { x: 0, y: 0 };
                    var p23 = { x: 0, y: 0 };
                    Curves.HalfLerpPoint(p01, src.c0, src.c1);
                    Curves.HalfLerpPoint(p12, src.c1, src.c2);
                    Curves.HalfLerpPoint(p23, src.c2, src.c3);
                    Curves.HalfLerpPoint(p012, p01, p12);
                    Curves.HalfLerpPoint(p123, p12, p23);
                    Curves.HalfLerpPoint(p0123, p012, p123);
                    data.b1 = {
                        c0: src.c0,
                        c1: p01,
                        c2: p012,
                        c3: p0123
                    };
                    data.b2 = {
                        c0: p0123,
                        c1: p123,
                        c2: p23,
                        c3: src.c3
                    };
                };
                Curves.HalfLerpPoint = function (p, p1, p2) {
                    p.x = p1.x + (p2.x - p1.x) * 0.5;
                    p.y = p1.y + (p2.y - p1.y) * 0.5;
                };
                Curves.ConvertCubicsToQuadratics = function (srcArray, count) {
                    var destArray = [];
                    for (var i = 0; i < count; i++) {
                        destArray.push(Curves.QuadraticFromCubic(srcArray[i]));
                    }
                    return destArray;
                };
                Curves.QuadraticFromCubic = function (src) {
                    return {
                        c0: {
                            x: src.c0.x,
                            y: src.c0.y
                        },
                        c1: {
                            x: (src.c1.x + src.c2.x) / 2.0,
                            y: (src.c1.y + src.c2.y) / 2.0
                        },
                        c2: {
                            x: src.c3.x,
                            y: src.c3.y
                        }
                    };
                };
                return Curves;
            })();
            Animation.Curves = Curves;
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            (function (EasingMode) {
                EasingMode[EasingMode["EaseOut"] = 0] = "EaseOut";
                EasingMode[EasingMode["EaseIn"] = 1] = "EaseIn";
                EasingMode[EasingMode["EaseInOut"] = 2] = "EaseInOut";
            })(Animation.EasingMode || (Animation.EasingMode = {}));
            var EasingMode = Animation.EasingMode;
            (function (FillBehavior) {
                FillBehavior[FillBehavior["HoldEnd"] = 0] = "HoldEnd";
                FillBehavior[FillBehavior["Stop"] = 1] = "Stop";
            })(Animation.FillBehavior || (Animation.FillBehavior = {}));
            var FillBehavior = Animation.FillBehavior;
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var vec2;
(function (vec2) {
    var arrayType = (typeof Float32Array !== "undefined") ? Float32Array : Array;
    function createFrom(x, y) {
        var dest = new arrayType(2);
        dest[0] = x;
        dest[1] = y;
        return dest;
    }
    vec2.createFrom = createFrom;
})(vec2 || (vec2 = {}));
var vec4;
(function (vec4) {
    var arrayType = (typeof Float32Array !== "undefined") ? Float32Array : Array;
    function create(vec) {
        var dest = new arrayType(4);
        if (vec) {
            dest[0] = vec[0];
            dest[1] = vec[1];
            dest[2] = vec[2];
            dest[3] = vec[3];
        } else {
            dest[0] = 0;
            dest[1] = 0;
            dest[2] = 0;
            dest[3] = 0;
        }
        return dest;
    }
    vec4.create = create;
    function createFrom(x, y, z, w) {
        var dest = new arrayType(4);
        dest[0] = x;
        dest[1] = y;
        dest[2] = z;
        dest[3] = w;
        return dest;
    }
    vec4.createFrom = createFrom;
})(vec4 || (vec4 = {}));
var mat3;
(function (mat3) {
    var arrayType = (typeof Float32Array !== "undefined") ? Float32Array : Array;
    function create(mat) {
        var dest = new arrayType(9);
        if (mat) {
            dest[0] = mat[0];
            dest[1] = mat[1];
            dest[2] = mat[2];
            dest[3] = mat[3];
            dest[4] = mat[4];
            dest[5] = mat[5];
            dest[6] = mat[6];
            dest[7] = mat[7];
            dest[8] = mat[8];
        } else {
            dest[0] = dest[1] = dest[2] = dest[3] = dest[4] = dest[5] = dest[6] = dest[7] = dest[8] = 0;
        }
        return dest;
    }
    mat3.create = create;
    function inverse(mat, dest) {
        var a00 = mat[0], a01 = mat[1], a02 = mat[2], a10 = mat[3], a11 = mat[4], a12 = mat[5], a20 = mat[6], a21 = mat[7], a22 = mat[8], b01 = a22 * a11 - a12 * a21, b11 = -a22 * a10 + a12 * a20, b21 = a21 * a10 - a11 * a20, d = a00 * b01 + a01 * b11 + a02 * b21, id;
        if (!d) {
            return null;
        }
        id = 1 / d;
        if (!dest) {
            dest = create();
        }
        dest[0] = b01 * id;
        dest[1] = (-a22 * a01 + a02 * a21) * id;
        dest[2] = (a12 * a01 - a02 * a11) * id;
        dest[3] = b11 * id;
        dest[4] = (a22 * a00 - a02 * a20) * id;
        dest[5] = (-a12 * a00 + a02 * a10) * id;
        dest[6] = b21 * id;
        dest[7] = (-a21 * a00 + a01 * a20) * id;
        dest[8] = (a11 * a00 - a01 * a10) * id;
        return dest;
    }
    mat3.inverse = inverse;
    function multiply(mat, mat2, dest) {
        if (!dest) {
            dest = mat;
        }
        var a00 = mat[0], a01 = mat[1], a02 = mat[2], a10 = mat[3], a11 = mat[4], a12 = mat[5], a20 = mat[6], a21 = mat[7], a22 = mat[8], b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b10 = mat2[3], b11 = mat2[4], b12 = mat2[5], b20 = mat2[6], b21 = mat2[7], b22 = mat2[8];
        dest[0] = b00 * a00 + b01 * a10 + b02 * a20;
        dest[1] = b00 * a01 + b01 * a11 + b02 * a21;
        dest[2] = b00 * a02 + b01 * a12 + b02 * a22;
        dest[3] = b10 * a00 + b11 * a10 + b12 * a20;
        dest[4] = b10 * a01 + b11 * a11 + b12 * a21;
        dest[5] = b10 * a02 + b11 * a12 + b12 * a22;
        dest[6] = b20 * a00 + b21 * a10 + b22 * a20;
        dest[7] = b20 * a01 + b21 * a11 + b22 * a21;
        dest[8] = b20 * a02 + b21 * a12 + b22 * a22;
        return dest;
    }
    mat3.multiply = multiply;
    function set(mat, dest) {
        dest[0] = mat[0];
        dest[1] = mat[1];
        dest[2] = mat[2];
        dest[3] = mat[3];
        dest[4] = mat[4];
        dest[5] = mat[5];
        dest[6] = mat[6];
        dest[7] = mat[7];
        dest[8] = mat[8];
        return dest;
    }
    mat3.set = set;
    function identity(dest) {
        if (!dest) {
            dest = mat3.create();
        }
        dest[0] = 1;
        dest[1] = 0;
        dest[2] = 0;
        dest[3] = 0;
        dest[4] = 1;
        dest[5] = 0;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 1;
        return dest;
    }
    mat3.identity = identity;
    function str(mat) {
        return "[" + mat[0] + ", " + mat[1] + ", " + mat[2] + ", " + mat[3] + ", " + mat[4] + ", " + mat[5] + ", " + mat[6] + ", " + mat[7] + ", " + mat[8] + "]";
    }
    mat3.str = str;
    function clone(mat) {
        if (typeof Float32Array !== "undefined")
            return new Float32Array(mat);
        return mat.slice(0);
    }
    mat3.clone = clone;
    function toAffineMat4(mat, dest) {
        if (!dest) {
            dest = mat4.create();
        }
        dest[0] = mat[0];
        dest[1] = mat[1];
        dest[2] = 0;
        dest[3] = mat[2];
        dest[4] = mat[3];
        dest[5] = mat[4];
        dest[6] = 0;
        dest[7] = mat[5];
        dest[8] = 0;
        dest[9] = 0;
        dest[10] = 1;
        dest[11] = 0;
        dest[12] = 0;
        dest[13] = 0;
        dest[14] = 0;
        dest[15] = 1;
        return dest;
    }
    mat3.toAffineMat4 = toAffineMat4;
    function transformVec2(mat, vec, dest) {
        if (!dest)
            dest = vec;
        var x = vec[0], y = vec[1];
        dest[0] = x * mat[0] + y * mat[3] + mat[2];
        dest[1] = x * mat[1] + y * mat[4] + mat[5];
        return dest;
    }
    mat3.transformVec2 = transformVec2;
    function translate(mat, x, y) {
        mat[2] += x;
        mat[5] += y;
        return mat;
    }
    mat3.translate = translate;
    function createTranslate(x, y, dest) {
        if (!dest) {
            dest = mat3.create();
        }
        dest[0] = 1;
        dest[1] = 0;
        dest[2] = x;
        dest[3] = 0;
        dest[4] = 1;
        dest[5] = y;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 1;
        return dest;
    }
    mat3.createTranslate = createTranslate;
    function scale(mat, x, y) {
        mat[0] *= x;
        mat[1] *= x;
        mat[2] *= x;
        mat[3] *= y;
        mat[4] *= y;
        mat[5] *= y;
        return mat;
    }
    mat3.scale = scale;
    function createScale(x, y, dest) {
        if (!dest) {
            dest = mat3.create();
        }
        dest[0] = x;
        dest[1] = 0;
        dest[2] = 0;
        dest[3] = 0;
        dest[4] = y;
        dest[5] = 0;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 1;
        return dest;
    }
    mat3.createScale = createScale;
    function createRotate(angleRad, dest) {
        if (!dest) {
            dest = mat3.create();
        }
        var c = Math.cos(angleRad);
        var s = Math.sin(angleRad);
        dest[0] = c;
        dest[1] = -s;
        dest[2] = 0;
        dest[3] = s;
        dest[4] = c;
        dest[5] = 0;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 1;
        return dest;
    }
    mat3.createRotate = createRotate;
    function createSkew(angleRadX, angleRadY, dest) {
        if (!dest) {
            dest = mat3.create();
        }
        dest[0] = 1;
        dest[1] = Math.tan(angleRadY);
        dest[2] = 0;
        dest[3] = Math.tan(angleRadX);
        dest[4] = 1;
        dest[5] = 0;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 1;
        return dest;
    }
    mat3.createSkew = createSkew;
})(mat3 || (mat3 = {}));
var mat4;
(function (mat4) {
    var arrayType = (typeof Float32Array !== "undefined") ? Float32Array : Array;
    var FLOAT_EPSILON = 0.000001;
    function create(mat) {
        var dest = new arrayType(16);
        if (mat) {
            dest[0] = mat[0];
            dest[1] = mat[1];
            dest[2] = mat[2];
            dest[3] = mat[3];
            dest[4] = mat[4];
            dest[5] = mat[5];
            dest[6] = mat[6];
            dest[7] = mat[7];
            dest[8] = mat[8];
            dest[9] = mat[9];
            dest[10] = mat[10];
            dest[11] = mat[11];
            dest[12] = mat[12];
            dest[13] = mat[13];
            dest[14] = mat[14];
            dest[15] = mat[15];
        }
        return dest;
    }
    mat4.create = create;
    function set(mat, dest) {
        dest[0] = mat[0];
        dest[1] = mat[1];
        dest[2] = mat[2];
        dest[3] = mat[3];
        dest[4] = mat[4];
        dest[5] = mat[5];
        dest[6] = mat[6];
        dest[7] = mat[7];
        dest[8] = mat[8];
        dest[9] = mat[9];
        dest[10] = mat[10];
        dest[11] = mat[11];
        dest[12] = mat[12];
        dest[13] = mat[13];
        dest[14] = mat[14];
        dest[15] = mat[15];
        return dest;
    }
    mat4.set = set;
    function equal(a, b) {
        return a === b || (Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON && Math.abs(a[4] - b[4]) < FLOAT_EPSILON && Math.abs(a[5] - b[5]) < FLOAT_EPSILON && Math.abs(a[6] - b[6]) < FLOAT_EPSILON && Math.abs(a[7] - b[7]) < FLOAT_EPSILON && Math.abs(a[8] - b[8]) < FLOAT_EPSILON && Math.abs(a[9] - b[9]) < FLOAT_EPSILON && Math.abs(a[10] - b[10]) < FLOAT_EPSILON && Math.abs(a[11] - b[11]) < FLOAT_EPSILON && Math.abs(a[12] - b[12]) < FLOAT_EPSILON && Math.abs(a[13] - b[13]) < FLOAT_EPSILON && Math.abs(a[14] - b[14]) < FLOAT_EPSILON && Math.abs(a[15] - b[15]) < FLOAT_EPSILON);
    }
    mat4.equal = equal;
    function identity(dest) {
        if (!dest) {
            dest = mat4.create();
        }
        dest[0] = 1;
        dest[1] = 0;
        dest[2] = 0;
        dest[3] = 0;
        dest[4] = 0;
        dest[5] = 1;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 0;
        dest[9] = 0;
        dest[10] = 1;
        dest[11] = 0;
        dest[12] = 0;
        dest[13] = 0;
        dest[14] = 0;
        dest[15] = 1;
        return dest;
    }
    mat4.identity = identity;
    function inverse(mat, dest) {
        if (!dest) {
            dest = mat;
        }
        var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3], a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7], a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11], a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06), invDet;
        if (!d) {
            return null;
        }
        invDet = 1 / d;
        dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
        dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
        dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
        dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
        dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
        dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
        dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
        dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
        dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
        dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
        dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
        dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
        dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
        dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
        dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
        dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
        return dest;
    }
    mat4.inverse = inverse;
    function multiply(mat, mat2, dest) {
        if (!dest) {
            dest = mat;
        }
        var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];
        var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];
        var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];
        var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
        var b0 = mat2[0], b1 = mat2[1], b2 = mat2[2], b3 = mat2[3];
        dest[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        dest[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        dest[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        dest[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = mat2[4];
        b1 = mat2[5];
        b2 = mat2[6];
        b3 = mat2[7];
        dest[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        dest[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        dest[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        dest[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = mat2[8];
        b1 = mat2[9];
        b2 = mat2[10];
        b3 = mat2[11];
        dest[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        dest[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        dest[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        dest[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = mat2[12];
        b1 = mat2[13];
        b2 = mat2[14];
        b3 = mat2[15];
        dest[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        dest[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        dest[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        dest[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        return dest;
    }
    mat4.multiply = multiply;
    function transformVec4(mat, vec, dest) {
        if (!dest) {
            dest = vec;
        }
        var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
        dest[0] = mat[0] * x + mat[1] * y + mat[2] * z + mat[3] * w;
        dest[1] = mat[4] * x + mat[5] * y + mat[6] * z + mat[7] * w;
        dest[2] = mat[8] * x + mat[9] * y + mat[10] * z + mat[11] * w;
        dest[3] = mat[12] * x + mat[13] * y + mat[14] * z + mat[15] * w;
        return dest;
    }
    mat4.transformVec4 = transformVec4;
    function toAffineMat3(mat, dest) {
        if (!dest) {
            dest = mat3.create();
        }
        dest[0] = mat[0];
        dest[1] = mat[1];
        dest[2] = mat[3];
        dest[3] = mat[4];
        dest[4] = mat[5];
        dest[5] = mat[7];
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 1;
        return dest;
    }
    mat4.toAffineMat3 = toAffineMat3;
    function clone(mat) {
        if (typeof Float32Array !== "undefined")
            return new Float32Array(mat);
        return mat.slice(0);
    }
    mat4.clone = clone;
    function str(mat) {
        return "[" + mat[0] + ", " + mat[1] + ", " + mat[2] + ", " + mat[3] + ", " + mat[4] + ", " + mat[5] + ", " + mat[6] + ", " + mat[7] + ", " + mat[8] + ", " + mat[9] + ", " + mat[10] + ", " + mat[11] + ", " + mat[12] + ", " + mat[13] + ", " + mat[14] + ", " + mat[15] + "]";
    }
    mat4.str = str;
    function createTranslate(x, y, z, dest) {
        if (!dest) {
            dest = mat4.create();
        }
        dest[0] = 1;
        dest[1] = 0;
        dest[2] = 0;
        dest[3] = 0;
        dest[4] = 0;
        dest[5] = 1;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 0;
        dest[9] = 0;
        dest[10] = 1;
        dest[11] = 0;
        dest[12] = x;
        dest[13] = y;
        dest[14] = z;
        dest[15] = 1;
        return dest;
    }
    mat4.createTranslate = createTranslate;
    function createScale(x, y, z, dest) {
        if (!dest) {
            dest = mat4.create();
        }
        dest[0] = x;
        dest[1] = 0;
        dest[2] = 0;
        dest[3] = 0;
        dest[4] = 0;
        dest[5] = y;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 0;
        dest[9] = 0;
        dest[10] = z;
        dest[11] = 0;
        dest[12] = 0;
        dest[13] = 0;
        dest[14] = 0;
        dest[15] = 1;
        return dest;
    }
    mat4.createScale = createScale;
    function createPerspective(fieldOfViewY, aspectRatio, zNearPlane, zFarPlane, dest) {
        if (!dest) {
            dest = mat4.create();
        }
        var height = 1.0 / Math.tan(fieldOfViewY / 2.0);
        var width = height / aspectRatio;
        var d = zNearPlane - zFarPlane;
        dest[0] = width;
        dest[1] = 0;
        dest[2] = 0;
        dest[3] = 0;
        dest[4] = 0;
        dest[5] = height;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 0;
        dest[9] = 0;
        dest[10] = zFarPlane / d;
        dest[11] = -1.0;
        dest[12] = 0;
        dest[13] = 0;
        dest[14] = zNearPlane * zFarPlane / d;
        dest[15] = 0.0;
        return dest;
    }
    mat4.createPerspective = createPerspective;
    function createViewport(width, height, dest) {
        if (!dest) {
            dest = mat4.create();
        }
        dest[0] = width / 2.0;
        dest[1] = 0;
        dest[2] = 0;
        dest[3] = 0;
        dest[4] = 0;
        dest[5] = -height / 2.0;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 0;
        dest[9] = 0;
        dest[10] = 1;
        dest[11] = 0;
        dest[12] = width / 2.0;
        dest[13] = height / 2.0;
        dest[14] = 0;
        dest[15] = 1;
        return dest;
    }
    mat4.createViewport = createViewport;
    function createRotateX(theta, dest) {
        if (!dest) {
            dest = mat4.create();
        }
        var s = Math.sin(theta);
        var c = Math.cos(theta);
        dest[0] = 1;
        dest[1] = 0;
        dest[2] = 0;
        dest[3] = 0;
        dest[4] = 0;
        dest[5] = c;
        dest[6] = s;
        dest[7] = 0;
        dest[8] = 0;
        dest[9] = -s;
        dest[10] = c;
        dest[11] = 0;
        dest[12] = 0;
        dest[13] = 0;
        dest[14] = 0;
        dest[15] = 1;
        return dest;
    }
    mat4.createRotateX = createRotateX;
    function createRotateY(theta, dest) {
        if (!dest) {
            dest = mat4.create();
        }
        var s = Math.sin(theta);
        var c = Math.cos(theta);
        dest[0] = c;
        dest[1] = 0;
        dest[2] = -s;
        dest[3] = 0;
        dest[4] = 0;
        dest[5] = 1;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = s;
        dest[9] = 0;
        dest[10] = c;
        dest[11] = 0;
        dest[12] = 0;
        dest[13] = 0;
        dest[14] = 0;
        dest[15] = 1;
        return dest;
    }
    mat4.createRotateY = createRotateY;
    function createRotateZ(theta, dest) {
        if (!dest) {
            dest = mat4.create();
        }
        var s = Math.sin(theta);
        var c = Math.cos(theta);
        dest[0] = c;
        dest[1] = s;
        dest[2] = 0;
        dest[3] = 0;
        dest[4] = -s;
        dest[5] = c;
        dest[6] = 0;
        dest[7] = 0;
        dest[8] = 0;
        dest[9] = 0;
        dest[10] = 1;
        dest[11] = 0;
        dest[12] = 0;
        dest[13] = 0;
        dest[14] = 0;
        dest[15] = 1;
        return dest;
    }
    mat4.createRotateZ = createRotateZ;
    function translate(mat, x, y, z) {
        mat[12] += x;
        mat[13] += y;
        mat[14] += z;
        return mat;
    }
    mat4.translate = translate;
    function scale(mat, x, y, z) {
        mat[0] *= x;
        mat[4] *= x;
        mat[8] *= x;
        mat[12] *= x;
        mat[1] *= y;
        mat[5] *= y;
        mat[9] *= y;
        mat[13] *= y;
        mat[2] *= z;
        mat[6] *= z;
        mat[10] *= z;
        mat[14] *= z;
        return mat;
    }
    mat4.scale = scale;
})(mat4 || (mat4 = {}));

var Fayde;
(function (Fayde) {
    var AjaxRequest = (function () {
        function AjaxRequest(OnSuccess, OnError) {
            this.OnSuccess = OnSuccess;
            this.OnError = OnError;
            this.xmlhttp = null;
        }
        AjaxRequest.prototype.Get = function (url, query) {
            this._PrepareRequest();
            var fullUrl = url;
            if (query)
                fullUrl += "?" + query;
            this.xmlhttp.open("GET", fullUrl, true);
            this.xmlhttp.send();
        };
        AjaxRequest.prototype.Post = function (url, query, data) {
            this._PrepareRequest();
            var fullUrl = url;
            if (query)
                fullUrl += "?" + query;
            this.xmlhttp.open("POST", fullUrl, true);
            this.xmlhttp.send(data);
        };
        AjaxRequest.prototype.Cancel = function () {
            this.xmlhttp.abort();
        };
        AjaxRequest.prototype._PrepareRequest = function () {
            var _this = this;
            var xmlhttp = new XMLHttpRequest();
            xmlhttp.onreadystatechange = function () {
                return _this._HandleStateChange();
            };
            this.xmlhttp = xmlhttp;
        };
        AjaxRequest.prototype._HandleStateChange = function () {
            if (this.xmlhttp.readyState === 4) {
                var req = this.xmlhttp;
                this.xmlhttp = undefined;
                if (req.status === 200) {
                    this.OnSuccess(new AjaxResult(req));
                } else {
                    this.OnError("Unsuccessful request: " + req.status);
                }
            }
        };
        return AjaxRequest;
    })();
    Fayde.AjaxRequest = AjaxRequest;

    var AjaxResult = (function () {
        function AjaxResult(xmlhttp) {
            this.xmlhttp = xmlhttp;
        }
        AjaxResult.prototype.GetData = function () {
            var data = this.xmlhttp.responseText;
            if (!data)
                return null;
            return data;
        };
        AjaxResult.prototype.CreateJson = function () {
            var data = this.xmlhttp.responseText;
            if (!data)
                return null;
            if ((window).JSON && JSON.parse) {
                try  {
                    return JSON.parse(data);
                } catch (err) {
                }
            }
            try  {
                return new Function("return " + data)();
            } catch (err) {
                throw new InvalidJsonException(data, err);
            }
        };
        AjaxResult.prototype.GetHeader = function (name) {
            return this.xmlhttp.getResponseHeader(name);
        };
        return AjaxResult;
    })();
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Runtime) {
        function LoadBatchAsync(loaders, onLoaded) {
            var loadedcount = 0;
            var count = loaders.length;
            if (count === 0)
                return onLoaded();
            for (var i = 0; i < count; i++) {
                loaders[i].LoadAsync(function (state) {
                    loadedcount++;
                    if (loadedcount >= count)
                        onLoaded();
                });
            }
        }
        Runtime.LoadBatchAsync = LoadBatchAsync;
    })(Fayde.Runtime || (Fayde.Runtime = {}));
    var Runtime = Fayde.Runtime;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            Animation.Debug = false;
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
        (function (VSM) {
            VSM.Debug = false;
        })(Media.VSM || (Media.VSM = {}));
        var VSM = Media.VSM;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
    (function (Data) {
        Data.Debug = false;
        Data.IsCounterEnabled = false;
        Data.DataContextCounter = 0;
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var PropertyInfo = (function () {
    function PropertyInfo() {
    }
    PropertyInfo.prototype.GetValue = function (ro) {
        if (this.GetFunc)
            return this.GetFunc.call(ro);
    };
    PropertyInfo.prototype.SetValue = function (ro, value) {
        if (this.SetFunc)
            this.SetFunc.call(ro, value);
    };
    PropertyInfo.Find = function (typeOrObj, name) {
        var o = typeOrObj;
        var isType = typeOrObj instanceof Function;
        if (isType)
            o = new typeOrObj();
        var nameClosure = name;
        var propDesc = Nullstone.GetPropertyDescriptor(o, name);
        if (propDesc) {
            var pi = new PropertyInfo();
            pi.GetFunc = propDesc.get;
            if (!pi.GetFunc)
                pi.GetFunc = function () {
                    return this[nameClosure];
                };
            pi.SetFunc = propDesc.set;
            if (!pi.SetFunc && propDesc.writable)
                pi.SetFunc = function (value) {
                    this[nameClosure] = value;
                };
            return pi;
        }
        var type = isType ? typeOrObj : typeOrObj.constructor;
        var pi = new PropertyInfo();
        pi.GetFunc = type.prototype["Get" + name];
        pi.SetFunc = type.prototype["Set" + name];
        return pi;
    };
    return PropertyInfo;
})();
var IndexedPropertyInfo = (function () {
    function IndexedPropertyInfo() {
    }
    Object.defineProperty(IndexedPropertyInfo.prototype, "PropertyType", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    IndexedPropertyInfo.prototype.GetValue = function (ro, index) {
        if (this.GetFunc)
            return this.GetFunc.call(ro, index);
    };
    IndexedPropertyInfo.prototype.SetValue = function (ro, index, value) {
        if (this.SetFunc)
            this.SetFunc.call(ro, index, value);
    };
    IndexedPropertyInfo.Find = function (typeOrObj) {
        var o = typeOrObj;
        var isType = typeOrObj instanceof Function;
        if (isType)
            o = new typeOrObj();
        if (o instanceof Array) {
            var pi = new IndexedPropertyInfo();
            pi.GetFunc = function (index) {
                return this[index];
            };
            pi.SetFunc = function (index, value) {
                this[index] = value;
            };
            return pi;
        } else if (o instanceof Fayde.XamlObjectCollection) {
            var pi = new IndexedPropertyInfo();
            pi.GetFunc = function (index) {
                return this.GetValueAt(index);
            };
            pi.SetFunc = function (index, value) {
                return this.SetValueAt(index, value);
            };
            return pi;
        }
    };
    return IndexedPropertyInfo;
})();

var StringEx = (function () {
    function StringEx() {
    }
    StringEx.Format = function (format) {
        var items = [];
        for (var _i = 0; _i < (arguments.length - 1); _i++) {
            items[_i] = arguments[_i + 1];
        }
        var args = arguments;
        return format.replace(/{(\d+)}/g, function (match, num) {
            var i = parseInt(num);
            return typeof items[i] != 'undefined' ? items[i] : match;
        });
    };
    return StringEx;
})();

var TimelineProfile = (function () {
    function TimelineProfile() {
    }
    TimelineProfile.Parse = function (isStart, name) {
        if (!isStart)
            return TimelineProfile._FinishEvent("Parse", name);
        TimelineProfile._Events.push({
            Type: "Parse",
            Name: name,
            Time: new Date().valueOf()
        });
    };
    TimelineProfile.Navigate = function (isStart, name) {
        if (!isStart)
            return TimelineProfile._FinishEvent("Navigate", name);
        TimelineProfile._Events.push({
            Type: "Navigate",
            Name: name,
            Time: new Date().valueOf()
        });
    };
    TimelineProfile.LayoutPass = function (isStart) {
        if (!TimelineProfile.IsNextLayoutPassProfiled)
            return;
        if (!isStart) {
            TimelineProfile.IsNextLayoutPassProfiled = false;
            return TimelineProfile._FinishEvent("LayoutPass");
        }
        TimelineProfile._Events.push({
            Type: "LayoutPass",
            Name: "",
            Time: new Date().valueOf()
        });
    };
    TimelineProfile._FinishEvent = function (type, name) {
        var evts = TimelineProfile._Events;
        var len = evts.length;
        var evt;
        for (var i = len - 1; i >= 0; i--) {
            evt = evts[i];
            if (evt.Type === type && (!name || evt.Name === name)) {
                evts.splice(i, 1);
                break;
            }
            evt = null;
        }
        if (!evt)
            return;
        TimelineProfile.Groups.push({
            Type: evt.Type,
            Data: evt.Name,
            Start: evt.Time - TimelineProfile.TimelineStart,
            Length: new Date().valueOf() - evt.Time
        });
    };
    TimelineProfile._Events = [];
    TimelineProfile.Groups = [];
    TimelineProfile.TimelineStart = 0;
    TimelineProfile.IsNextLayoutPassProfiled = true;
    return TimelineProfile;
})();
TimelineProfile.TimelineStart = new Date().valueOf();

var Fayde;
(function (Fayde) {
    Fayde.XMLNS = "http://schemas.wsick.com/fayde";
    Fayde.XMLNSX = "http://schemas.wsick.com/fayde/x";
    var jsNamespaces = [];
    var xmlNamespaces = [];
    function RegisterType(type, reg) {
        var t = type;
        var name = reg.Name;
        if (!name)
            throw new Error("Type Name not specified.");
        var ns = reg.Namespace;
        if (!ns)
            throw new Error("Type Namespace not specified.");
        var xn = reg.XmlNamespace;
        if (!xn)
            xn = "";
        var i = reg.Interfaces;
        if (!i)
            i = [];
        var bc = Object.getPrototypeOf(type.prototype).constructor;
        Object.defineProperty(t, "_BaseClass", { value: bc, writable: false });
        Object.defineProperty(t, "_TypeName", { value: name, writable: false });
        Object.defineProperty(t, "_JsNamespace", { value: ns, writable: false });
        Object.defineProperty(t, "_XmlNamespace", { value: xn, writable: false });
        Object.defineProperty(t, "_Interfaces", { value: i, writable: false });
        var jarr = jsNamespaces[ns];
        if (!jarr)
            jarr = jsNamespaces[ns] = [];
        jarr[name] = t;
        if (xn) {
            var xarr = xmlNamespaces[xn];
            if (!xarr)
                xarr = xmlNamespaces[xn] = [];
            xarr[name] = t;
        }
    }
    Fayde.RegisterType = RegisterType;
    function RegisterEnum(e, reg) {
        var name = reg.Name;
        var ns = reg.Namespace;
        var xn = reg.XmlNamespace;
        e.IsEnum = true;
        var jarr = jsNamespaces[ns];
        if (!jarr)
            jarr = jsNamespaces[ns] = [];
        jarr[name] = e;
        if (xn) {
            var xarr = xmlNamespaces[xn];
            if (!xarr)
                xarr = xmlNamespaces[xn] = [];
            xarr[name] = e;
        }
    }
    Fayde.RegisterEnum = RegisterEnum;
    function RegisterInterface(name) {
        return { Name: name };
    }
    Fayde.RegisterInterface = RegisterInterface;
    var PRIMITIVE_MAPPINGS = [];
    PRIMITIVE_MAPPINGS["String"] = String;
    PRIMITIVE_MAPPINGS["Number"] = Number;
    PRIMITIVE_MAPPINGS["Date"] = Date;
    PRIMITIVE_MAPPINGS["RegExp"] = RegExp;
    PRIMITIVE_MAPPINGS["Array"] = Array;
    PRIMITIVE_MAPPINGS["Null"] = null;
    var ALIASES = [];
    ALIASES["Boolean"] = Boolean;
    ALIASES["Double"] = Number;
    var SIMPLES = [];
    SIMPLES["Color"] = true;
    SIMPLES["FontFamily"] = true;

    Fayde.TypeResolver = {
        GetAnnotation: function (type, name) {
            if (!type)
                return;
            var t = type;
            var anns = (t).Annotations;
            var annotation;
            if (anns && (annotation = anns[name]))
                return annotation;
            return Fayde.TypeResolver.GetAnnotation(t._BaseClass, name);
        },
        Resolve: function (xmlns, xmlname) {
            var isSystem = false;
            var isSimple = false;
            if (xmlns === Fayde.XMLNSX) {
                var mapping = PRIMITIVE_MAPPINGS[xmlname];
                if (mapping !== undefined) {
                    return {
                        Type: mapping,
                        IsPrimitive: true,
                        IsSystem: false,
                        IsSimple: false,
                        IsEnum: false
                    };
                }
                isSystem = true;
            } else if (xmlns === Fayde.XMLNS) {
                var alias = ALIASES[xmlname];
                if (alias !== undefined) {
                    return {
                        Type: alias,
                        IsPrimitive: true,
                        IsSystem: false,
                        IsSimple: false,
                        IsEnum: false
                    };
                }
                isSimple = SIMPLES[xmlname] === true;
            }
            var xarr = xmlNamespaces[xmlns];
            if (xarr) {
                var t = xarr[xmlname];
                if (t)
                    return { IsSystem: isSystem, IsPrimitive: false, IsSimple: isSimple, IsEnum: t.IsEnum === true, Type: t };
            }
            return undefined;
        },
        ResolveFullyQualifiedName: function (xmlname, resolver) {
            var ns = Fayde.XMLNS;
            var typeName = xmlname;
            var tokens = xmlname.split(":");
            if (tokens.length === 2) {
                ns = resolver.lookupNamespaceURI(tokens[0]);
                typeName = tokens[1];
            }
            return Fayde.TypeResolver.Resolve(ns, typeName);
        }
    };
    var converters = [];
    converters[String] = function (val) {
        if (val == null)
            return "";
        return val.toString();
    };
    converters[Number] = function (val) {
        if (!val)
            return 0;
        if (typeof val === "number")
            return val;
        if (val instanceof Thickness)
            return (val).Left;
        return parseFloat(val.toString());
    };
    converters[Date] = function (val) {
        if (val == null)
            return new Date(0);
        return new Date(val.toString());
    };
    converters[RegExp] = function (val) {
        if (val instanceof RegExp)
            return val;
        if (val = null)
            throw new XamlParseException("Cannot specify an empty RegExp.");
        val = val.toString();
        return new RegExp(val);
    };
    function ConvertAnyToType(val, type) {
        var converter = (converters)[type];
        if (converter)
            return converter(val);
        if (type instanceof Enum) {
            if (!val)
                return 0;
            if (typeof val === "number")
                return val;
            var enumo = (type).Object;
            return enumo[val];
        }
        return val;
    }
    Fayde.ConvertAnyToType = ConvertAnyToType;
    function RegisterTypeConverter(type, converter) {
        converters[type] = converter;
    }
    Fayde.RegisterTypeConverter = RegisterTypeConverter;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        (function (PathEntryType) {
            PathEntryType[PathEntryType["Move"] = 0] = "Move";
            PathEntryType[PathEntryType["Line"] = 1] = "Line";
            PathEntryType[PathEntryType["Rect"] = 2] = "Rect";
            PathEntryType[PathEntryType["Quadratic"] = 3] = "Quadratic";
            PathEntryType[PathEntryType["Bezier"] = 4] = "Bezier";
            PathEntryType[PathEntryType["EllipticalArc"] = 5] = "EllipticalArc";
            PathEntryType[PathEntryType["Arc"] = 6] = "Arc";
            PathEntryType[PathEntryType["ArcTo"] = 7] = "ArcTo";
            PathEntryType[PathEntryType["Close"] = 8] = "Close";
        })(Shapes.PathEntryType || (Shapes.PathEntryType = {}));
        var PathEntryType = Shapes.PathEntryType;
        (function (ShapeFlags) {
            ShapeFlags[ShapeFlags["None"] = 0] = "None";
            ShapeFlags[ShapeFlags["Empty"] = 1] = "Empty";
            ShapeFlags[ShapeFlags["Normal"] = 2] = "Normal";
            ShapeFlags[ShapeFlags["Degenerate"] = 4] = "Degenerate";
            ShapeFlags[ShapeFlags["Radii"] = 8] = "Radii";
        })(Shapes.ShapeFlags || (Shapes.ShapeFlags = {}));
        var ShapeFlags = Shapes.ShapeFlags;
        (function (PenLineCap) {
            PenLineCap[PenLineCap["Flat"] = 0] = "Flat";
            PenLineCap[PenLineCap["Square"] = 1] = "Square";
            PenLineCap[PenLineCap["Round"] = 2] = "Round";
            PenLineCap[PenLineCap["Triangle"] = 3] = "Triangle";
        })(Shapes.PenLineCap || (Shapes.PenLineCap = {}));
        var PenLineCap = Shapes.PenLineCap;
        (function (PenLineJoin) {
            PenLineJoin[PenLineJoin["Miter"] = 0] = "Miter";
            PenLineJoin[PenLineJoin["Bevel"] = 1] = "Bevel";
            PenLineJoin[PenLineJoin["Round"] = 2] = "Round";
        })(Shapes.PenLineJoin || (Shapes.PenLineJoin = {}));
        var PenLineJoin = Shapes.PenLineJoin;
        (function (FillRule) {
            FillRule[FillRule["EvenOdd"] = 0] = "EvenOdd";
            FillRule[FillRule["NonZero"] = 1] = "NonZero";
        })(Shapes.FillRule || (Shapes.FillRule = {}));
        var FillRule = Shapes.FillRule;
        (function (SweepDirection) {
            SweepDirection[SweepDirection["Counterclockwise"] = 0] = "Counterclockwise";
            SweepDirection[SweepDirection["Clockwise"] = 1] = "Clockwise";
        })(Shapes.SweepDirection || (Shapes.SweepDirection = {}));
        var SweepDirection = Shapes.SweepDirection;
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        var RawPath = (function () {
            function RawPath() {
                this._Path = [];
                this._EndX = 0.0;
                this._EndY = 0.0;
            }
            Object.defineProperty(RawPath.prototype, "EndX", {
                get: function () {
                    return this._EndX;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RawPath.prototype, "EndY", {
                get: function () {
                    return this._EndY;
                },
                enumerable: true,
                configurable: true
            });
            RawPath.prototype.Move = function (x, y) {
                this._Path.push({
                    type: Shapes.PathEntryType.Move,
                    x: x,
                    y: y
                });
                this._EndX = x;
                this._EndY = y;
            };
            RawPath.prototype.Line = function (x, y) {
                this._Path.push({
                    type: Shapes.PathEntryType.Line,
                    x: x,
                    y: y
                });
                this._EndX = x;
                this._EndY = y;
            };
            RawPath.prototype.Rect = function (x, y, width, height) {
                this._Path.push({
                    type: Shapes.PathEntryType.Rect,
                    x: x,
                    y: y,
                    width: width,
                    height: height
                });
            };
            RawPath.prototype.RoundedRectFull = function (left, top, width, height, topLeft, topRight, bottomRight, bottomLeft) {
                var right = left + width;
                var bottom = top + height;
                this.Move(left + topLeft, top);
                this.Line(right - topRight, top);
                if (topRight > 0)
                    this.Quadratic(right, top, right, top + topRight);
                this.Line(right, bottom - bottomRight);
                if (bottomRight > 0)
                    this.Quadratic(right, bottom, right - bottomRight, bottom);
                this.Line(left + bottomLeft, bottom);
                if (bottomLeft > 0)
                    this.Quadratic(left, bottom, left, bottom - bottomLeft);
                this.Line(left, top + topLeft);
                if (topLeft > 0)
                    this.Quadratic(left, top, left + topLeft, top);
                this.Close();
            };
            RawPath.prototype.RoundedRect = function (left, top, width, height, radiusX, radiusY) {
                if (radiusX === 0.0 && radiusY === 0.0) {
                    this.Rect(left, top, width, height);
                    return;
                }
                var right = left + width;
                var bottom = top + height;
                this.Move(left + radiusX, top);
                this.Line(right - radiusX, top);
                this.Quadratic(right, top, right, top + radiusY);
                this.Line(right, bottom - radiusY);
                this.Quadratic(right, bottom, right - radiusX, bottom);
                this.Line(left + radiusX, bottom);
                this.Quadratic(left, bottom, left, bottom - radiusY);
                this.Line(left, top + radiusY);
                this.Quadratic(left, top, left + radiusX, top);
                this.Close();
            };
            RawPath.prototype.Quadratic = function (cpx, cpy, x, y) {
                this._Path.push({
                    type: Shapes.PathEntryType.Quadratic,
                    cpx: cpx,
                    cpy: cpy,
                    x: x,
                    y: y
                });
                this._EndX = x;
                this._EndY = y;
            };
            RawPath.prototype.Bezier = function (cp1x, cp1y, cp2x, cp2y, x, y) {
                this._Path.push({
                    type: Shapes.PathEntryType.Bezier,
                    cp1x: cp1x,
                    cp1y: cp1y,
                    cp2x: cp2x,
                    cp2y: cp2y,
                    x: x,
                    y: y
                });
                this._EndX = x;
                this._EndY = y;
            };
            RawPath.prototype.Ellipse = function (x, y, width, height) {
                var radiusX = width / 2;
                var radiusY = height / 2;
                var right = x + width;
                var bottom = y + height;
                var centerX = x + radiusX;
                var centerY = y + radiusY;
                if (width === height) {
                    this.Arc(centerX, centerY, radiusX, 0, Math.PI * 2, false);
                } else {
                    var kappa = .5522848;
                    var ox = radiusX * kappa;
                    var oy = radiusY * kappa;
                    this.Move(x, centerY);
                    this.Bezier(x, centerY - oy, centerX - ox, y, centerX, y);
                    this.Bezier(centerX + ox, y, right, centerY - oy, right, centerY);
                    this.Bezier(right, centerY + oy, centerX + ox, bottom, centerX, bottom);
                    this.Bezier(centerX - ox, bottom, x, centerY + oy, x, centerY);
                    this.Close();
                }
            };
            RawPath.prototype.EllipticalArc = function (width, height, rotationAngle, isLargeArcFlag, sweepDirectionFlag, ex, ey) {
                this._Path.push({
                    type: Shapes.PathEntryType.EllipticalArc,
                    width: width,
                    height: height,
                    rotationAngle: rotationAngle,
                    isLargeArcFlag: isLargeArcFlag,
                    sweepDirectionFlag: sweepDirectionFlag,
                    ex: ex,
                    ey: ey
                });
            };
            RawPath.prototype.Arc = function (x, y, r, sAngle, eAngle, aClockwise) {
                this._Path.push({
                    type: Shapes.PathEntryType.Arc,
                    x: x,
                    y: y,
                    r: r,
                    sAngle: sAngle,
                    eAngle: eAngle,
                    aClockwise: aClockwise
                });
            };
            RawPath.prototype.ArcTo = function (cpx, cpy, x, y, radius) {
                this._Path.push({
                    type: Shapes.PathEntryType.ArcTo,
                    cpx: cpx,
                    cpy: cpy,
                    x: x,
                    y: y,
                    r: radius
                });
                this._EndX = x;
                this._EndY = y;
            };
            RawPath.prototype.Close = function () {
                this._Path.push({
                    type: Shapes.PathEntryType.Close
                });
            };
            RawPath.prototype.DrawRenderCtx = function (ctx) {
                this.DrawCanvasCtx(ctx.CanvasContext);
            };
            RawPath.prototype.DrawCanvasCtx = function (canvasCtx) {
                canvasCtx.beginPath();
                var backing = this._Path;
                for (var i = 0; i < backing.length; i++) {
                    var p = backing[i];
                    switch (p.type) {
                        case Shapes.PathEntryType.Move:
                            canvasCtx.moveTo(p.x, p.y);
                            break;
                        case Shapes.PathEntryType.Line:
                            canvasCtx.lineTo(p.x, p.y);
                            break;
                        case Shapes.PathEntryType.Rect:
                            canvasCtx.rect(p.x, p.y, p.width, p.height);
                            break;
                        case Shapes.PathEntryType.Quadratic:
                            canvasCtx.quadraticCurveTo(p.cpx, p.cpy, p.x, p.y);
                            break;
                        case Shapes.PathEntryType.Bezier:
                            canvasCtx.bezierCurveTo(p.cp1x, p.cp1y, p.cp2x, p.cp2y, p.x, p.y);
                            break;
                        case Shapes.PathEntryType.Arc:
                            canvasCtx.arc(p.x, p.y, p.r, p.sAngle, p.eAngle, p.aClockwise);
                            break;
                        case Shapes.PathEntryType.ArcTo:
                            canvasCtx.arcTo(p.cpx, p.cpy, p.x, p.y, p.r);
                            break;
                        case Shapes.PathEntryType.Close:
                            canvasCtx.closePath();
                            break;
                    }
                }
            };
            RawPath.prototype.CalculateBounds = function (thickness) {
                var backing = this._Path;
                var startX = null;
                var startY = null;
                var xMin = null;
                var xMax = null;
                var yMin = null;
                var yMax = null;
                var xRange = null;
                var yRange = null;
                for (var i = 0; i < backing.length; i++) {
                    var p = backing[i];
                    switch (p.type) {
                        case Shapes.PathEntryType.Move:
                            if (xMin == null && yMin == null) {
                                xMin = xMax = p.x;
                                yMin = yMax = p.y;
                            } else {
                                xMin = Math.min(p.x, xMin);
                                yMin = Math.min(p.y, yMin);
                                xMax = Math.max(p.x, xMax);
                                yMax = Math.max(p.y, yMax);
                            }
                            startX = p.x;
                            startY = p.y;
                            break;
                        case Shapes.PathEntryType.Line:
                            xMin = Math.min(p.x, xMin);
                            yMin = Math.min(p.y, yMin);
                            xMax = Math.max(p.x, xMax);
                            yMax = Math.max(p.y, yMax);
                            startX = p.x;
                            startY = p.y;
                            break;
                        case Shapes.PathEntryType.Rect:
                            xMin = Math.min(p.x, xMin);
                            yMin = Math.min(p.y, yMin);
                            xMax = Math.max(p.x + p.width, xMax);
                            yMax = Math.max(p.y + p.height, yMax);
                            break;
                        case Shapes.PathEntryType.Quadratic:
                            xRange = RawPath._CalculateQuadraticBezierRange(startX, p.cpx, p.x);
                            xMin = Math.min(xMin, xRange.min);
                            xMax = Math.max(xMax, xRange.max);
                            yRange = RawPath._CalculateQuadraticBezierRange(startY, p.cpy, p.y);
                            yMin = Math.min(yMin, yRange.min);
                            yMax = Math.max(yMax, yRange.max);
                            startX = p.x;
                            startY = p.y;
                            break;
                        case Shapes.PathEntryType.Bezier:
                            xRange = RawPath._CalculateCubicBezierRange(startX, p.cp1x, p.cp2x, p.x);
                            xMin = Math.min(xMin, xRange.min);
                            xMax = Math.max(xMax, xRange.max);
                            yRange = RawPath._CalculateCubicBezierRange(startY, p.cp1y, p.cp2y, p.y);
                            yMin = Math.min(yMin, yRange.min);
                            yMax = Math.max(yMax, yRange.max);
                            startX = p.x;
                            startY = p.y;
                            break;
                        case Shapes.PathEntryType.Arc:
                            if (p.sAngle !== p.eAngle) {
                                var r = RawPath._CalculateArcRange(p.x, p.y, p.r, p.sAngle, p.eAngle, p.aClockwise);
                                xMin = Math.min(xMin, r.xMin);
                                xMax = Math.max(xMax, r.xMax);
                                yMin = Math.min(yMin, r.yMin);
                                yMax = Math.max(yMax, r.yMax);
                            }
                            break;
                        case Shapes.PathEntryType.ArcTo:
                            var r = RawPath._CalculateArcToRange(startX, startY, p.cpx, p.cpy, p.x, p.y, p.r);
                            xMin = Math.min(xMin, r.xMin);
                            xMax = Math.max(xMax, r.xMax);
                            yMin = Math.min(yMin, r.yMin);
                            yMax = Math.max(yMax, r.yMax);
                            startX = p.x;
                            startY = p.y;
                            break;
                    }
                }
                var r2 = new rect();
                rect.set(r2, xMin, yMin, xMax - xMin, yMax - yMin);
                return r2;
            };
            RawPath._CalculateQuadraticBezierRange = function (a, b, c) {
                var min = Math.min(a, c);
                var max = Math.max(a, c);
                if (min <= b && b <= max) {
                    return {
                        min: min,
                        max: max
                    };
                }
                var t = (a - b) / (a - 2 * b + c);
                var xt = (a * Math.pow(1 - t, 2)) + (2 * b * (1 - t) * t) + (c * Math.pow(t, 2));
                if (min > b) {
                    min = Math.min(min, xt);
                } else {
                    max = Math.max(max, xt);
                }
                return {
                    min: min,
                    max: max
                };
            };
            RawPath._CalculateCubicBezierRange = function (a, b, c, d) {
                var min = Math.min(a, d);
                var max = Math.max(a, d);
                if ((min <= b && b <= max) && (min <= c && c <= max)) {
                    return {
                        min: min,
                        max: max
                    };
                }
                var u = 2 * a - 4 * b + 2 * c;
                var v = b - a;
                var w = -a + 3 * b + d - 3 * c;
                var rt = Math.sqrt(u * u - 4 * v * w);
                if (!isNaN(rt)) {
                    var t;
                    t = (-u + rt) / (2 * w);
                    if (t >= 0 && t <= 1) {
                        var ot = 1 - t;
                        var xt = (a * ot * ot * ot) + (3 * b * t * ot * ot) + (3 * c * ot * t * t) + (d * t * t * t);
                        min = Math.min(min, xt);
                        max = Math.max(max, xt);
                    }
                    t = (-u - rt) / (2 * w);
                    if (t >= 0 && t <= 1) {
                        var ot = 1 - t;
                        var xt = (a * ot * ot * ot) + (3 * b * t * ot * ot) + (3 * c * ot * t * t) + (d * t * t * t);
                        min = Math.min(min, xt);
                        max = Math.max(max, xt);
                    }
                }
                return {
                    min: min,
                    max: max
                };
            };
            RawPath._CalculateArcRange = function (cx, cy, r, sa, ea, cc) {
                var sx = cx + (r * Math.cos(sa));
                var sy = cy + (r * Math.sin(sa));
                var ex = cx + (r * Math.cos(ea));
                var ey = cy + (r * Math.sin(ea));
                return RawPath._CalculateArcPointsRange(cx, cy, sx, sy, ex, ey, r, cc);
            };
            RawPath._CalculateArcToRange = function (sx, sy, cpx, cpy, ex, ey, r) {
                NotImplemented("RawPath._CalculateArcToRange");
                return {
                    xMin: sx,
                    xMax: sx,
                    yMin: sy,
                    yMax: sy
                };
                var v1x = cpx - sx;
                var v1y = cpy - sy;
                var v2x = ex - cpx;
                var v2y = ey - cpy;
                var theta_outer1 = Math.atan2(Math.abs(v1y), Math.abs(v1x));
                var theta_outer2 = Math.atan2(Math.abs(v2y), Math.abs(v2x));
                var inner_theta = Math.PI - theta_outer1 - theta_outer2;
                var h = r / Math.sin(inner_theta / 2);
                var cx = cpx + h * Math.cos(inner_theta / 2 + theta_outer2);
                var cy = cpy + h * Math.sin(inner_theta / 2 + theta_outer2);
                var a = r / Math.tan(inner_theta / 2);
                var sx = cpx + a * Math.cos(theta_outer2 + inner_theta);
                var sy = cpy + a * Math.sin(theta_outer2 + inner_theta);
                var ex = cpx + a * Math.cos(theta_outer2);
                var ey = cpy + a * Math.sin(theta_outer2);
                var cc = true;
                var rng = RawPath._CalculateArcPointsRange(cx, cy, sx, sy, ex, ey, r, cc);
                return {
                    xMin: Math.min(sx, rng.xMin),
                    xMax: Math.max(sx, rng.xMax),
                    yMin: Math.min(sy, rng.yMin),
                    yMax: Math.max(sy, rng.yMax)
                };
            };
            RawPath._CalculateArcPointsRange = function (cx, cy, sx, sy, ex, ey, r, cc) {
                var xMin = Math.min(sx, ex);
                var xMax = Math.max(sx, ex);
                var yMin = Math.min(sy, ey);
                var yMax = Math.max(sy, ey);
                var xLeft = cx - r;
                if (RawPath._ArcContainsPoint(sx, sy, ex, ey, xLeft, cy, cc)) {
                    xMin = Math.min(xMin, xLeft);
                }
                var xRight = cx + r;
                if (RawPath._ArcContainsPoint(sx, sy, ex, ey, xRight, cy, cc)) {
                    xMax = Math.max(xMax, xRight);
                }
                var yTop = cy - r;
                if (RawPath._ArcContainsPoint(sx, sy, ex, ey, cx, yTop, cc)) {
                    yMin = Math.min(yMin, yTop);
                }
                var yBottom = cy + r;
                if (RawPath._ArcContainsPoint(sx, sy, ex, ey, cx, yBottom, cc)) {
                    yMax = Math.max(yMax, yBottom);
                }
                return {
                    xMin: xMin,
                    xMax: xMax,
                    yMin: yMin,
                    yMax: yMax
                };
            };
            RawPath._ArcContainsPoint = function (sx, sy, ex, ey, cpx, cpy, cc) {
                var n = (ex - sx) * (cpy - sy) - (cpx - sx) * (ey - sy);
                if (n === 0)
                    return true;
                if (n > 0 && cc)
                    return true;
                if (n < 0 && !cc)
                    return true;
                return false;
            };
            RawPath.Merge = function (path1, path2) {
                path1._Path.push.apply(path1._Path, path2._Path);
                path1._EndX += path2._EndX;
                path1._EndY += path2._EndY;
            };
            RawPath.prototype.Serialize = function () {
                var s = "";
                var len = this._Path.length;
                var backing = this._Path;
                for (var i = 0; i < len; i++) {
                    if (i > 0)
                        s += " ";
                    var p = backing[i];
                    switch (p.type) {
                        case Shapes.PathEntryType.Move:
                            s += "M" + p.x.toString() + "," + p.y.toString();
                            break;
                        case Shapes.PathEntryType.Line:
                            s += "L" + p.x.toString() + "," + p.y.toString();
                            break;
                        case Shapes.PathEntryType.Rect:
                            break;
                        case Shapes.PathEntryType.Quadratic:
                            s += "Q" + p.cpx.toString() + "," + p.cpy.toString() + " " + p.x.toString() + "," + p.y.toString();
                            break;
                        case Shapes.PathEntryType.Bezier:
                            s += "C" + p.cp1x.toString() + "," + p.cp1y.toString() + " " + p.cp2x.toString() + "," + p.cp2y.toString() + " " + p.x.toString() + "," + p.y.toString();
                            break;
                        case Shapes.PathEntryType.EllipticalArc:
                            s += "A" + p.width.toString() + "," + p.height.toString() + " " + p.rotationAngle.toString() + " " + p.isLargeArcFlag.toString() + " " + p.sweepDirectionFlag.toString() + " " + p.ex.toString() + "," + p.ey.toString();
                            break;
                        case Shapes.PathEntryType.ArcTo:
                            break;
                        case Shapes.PathEntryType.Close:
                            s += "Z";
                            break;
                    }
                }
                return s;
            };
            return RawPath;
        })();
        Shapes.RawPath = RawPath;
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Text) {
        var TextBoxUndoActionDelete = (function () {
            function TextBoxUndoActionDelete(selectionAnchor, selectionCursor, buffer, start, length) {
                this.SelectionAnchor = selectionAnchor;
                this.SelectionCursor = selectionCursor;
                this.Start = start;
                this.Text = buffer.substr(start, length);
            }
            TextBoxUndoActionDelete.prototype.Undo = function (bo) {
                bo._Buffer = TextBuffer.Insert(bo._Buffer, this.Start, this.Text);
            };
            TextBoxUndoActionDelete.prototype.Redo = function (bo) {
                bo._Buffer = TextBuffer.Cut(bo._Buffer, this.Start, this.Text.length);
                return this.Start;
            };
            return TextBoxUndoActionDelete;
        })();
        Text.TextBoxUndoActionDelete = TextBoxUndoActionDelete;
        var TextBoxUndoActionInsert = (function () {
            function TextBoxUndoActionInsert(selectionAnchor, selectionCursor, start, inserted, isAtomic) {
                this.SelectionAnchor = selectionAnchor;
                this.SelectionCursor = selectionCursor;
                this.Start = start;
                this.Text = inserted;
                this.IsGrowable = isAtomic !== true;
            }
            TextBoxUndoActionInsert.prototype.Undo = function (bo) {
                bo._Buffer = TextBuffer.Cut(bo._Buffer, this.Start, this.Text.length);
            };
            TextBoxUndoActionInsert.prototype.Redo = function (bo) {
                bo._Buffer = TextBuffer.Insert(bo._Buffer, this.Start, this.Text);
                return this.Start + this.Text.length;
            };
            TextBoxUndoActionInsert.prototype.Insert = function (start, text) {
                if (!this.IsGrowable || start !== (this.Start + this.Text.length))
                    return false;
                this.Text += text;
                return true;
            };
            return TextBoxUndoActionInsert;
        })();
        Text.TextBoxUndoActionInsert = TextBoxUndoActionInsert;
        var TextBoxUndoActionReplace = (function () {
            function TextBoxUndoActionReplace(selectionAnchor, selectionCursor, buffer, start, length, inserted) {
                this.SelectionAnchor = selectionAnchor;
                this.SelectionCursor = selectionCursor;
                this.Start = start;
                this.Length = length;
                this.Deleted = buffer.substr(start, length);
                this.Inserted = inserted;
            }
            TextBoxUndoActionReplace.prototype.Undo = function (bo) {
                bo._Buffer = TextBuffer.Cut(bo._Buffer, this.Start, this.Inserted.length);
                bo._Buffer = Text.TextBuffer.Insert(bo._Buffer, this.Start, this.Deleted);
            };
            TextBoxUndoActionReplace.prototype.Redo = function (bo) {
                bo._Buffer = TextBuffer.Cut(bo._Buffer, this.Start, this.Length);
                bo._Buffer = TextBuffer.Insert(bo._Buffer, this.Start, this.Inserted);
                return this.Start + this.Inserted.length;
            };
            return TextBoxUndoActionReplace;
        })();
        Text.TextBoxUndoActionReplace = TextBoxUndoActionReplace;
        var TextBuffer = (function () {
            function TextBuffer() {
            }
            TextBuffer.Cut = function (text, start, len) {
                if (!text)
                    return "";
                return text.slice(0, start) + text.slice(start + len);
            };
            TextBuffer.Insert = function (text, index, str) {
                if (!text)
                    return str;
                return [text.slice(0, index), str, text.slice(index)].join('');
            };
            TextBuffer.Replace = function (text, start, len, str) {
                if (!text)
                    return str;
                return [text.slice(0, start), str, text.slice(start + len)].join('');
            };
            return TextBuffer;
        })();
        Text.TextBuffer = TextBuffer;
    })(Fayde.Text || (Fayde.Text = {}));
    var Text = Fayde.Text;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Text) {
        var TextLayoutGlyphCluster = (function () {
            function TextLayoutGlyphCluster(text, font, selected) {
                this._Selected = false;
                this._Advance = 0;
                this._Text = text;
                this._Selected = selected == true;
                this._Advance = Fayde.Surface.MeasureWidth(text, font);
            }
            TextLayoutGlyphCluster.prototype._Render = function (ctx, origin, attrs, x, y) {
                if (this._Text.length == 0 || this._Advance == 0.0)
                    return;
                var font = attrs.Font;
                var y0 = font._Ascender();
                ctx.Translate(x, y - y0);
                var fontHeight = font.GetActualHeight();
                var area = new rect();
                var ox = 0;
                var oy = 0;
                if (origin) {
                    ox = origin.X;
                    oy = origin.Y;
                }
                rect.set(area, ox, oy, this._Advance, fontHeight);
                var brush = attrs.GetBackground(this._Selected);
                if (brush) {
                    ctx.FillRect(brush, area);
                }
                var canvasCtx = ctx.CanvasContext;
                brush = attrs.GetForeground(this._Selected);
                if (brush) {
                    brush.SetupBrush(canvasCtx, area);
                    var brushHtml5 = brush.ToHtml5Object();
                    canvasCtx.fillStyle = brushHtml5;
                } else {
                    canvasCtx.fillStyle = "#000000";
                }
                canvasCtx.font = font.ToHtml5Object();
                canvasCtx.textAlign = "left";
                canvasCtx.textBaseline = "top";
                canvasCtx.fillText(this._Text, 0, 0);
                if (attrs.IsUnderlined) {
                    canvasCtx.beginPath();
                    canvasCtx.moveTo(0, fontHeight);
                    canvasCtx.lineTo(this._Advance, fontHeight);
                    canvasCtx.lineWidth = 2;
                    canvasCtx.strokeStyle = brushHtml5;
                    canvasCtx.stroke();
                }
            };
            return TextLayoutGlyphCluster;
        })();
        Text.TextLayoutGlyphCluster = TextLayoutGlyphCluster;
        var TextLayoutRun = (function () {
            function TextLayoutRun(line, attrs, start) {
                this._Clusters = [];
                this._Attrs = null;
                this._Start = 0;
                this._Line = null;
                this._Advance = 0.0;
                this._Length = 0;
                this._Attrs = attrs;
                this._Start = start;
                this._Line = line;
            }
            TextLayoutRun.prototype._GenerateCache = function () {
                var layout = this._Line._Layout;
                var selectionLength = layout.SelectionLength;
                var selectionStart = layout.SelectionStart;
                var text = layout.Text;
                var font = this._Attrs.Font;
                var len;
                var index = this._Start;
                var cluster1;
                var cluster2;
                if (selectionLength === 0 || this._Start < selectionStart) {
                    len = selectionLength > 0 ? Math.min(selectionStart - this._Start, this._Length) : this._Length;
                    cluster1 = new TextLayoutGlyphCluster(text.substr(this._Start, len), font);
                    this._Clusters.push(cluster1);
                    index += len;
                }
                var selectionEnd = selectionStart + selectionLength;
                var runEnd = this._Start + this._Length;
                if (index < runEnd && index < selectionEnd) {
                    len = Math.min(runEnd - index, selectionEnd - index);
                    cluster2 = new TextLayoutGlyphCluster(text.substr(index, len), font, true);
                    this._Clusters.push(cluster2);
                    index += len;
                }
                var cluster3;
                if (index < runEnd) {
                    len = runEnd - index;
                    cluster3 = new TextLayoutGlyphCluster(text.substr(index, len), font);
                    this._Clusters.push(cluster3);
                    index += len;
                }
            };
            TextLayoutRun.prototype._ClearCache = function () {
                this._Clusters = [];
            };
            TextLayoutRun.prototype._Render = function (ctx, origin, x, y) {
                var x0 = x;
                if (this._Clusters.length === 0)
                    this._GenerateCache();
                for (var i = 0; i < this._Clusters.length; i++) {
                    var cluster = this._Clusters[i];
                    ctx.Save();
                    cluster._Render(ctx, origin, this._Attrs, x0, y);
                    ctx.Restore();
                    x0 += cluster._Advance;
                }
            };
            TextLayoutRun.prototype.__Debug = function (allText) {
                return allText.substr(this._Start, this._Length);
            };
            return TextLayoutRun;
        })();
        Text.TextLayoutRun = TextLayoutRun;
        var TextLayoutLine = (function () {
            function TextLayoutLine(layout, start, offset) {
                this._Runs = [];
                this._Layout = null;
                this._Start = 0;
                this._Offset = 0;
                this._Advance = 0.0;
                this._Descend = 0.0;
                this._Height = 0.0;
                this._Width = 0.0;
                this._Length = 0;
                this._Layout = layout;
                this._Start = start;
                this._Offset = offset;
            }
            TextLayoutLine.prototype.GetCursorFromX = function (offset, x) {
                var run = null;
                var layout = this._Layout;
                var ox = 0;
                if (offset)
                    ox = offset.X;
                var x0 = ox + layout._HorizontalAlignment(this._Advance);
                var cursor = this._Offset;
                var text = layout.Text;
                var index = this._Start;
                var end = 0;
                var c = null;
                var i;
                for (i = 0; i < this._Runs.length; i++) {
                    run = this._Runs[i];
                    if (x < (x0 + run._Advance))
                        break;
                    cursor += run._Length;
                    index += run._Length;
                    x0 += run._Advance;
                    run = null;
                }
                if (run != null) {
                    index = run._Start;
                    end = run._Start + run._Length;
                    var font = run._Attrs.Font;
                    var m = 0;
                    var ch = 0;
                    while (index < end) {
                        ch = index;
                        cursor++;
                        c = text.charAt(index);
                        index++;
                        if (c === '\t')
                            c = ' ';
                        m = Fayde.Surface.MeasureWidth(c, font);
                        if (x <= x0 + (m / 2.0)) {
                            index = ch;
                            cursor--;
                            break;
                        }
                        x0 += m;
                    }
                } else if (i > 0) {
                    run = this._Runs[i - 1];
                    end = run._Start + run._Length;
                    index = run._Start;
                    c = end - 1 < 0 ? null : text.charAt(end - 1);
                    if (c == '\n') {
                        cursor--;
                        end--;
                        c = end - 1 < 0 ? null : text.charAt(end - 1);
                        if (c == '\r') {
                            cursor--;
                            end--;
                        }
                    }
                }
                return cursor;
            };
            TextLayoutLine.prototype._Render = function (ctx, origin, left, top) {
                var run = null;
                var x0 = left;
                var y0 = top;
                for (var i = 0; i < this._Runs.length; i++) {
                    run = this._Runs[i];
                    run._Render(ctx, origin, x0, y0);
                    x0 += run._Advance;
                }
            };
            TextLayoutLine.prototype.__Debug = function (allText) {
                var t = "";
                t += "\t\tRuns: " + this._Runs.length.toString() + "\n";
                for (var i = 0; i < this._Runs.length; i++) {
                    t += "\t\t\tRun " + i.toString() + ": ";
                    t += this._Runs[i].__Debug(allText);
                    t += "\n";
                }
                return t;
            };
            return TextLayoutLine;
        })();
        Text.TextLayoutLine = TextLayoutLine;
        function cloneBreakOp(bop) {
            return {
                Advance: bop.Advance,
                Index: bop.Index,
                Btype: bop.Btype,
                c: bop.c
            };
        }
        function setWordBasics(bop, word) {
            word.Length = this.Index;
            word.Advance = this.Advance;
        }
        function layoutLwsp(word, text, font) {
            var advance = Fayde.Surface.MeasureWidth(text, font);
            word.Advance = advance;
            word.LineAdvance += advance;
            word.Length = text.length;
        }
        function isLineBreak(text) {
            var c0 = text.charAt(0);
            if (c0 === '\n')
                return 1;
            var c1 = text.charAt(1);
            if (c0 === '\r' && c1 === '\n')
                return 2;
            return 0;
        }
        function getWidthConstraint(availWidth, maxWidth, actualWidth) {
            if (!isFinite(availWidth)) {
                if (!isFinite(maxWidth))
                    return actualWidth;
else
                    return Math.min(actualWidth, maxWidth);
            }
            return availWidth;
        }
        function validateAttributes(attributes) {
            var len = attributes.length;
            var attr = attributes[0];
            if (!attr || attr.Start !== 0)
                return false;
            for (var i = 0; i < len; i++) {
                attr = attributes[i];
                if (!attr.Font)
                    return false;
            }
            return true;
        }
        function layoutWordWrap(word, text, maxWidth) {
            word.Length = 0;
            word.Advance = 0.0;
            var measuredIndex = 0;
            var measuredText = "";
            if (text.indexOf(" ", measuredIndex) === -1) {
                var advance = Fayde.Surface.MeasureWidth(text, word.Font);
                if (isFinite(maxWidth) && (word.LineAdvance + advance) > maxWidth) {
                    return true;
                }
                word.Advance = advance;
                word.LineAdvance = advance;
                word.Length = text.length;
                return false;
            }
            while (true) {
                var index = text.indexOf(" ", measuredIndex);
                if (index === -1)
                    break;
                index += 1;
                measuredText = text.slice(measuredIndex, index);
                var advance = Fayde.Surface.MeasureWidth(measuredText, word.Font);
                if (isFinite(maxWidth) && (word.LineAdvance + advance) > maxWidth) {
                    return true;
                }
                measuredIndex = index;
                word.Advance += advance;
                word.LineAdvance += advance;
                word.Length += measuredText.length;
            }
            return false;
        }
        function layoutWordNoWrap(word, text, maxWidth) {
            var advance = Fayde.Surface.MeasureWidth(text, word.Font);
            word.Advance = advance;
            word.LineAdvance += advance;
            word.Length = text.length;
            return false;
        }
        var TextLayout = (function () {
            function TextLayout() {
                this._SelectionStart = 0;
                this._SelectionLength = 0;
                this._Text = null;
                this.AvailableWidth = Number.POSITIVE_INFINITY;
                this._Strategy = Fayde.LineStackingStrategy.MaxHeight;
                this._Alignment = Fayde.TextAlignment.Left;
                this._Trimming = Fayde.Controls.TextTrimming.None;
                this._Wrapping = Fayde.Controls.TextWrapping.NoWrap;
                this._MaxHeight = Number.POSITIVE_INFINITY;
                this._MaxWidth = Number.POSITIVE_INFINITY;
                this._BaseDescent = 0.0;
                this._BaseHeight = 0.0;
                this._ActualHeight = NaN;
                this._ActualWidth = NaN;
                this._LineHeight = NaN;
                this._Lines = [];
                this._IsWrapped = true;
                this._Length = 0;
            }
            Object.defineProperty(TextLayout.prototype, "SelectionStart", {
                get: function () {
                    return this._SelectionStart;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextLayout.prototype, "SelectionLength", {
                get: function () {
                    return this._SelectionLength;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextLayout.prototype, "ActualExtents", {
                get: function () {
                    return size.fromRaw(this._ActualWidth, this._ActualHeight);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextLayout.prototype, "RenderExtents", {
                get: function () {
                    this.Layout();
                    return rect.set(new rect(), this._HorizontalAlignment(this._ActualWidth), 0.0, this._ActualWidth, this._ActualHeight);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextLayout.prototype, "MaxWidth", {
                get: function () {
                    return this._MaxWidth;
                },
                set: function (maxWidth) {
                    if (maxWidth === 0.0)
                        maxWidth = Number.POSITIVE_INFINITY;
                    if (this._MaxWidth === maxWidth)
                        return;
                    if (!this._IsWrapped && (!isFinite(maxWidth) || maxWidth > this._ActualWidth)) {
                        this._MaxWidth = maxWidth;
                        return;
                    }
                    this._MaxWidth = maxWidth;
                    this.ResetState();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextLayout.prototype, "TextAlignment", {
                get: function () {
                    return this._Alignment;
                },
                set: function (align) {
                    if (this._Alignment === align)
                        return;
                    this._Alignment = align;
                    this.ResetState();
                },
                enumerable: true,
                configurable: true
            });
            TextLayout.prototype.SetTextAlignment = function (align) {
                if (this._Alignment === align)
                    return false;
                this._Alignment = align;
                this.ResetState();
                return true;
            };
            Object.defineProperty(TextLayout.prototype, "TextTrimming", {
                get: function () {
                    return this._Trimming;
                },
                set: function (value) {
                    this.SetTextTrimming(value);
                },
                enumerable: true,
                configurable: true
            });
            TextLayout.prototype.SetTextTrimming = function (value) {
                if (this._Trimming === value)
                    return false;
                this._Trimming = value;
                this.ResetState();
                return true;
            };
            Object.defineProperty(TextLayout.prototype, "TextWrapping", {
                get: function () {
                    return this._Wrapping;
                },
                set: function (wrapping) {
                    this.SetTextWrapping(wrapping);
                },
                enumerable: true,
                configurable: true
            });
            TextLayout.prototype.SetTextWrapping = function (wrapping) {
                switch (wrapping) {
                    case Fayde.Controls.TextWrapping.NoWrap:
                    case Fayde.Controls.TextWrapping.Wrap:
                        break;
                    default:
                        wrapping = Fayde.Controls.TextWrapping.Wrap;
                        break;
                }
                if (this._Wrapping === wrapping)
                    return false;
                this._Wrapping = wrapping;
                this.ResetState();
                return true;
            };
            Object.defineProperty(TextLayout.prototype, "LineStackingStrategy", {
                get: function () {
                    return this._Strategy;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextLayout.prototype, "LineStackingStategy", {
                set: function (value) {
                    this.SetLineStackingStategy(value);
                },
                enumerable: true,
                configurable: true
            });
            TextLayout.prototype.SetLineStackingStategy = function (strategy) {
                if (this._Strategy === strategy)
                    return false;
                this._Strategy = strategy;
                this.ResetState();
                return true;
            };
            Object.defineProperty(TextLayout.prototype, "LineHeight", {
                get: function () {
                    return this._LineHeight;
                },
                set: function (value) {
                    this.SetLineHeight(value);
                },
                enumerable: true,
                configurable: true
            });
            TextLayout.prototype.SetLineHeight = function (value) {
                if (this._LineHeight === value)
                    return false;
                this._LineHeight = value;
                this.ResetState();
                return true;
            };
            Object.defineProperty(TextLayout.prototype, "TextAttributes", {
                get: function () {
                    return this._Attrs;
                },
                set: function (attrs) {
                    this._Attrs = attrs;
                    this.ResetState();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextLayout.prototype, "Text", {
                get: function () {
                    return this._Text;
                },
                set: function (text) {
                    if (text != null) {
                        this._Text = text;
                        this._Length = text.length;
                    } else {
                        this._Text = null;
                        this._Length = 0;
                    }
                    this.ResetState();
                },
                enumerable: true,
                configurable: true
            });
            TextLayout.prototype.GetSelectionCursor = function (offset, pos) {
                var ox = 0;
                var oy = 0;
                if (offset) {
                    ox = offset.X;
                    oy = offset.Y;
                }
                var x0 = ox;
                var y0 = oy;
                var height = 0.0;
                var y1 = 0.0;
                var cursor = 0;
                var end = 0;
                var line;
                var lines = this._Lines;
                for (var i = 0; i < lines.length; i++) {
                    line = lines[i];
                    x0 = ox + this._HorizontalAlignment(line._Advance);
                    y1 = y0 + line._Height + line._Descend;
                    height = line._Height;
                    if (pos >= cursor + line._Length) {
                        if ((i + 1) === this._Lines.length) {
                            if (isLineBreak(this._Text.substr(line._Start + line._Length - 1, 2))) {
                                x0 = ox + this._HorizontalAlignment(0.0);
                                y0 += line._Height;
                            } else {
                                x0 += line._Advance;
                            }
                            break;
                        }
                        cursor += line._Length;
                        y0 += line._Height;
                        continue;
                    }
                    var runs = line._Runs;
                    var run = null;
                    for (var j = 0; j < runs.length; j++) {
                        run = runs[j];
                        end = run._Start + run._Length;
                        if (pos >= cursor + run._Length) {
                            cursor += run._Length;
                            x0 += run._Advance;
                            continue;
                        }
                        if (run._Start === pos)
                            break;
                        var font = run._Attrs.Font;
                        x0 += Fayde.Surface.MeasureWidth(this._Text.slice(run._Start, pos), font);
                        break;
                    }
                    break;
                }
                var r = new rect();
                rect.set(r, x0, y0, 1.0, height);
                return r;
            };
            TextLayout.prototype.GetBaselineOffset = function () {
                var lines = this._Lines;
                if (lines.length === 0)
                    return 0;
                var line = lines[0];
                return line._Height + line._Descend;
            };
            TextLayout.prototype.GetLineFromY = function (offset, y) {
                var line = null;
                var y0 = (offset) ? offset.Y : 0.0;
                var y1;
                var lines = this._Lines;
                for (var i = 0; i < lines.length; i++) {
                    line = lines[i];
                    y1 = y0 + line._Height;
                    if (y < y1) {
                        return line;
                    }
                    y0 = y1;
                }
            };
            TextLayout.prototype.GetLineFromIndex = function (index) {
                var lines = this._Lines;
                if (index >= lines.length || index < 0)
                    return null;
                return lines[index];
            };
            TextLayout.prototype.GetCursorFromXY = function (offset, x, y) {
                var oy = 0;
                if (offset)
                    oy = offset.Y;
                var lines = this._Lines;
                var line;
                if (y < oy) {
                    line = lines[0];
                } else if (!(line = this.GetLineFromY(offset, y))) {
                    line = lines[lines.length - 1];
                }
                return line.GetCursorFromX(offset, x);
            };
            TextLayout.prototype.Select = function (start, length) {
                if (!this._Text) {
                    this._SelectionLength = 0;
                    this._SelectionStart = 0;
                    return;
                }
                var newSelectionStart = 0;
                var newSelectionLength = 0;
                var index = 0;
                var end = 0;
                if (!false) {
                    newSelectionStart = index = start;
                    end = index + length;
                    newSelectionLength = length;
                } else {
                    newSelectionLength = length;
                    newSelectionStart = start;
                }
                if (this._SelectionStart === newSelectionStart && this._SelectionLength === newSelectionLength)
                    return;
                if (this._SelectionLength > 0 || newSelectionLength > 0)
                    this._ClearCache();
                this._SelectionLength = newSelectionLength;
                this._SelectionStart = newSelectionStart;
            };
            TextLayout.prototype.Layout = function () {
                if (!isNaN(this._ActualWidth))
                    return;
                this._ActualHeight = 0.0;
                this._ActualWidth = 0.0;
                this._IsWrapped = false;
                this._ClearLines();
                if (this._Text == null || !validateAttributes(this._Attrs))
                    return;
                var word = {
                    Advance: 0.0,
                    LineAdvance: 0.0,
                    Length: 0.0,
                    BreakOps: null,
                    Font: new Font()
                };
                if (this._Wrapping === Fayde.Controls.TextWrapping.Wrap)
                    word.BreakOps = [];
else
                    word.BreakOps = null;
                var layoutWordFunc;
                layoutWordFunc = this._Wrapping === Fayde.Controls.TextWrapping.NoWrap ? layoutWordNoWrap : layoutWordWrap;
                var line = new TextLayoutLine(this, 0, 0);
                if (this._OverrideLineHeight()) {
                    line._Descend = this._GetDescendOverride();
                    line._Height = this._GetLineHeightOverride();
                }
                this._Lines.push(line);
                var index = 0;
                var end;
                var run;
                var font;
                var attrindex = 0;
                var attrs = this._Attrs;
                var attr = attrs[0];
                var nattr = attrs[1];
                do {
                    end = nattr ? nattr.Start : this._Length;
                    run = new TextLayoutRun(line, attr, index);
                    line._Runs.push(run);
                    word.Font = font = attr.Font;
                    if (end - index <= 0) {
                        if (!this._OverrideLineHeight()) {
                            line._Descend = Math.min(line._Descend, font._Descender());
                            line._Height = Math.max(line._Height, font.GetActualHeight());
                        }
                        this._ActualHeight += line._Height;
                        break;
                    }
                    while (index < end) {
                        var linebreak = false;
                        var wrapped = false;
                        while (index < end) {
                            var lineBreakLength = isLineBreak(this._Text.slice(index, end));
                            if (lineBreakLength > 0) {
                                if (line._Length == 0 && !this._OverrideLineHeight()) {
                                    line._Descend = font._Descender();
                                    line._Height = font.GetActualHeight();
                                }
                                line._Length += lineBreakLength;
                                run._Length += lineBreakLength;
                                index += lineBreakLength;
                                linebreak = true;
                                break;
                            }
                            word.LineAdvance = line._Advance;
                            if (layoutWordFunc(word, this._Text.slice(index, end), this._MaxWidth)) {
                                this._IsWrapped = true;
                                wrapped = true;
                            }
                            if (word.Length > 0) {
                                if (!this._OverrideLineHeight()) {
                                    line._Descend = Math.min(line._Descend, font._Descender());
                                    line._Height = Math.max(line._Height, font.GetActualHeight());
                                }
                                line._Advance += word.Advance;
                                run._Advance += word.Advance;
                                line._Width = line._Advance;
                                line._Length += word.Length;
                                run._Length += word.Length;
                                index += word.Length;
                            }
                            if (wrapped)
                                break;
                            word.LineAdvance = line._Advance;
                            layoutLwsp(word, this._Text.slice(index, end), font);
                            if (word.Length > 0) {
                                if (!this._OverrideLineHeight()) {
                                    line._Descend = Math.min(line._Descend, font._Descender());
                                    line._Height = Math.max(line._Height, font.GetActualHeight());
                                }
                                line._Advance += word.Advance;
                                run._Advance += word.Advance;
                                line._Width = line._Advance;
                                line._Length += word.Length;
                                run._Length += word.Length;
                                index += word.Length;
                            }
                        }
                        var atend = index >= end;
                        if (linebreak || wrapped || atend) {
                            this._ActualWidth = Math.max(this._ActualWidth, atend ? line._Advance : line._Width);
                            this._ActualHeight += line._Height;
                            if (linebreak || wrapped) {
                                line = new TextLayoutLine(this, index, index);
                                if (!this._OverrideLineHeight()) {
                                    if (end - index < 1) {
                                        line._Descend = font._Descender();
                                        line._Height = font.GetActualHeight();
                                    }
                                } else {
                                    line._Descend = this._GetDescendOverride();
                                    line._Height = this._GetLineHeightOverride();
                                }
                                if (linebreak && (end - index < 1))
                                    this._ActualHeight += line._Height;
                                this._Lines.push(line);
                            }
                            if (index < end) {
                                run = new TextLayoutRun(line, attr, index);
                                line._Runs.push(run);
                            }
                        }
                    }
                    attrindex++;
                    attr = nattr;
                    nattr = attrs[attrindex + 1];
                } while(end - index > 0);
            };
            TextLayout.prototype._HorizontalAlignment = function (lineWidth) {
                var deltax = 0.0;
                var width;
                switch (this._Alignment) {
                    case Fayde.TextAlignment.Center:
                        width = getWidthConstraint(this.AvailableWidth, this._MaxWidth, this._ActualWidth);
                        if (lineWidth < width)
                            deltax = (width - lineWidth) / 2.0;
                        break;
                    case Fayde.TextAlignment.Right:
                        width = getWidthConstraint(this.AvailableWidth, this._MaxWidth, this._ActualWidth);
                        if (lineWidth < width)
                            deltax = width - lineWidth;
                        break;
                }
                return deltax;
            };
            TextLayout.prototype.Render = function (ctx, origin, offset) {
                var line;
                var x = 0.0;
                var ox = (offset) ? offset.X : 0.0;
                var y = (offset) ? offset.Y : 0.0;
                this.Layout();
                for (var i = 0; i < this._Lines.length; i++) {
                    line = this._Lines[i];
                    x = ox + this._HorizontalAlignment(line._Advance);
                    line._Render(ctx, origin, x, y);
                    y += line._Height;
                }
            };
            TextLayout.prototype.__Debug = function () {
                var allText = this.Text;
                var t = "";
                t += "Lines: " + this._Lines.length.toString() + "\n";
                for (var i = 0; i < this._Lines.length; i++) {
                    t += "\tLine " + i.toString() + ":\n";
                    t += this._Lines[i].__Debug(allText);
                }
                return t;
            };
            TextLayout.prototype.ResetState = function () {
                this._ActualHeight = NaN;
                this._ActualWidth = NaN;
            };
            TextLayout.prototype._ClearCache = function () {
                var line = null;
                var lines = this._Lines;
                var len = lines.length;
                var runs;
                var runlen = 0;
                for (var i = 0; i < len; i++) {
                    line = lines[i];
                    runs = line._Runs;
                    runlen = runs.length;
                    for (var j = 0; j < runlen; j++) {
                        runs[i]._ClearCache();
                    }
                }
            };
            TextLayout.prototype._ClearLines = function () {
                this._Lines = [];
            };
            TextLayout.prototype._OverrideLineHeight = function () {
                return this._Strategy === Fayde.LineStackingStrategy.BlockLineHeight && this._LineHeight !== 0;
            };
            TextLayout.prototype._GetLineHeightOverride = function () {
                if (isNaN(this._LineHeight))
                    return this._BaseHeight;
                return this._LineHeight;
            };
            TextLayout.prototype._GetDescendOverride = function () {
                if (isNaN(this._LineHeight))
                    return this._BaseDescent;
                if (this._BaseHeight == 0.0)
                    return 0.0;
                return this._LineHeight * (this._BaseDescent / this._BaseHeight);
            };
            return TextLayout;
        })();
        Text.TextLayout = TextLayout;
    })(Fayde.Text || (Fayde.Text = {}));
    var Text = Fayde.Text;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Xaml) {
        var EXPRESSION_REGEX = /\{([^\s]*)\s(.*)\}/;
        var MarkupExpressionParser = (function () {
            function MarkupExpressionParser() {
            }
            MarkupExpressionParser.Parse = function (value, ctx) {
                if (value && value.toLowerCase() === "{x:null}")
                    return null;
                if (value[value.length - 1] !== "}")
                    return undefined;
                var result = EXPRESSION_REGEX.exec(value);
                var typeres;
                var r1 = "";
                var r2 = "";
                if (result) {
                    r1 = result[1];
                    r2 = result[2];
                } else {
                    r1 = value.substr(1, value.length - 2);
                }
                switch (r1) {
                    case "x:Type":
                        return parseXType(r2, ctx);
                    case "x:Static":
                        return parseXStatic(r2, ctx);
                    case "Binding":
                        return parseBinding(r2, ctx);
                    case "StaticResource":
                        return parseStaticResource(r2, ctx);
                    case "TemplateBinding":
                        return parseTemplateBinding(r2, ctx);
                    case "RelativeSource":
                        return parseRelativeSource(r2, ctx);
                    default:
                        return undefined;
                }
            };
            return MarkupExpressionParser;
        })();
        Xaml.MarkupExpressionParser = MarkupExpressionParser;
        function parseXType(val, ctx) {
            var typeres = Fayde.TypeResolver.ResolveFullyQualifiedName(val, ctx.Resolver);
            if (!typeres)
                throw new XamlMarkupParseException("Could not resolve type '" + val + "'");
            return typeres.Type;
        }
        function parseXStatic(val, ctx) {
            return new Function("return (" + val + ")")();
        }
        function parseBinding(val, ctx) {
            var inKey = true;
            var inQuote = false;
            var inDoubleQuote = false;
            var binding = new Fayde.Data.Binding();
            var remaining = val;
            var commai;
            var equali;
            var squigglyi;
            var curKey = "Path";
            while (remaining) {
                if (inKey) {
                    commai = remaining.indexOf(",");
                    equali = remaining.indexOf("=");
                    if (equali === -1 || (commai !== -1 && commai < equali)) {
                        var path;
                        if (commai !== -1) {
                            path = remaining.substr(0, commai);
                            remaining = remaining.substr(path.length + 1);
                        } else {
                            path = remaining;
                            remaining = "";
                        }
                        bindingPropertyFuncs["Path"](binding, "Path", undefined, path);
                        inKey = true;
                    } else {
                        curKey = remaining.substr(0, equali).trim();
                        remaining = remaining.substr(equali + 1);
                        inKey = false;
                    }
                } else {
                    var strVal;
                    var curVal = undefined;
                    if (remaining[0] === "{") {
                        var iev = parseInnerExpression(remaining, ctx);
                        remaining = iev.remaining;
                        strVal = iev.strVal;
                        curVal = iev.objVal;
                        if (curVal instanceof Fayde.Expression)
                            curVal = (curVal).GetValue(ctx.Property);
                    } else {
                        commai = remaining.indexOf(",");
                        if (commai === -1) {
                            strVal = remaining;
                            remaining = "";
                        } else {
                            strVal = remaining.substr(0, commai);
                            remaining = remaining.substr(commai + 1);
                        }
                    }
                    var propFunc = bindingPropertyFuncs[curKey];
                    if (!propFunc)
                        throw new Exception("Unknown property in Binding '" + curKey + "'.");
                    propFunc(binding, curKey, curVal, strVal);
                    inKey = true;
                }
            }
            return binding.Transmute(ctx);
        }
        function parseInnerExpression(val, ctx) {
            var len = val.length;
            var i;
            var inQuote = false;
            var quoteTerm;
            var c;
            var squigglyCount = 0;
            for (i = 0; i < len; i++) {
                c = val[i];
                if (inQuote) {
                    if (c === quoteTerm) {
                        if (val[i - 1] === "\\")
                            i++;
else
                            inQuote = false;
                    }
                } else if (c === "'" || c === "\"") {
                    inQuote = true;
                    quoteTerm = c;
                } else if (c === "{") {
                    squigglyCount++;
                } else if (c === "}") {
                    squigglyCount--;
                    if (squigglyCount === 0) {
                        i++;
                        break;
                    }
                }
            }
            if (inQuote)
                throw new Exception("Unterminated string constant.");
            if (squigglyCount > 0)
                throw new Exception("Unterminated bracket.");
            var rv = {
                strVal: val.substr(0, i),
                objVal: null,
                remaining: val.substr(i)
            };
            rv.objVal = MarkupExpressionParser.Parse(rv.strVal, ctx);
            return rv;
        }
        function parseStaticResource(key, ctx) {
            var o;
            var rc = ctx.ResourceChain;
            var len = rc.length;
            for (var i = len - 1; i >= 0; i--) {
                o = rc[i].Get(key);
                if (o !== undefined)
                    return o;
            }
            var objs = ctx.ObjectStack;
            len = objs.length;
            var cur;
            for (var i = len - 1; i >= 0; i--) {
                cur = objs[i];
                if (cur instanceof Fayde.FrameworkElement) {
                    o = (cur).Resources.Get(key);
                } else if (cur instanceof Fayde.Application) {
                    o = (cur).Resources.Get(key);
                }
                if (o !== undefined)
                    return o;
            }
            o = Fayde.Application.Current.Resources.Get(key);
            if (o !== undefined)
                return o;
            throw new XamlParseException("Could not resolve StaticResource: '" + key + "'.");
        }
        function parseTemplateBinding(val, ctx) {
            var tb = new Xaml.TemplateBinding(val);
            return tb.Transmute(ctx);
        }
        function parseRelativeSource(val, ctx) {
            var tokens = val.split(",");
            var len = tokens.length;
            var rs = new Fayde.Data.RelativeSource();
            var key;
            var value;
            for (var i = 0; i < len; i++) {
                var kvp = tokens[i].split("=");
                if (kvp.length === 1) {
                    key = "Mode";
                    value = kvp[0];
                } else {
                    key = kvp[0];
                    value = kvp[1];
                }
                switch (key) {
                    case "Mode":
                        rs.Mode = Fayde.Data.RelativeSourceMode[value];
                        if (rs.Mode == null)
                            rs.Mode = Fayde.Data.RelativeSourceMode.Self;
                        break;
                    case "AncestorLevel":
                        rs.AncestorLevel = parseInt(value);
                        if (isNaN(rs.AncestorLevel))
                            rs.AncestorLevel = 1;
                        break;
                    case "AncestorType":
                        var typeres = Fayde.TypeResolver.ResolveFullyQualifiedName(value, ctx.Resolver);
                        if (!typeres)
                            throw new Exception("Could not resolve type '" + value + "'.");
                        rs.AncestorType = typeres.Type;
                        break;
                }
            }
            return rs;
        }
        var bindingPropertyFuncs = [];
        bindingPropertyFuncs["FallbackValue"] = bindingPropertyFuncs["ElementName"] = bindingPropertyFuncs["TargetNullValue"] = bindingPropertyFuncs["ConverterParameter"] = bindingPropertyFuncs["Source"] = bindingPropertyFuncs["StringFormat"] = function (binding, key, oVal, strVal) {
            if (oVal !== undefined) {
                binding[key] = oVal;
                return;
            }
            if (strVal[0] === "'" && strVal[strVal.length - 1] === "'")
                strVal = strVal.substr(1, strVal.length - 2);
            binding[key] = strVal;
        };
        bindingPropertyFuncs["BindsDirectlyToSource"] = bindingPropertyFuncs["NotifyOnValidationError"] = bindingPropertyFuncs["ValidatesOnExceptions"] = bindingPropertyFuncs["ValidatesOnDataErrors"] = bindingPropertyFuncs["ValidatesOnNotifyDataErrors"] = function (binding, key, oVal, strVal) {
            var val = oVal;
            if (val === undefined)
                val = strVal;
            if (!val)
                return;
            val = val.toString().toLowerCase();
            if (val === "true") {
                binding[key] = true;
            } else if (val === "false") {
                binding[key] = false;
            } else {
                throw new Exception("Invalid boolean value for '" + key + "'.");
            }
        };
        bindingPropertyFuncs["Mode"] = function (binding, key, oVal, strVal) {
            var mode = Fayde.Data.BindingMode[strVal];
            if (mode == null)
                mode = Fayde.Data.BindingMode.OneWay;
            binding.Mode = mode;
        };
        bindingPropertyFuncs["UpdateSourceTrigger"] = function (binding, key, oVal, strVal) {
            var ust = Fayde.Data.UpdateSourceTrigger[strVal];
            if (ust == null)
                Fayde.Data.UpdateSourceTrigger.Default;
            binding.UpdateSourceTrigger = ust;
        };
        bindingPropertyFuncs["Path"] = function (binding, key, oVal, strVal) {
            if (!strVal)
                return;
            binding.Path = new Fayde.Data.PropertyPath(strVal);
        };
        bindingPropertyFuncs["RelativeSource"] = function (binding, key, oVal, strVal) {
            if (!(oVal instanceof Fayde.Data.RelativeSource))
                throw new Exception("RelativeSource value must be a RelativeSource.");
            binding.RelativeSource = oVal;
        };
        bindingPropertyFuncs["Converter"] = function (binding, key, oVal, strVal) {
            if (!Nullstone.ImplementsInterface(oVal, Fayde.Data.IValueConverter_))
                throw new Exception("Binding Converter must implement IValueConverter.");
            binding.Converter = oVal;
        };
        bindingPropertyFuncs["ConverterCulture"] = function (binding, key, oVal, strVal) {
            throw new NotSupportedException("ConverterCulture");
        };
        return bindingPropertyFuncs;
    })(Fayde.Xaml || (Fayde.Xaml = {}));
    var Xaml = Fayde.Xaml;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Collections) {
        Collections.INotifyCollectionChanged_ = Fayde.RegisterInterface("INotifyCollectionChanged");
    })(Fayde.Collections || (Fayde.Collections = {}));
    var Collections = Fayde.Collections;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            Primitives.IScrollInfo_ = Fayde.RegisterInterface("IScrollInfo");
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Orientation) {
        Orientation[Orientation["Horizontal"] = 0] = "Horizontal";
        Orientation[Orientation["Vertical"] = 1] = "Vertical";
    })(Fayde.Orientation || (Fayde.Orientation = {}));
    var Orientation = Fayde.Orientation;
    Fayde.RegisterEnum(Orientation, {
        Name: "Orientation",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    (function (Visibility) {
        Visibility[Visibility["Visible"] = 0] = "Visible";
        Visibility[Visibility["Collapsed"] = 1] = "Collapsed";
    })(Fayde.Visibility || (Fayde.Visibility = {}));
    var Visibility = Fayde.Visibility;
    Fayde.RegisterEnum(Visibility, {
        Name: "Visibility",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    Fayde.CursorType = {
        Default: "",
        Hand: "pointer",
        IBeam: "text",
        Wait: "wait",
        SizeNESW: "ne-resize",
        SizeNWSE: "nw-resize",
        SizeNS: "n-resize",
        SizeWE: "w-resize"
    };
    Fayde.RegisterEnum(Fayde.CursorType, {
        Name: "CursorType",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    (function (HorizontalAlignment) {
        HorizontalAlignment[HorizontalAlignment["Left"] = 0] = "Left";
        HorizontalAlignment[HorizontalAlignment["Center"] = 1] = "Center";
        HorizontalAlignment[HorizontalAlignment["Right"] = 2] = "Right";
        HorizontalAlignment[HorizontalAlignment["Stretch"] = 3] = "Stretch";
    })(Fayde.HorizontalAlignment || (Fayde.HorizontalAlignment = {}));
    var HorizontalAlignment = Fayde.HorizontalAlignment;
    Fayde.RegisterEnum(HorizontalAlignment, {
        Name: "HorizontalAlignment",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    (function (VerticalAlignment) {
        VerticalAlignment[VerticalAlignment["Top"] = 0] = "Top";
        VerticalAlignment[VerticalAlignment["Center"] = 1] = "Center";
        VerticalAlignment[VerticalAlignment["Bottom"] = 2] = "Bottom";
        VerticalAlignment[VerticalAlignment["Stretch"] = 3] = "Stretch";
    })(Fayde.VerticalAlignment || (Fayde.VerticalAlignment = {}));
    var VerticalAlignment = Fayde.VerticalAlignment;
    Fayde.RegisterEnum(VerticalAlignment, {
        Name: "VerticalAlignment",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    (function (FlowDirection) {
        FlowDirection[FlowDirection["LeftToRight"] = 0] = "LeftToRight";
        FlowDirection[FlowDirection["RightToLeft"] = 1] = "RightToLeft";
    })(Fayde.FlowDirection || (Fayde.FlowDirection = {}));
    var FlowDirection = Fayde.FlowDirection;
    Fayde.RegisterEnum(FlowDirection, {
        Name: "FlowDirection",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    (function (FontWeight) {
        FontWeight[FontWeight["Thin"] = 100] = "Thin";
        FontWeight[FontWeight["ExtraLight"] = 200] = "ExtraLight";
        FontWeight[FontWeight["Light"] = 300] = "Light";
        FontWeight[FontWeight["Normal"] = 400] = "Normal";
        FontWeight[FontWeight["Medium"] = 500] = "Medium";
        FontWeight[FontWeight["SemiBold"] = 600] = "SemiBold";
        FontWeight[FontWeight["Bold"] = 700] = "Bold";
        FontWeight[FontWeight["ExtraBold"] = 800] = "ExtraBold";
        FontWeight[FontWeight["Black"] = 900] = "Black";
        FontWeight[FontWeight["ExtraBlack"] = 950] = "ExtraBlack";
    })(Fayde.FontWeight || (Fayde.FontWeight = {}));
    var FontWeight = Fayde.FontWeight;
    Fayde.RegisterEnum(FontWeight, {
        Name: "FontWeight",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    (function (TextAlignment) {
        TextAlignment[TextAlignment["Left"] = 0] = "Left";
        TextAlignment[TextAlignment["Center"] = 1] = "Center";
        TextAlignment[TextAlignment["Right"] = 2] = "Right";
        TextAlignment[TextAlignment["Justify"] = 3] = "Justify";
    })(Fayde.TextAlignment || (Fayde.TextAlignment = {}));
    var TextAlignment = Fayde.TextAlignment;
    Fayde.RegisterEnum(FontWeight, {
        Name: "TextAlignment",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    (function (TextDecorations) {
        TextDecorations[TextDecorations["None"] = 0] = "None";
        TextDecorations[TextDecorations["Underline"] = 1] = "Underline";
    })(Fayde.TextDecorations || (Fayde.TextDecorations = {}));
    var TextDecorations = Fayde.TextDecorations;
    Fayde.RegisterEnum(TextDecorations, {
        Name: "TextDecorations",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    (function (LineStackingStrategy) {
        LineStackingStrategy[LineStackingStrategy["MaxHeight"] = 0] = "MaxHeight";
        LineStackingStrategy[LineStackingStrategy["BlockLineHeight"] = 1] = "BlockLineHeight";
    })(Fayde.LineStackingStrategy || (Fayde.LineStackingStrategy = {}));
    var LineStackingStrategy = Fayde.LineStackingStrategy;
    Fayde.RegisterEnum(LineStackingStrategy, {
        Name: "LineStackingStrategy",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Providers) {
        var ActualSizeStore = (function (_super) {
            __extends(ActualSizeStore, _super);
            function ActualSizeStore() {
                _super.apply(this, arguments);
            }
            ActualSizeStore.prototype.GetValue = function (storage) {
                if (storage.Local !== undefined)
                    return storage.Local;
                return 0.0;
            };
            ActualSizeStore.prototype.GetValuePrecedence = function (storage) {
                return Providers.PropertyPrecedence.LocalValue;
            };
            ActualSizeStore.prototype.SetLocalValue = function (storage, newValue) {
                var oldValue = storage.Local;
                storage.Local = newValue;
                if (oldValue === newValue)
                    return;
                this.OnPropertyChanged(storage, Providers.PropertyPrecedence.LocalValue, oldValue, newValue);
            };
            ActualSizeStore.prototype.SetLocalStyleValue = function (storage, newValue) {
            };
            ActualSizeStore.prototype.SetImplicitStyle = function (storage, newValue) {
            };
            ActualSizeStore.prototype.ClearValue = function (storage, notifyListeners) {
            };
            return ActualSizeStore;
        })(Providers.PropertyStore);
        Providers.ActualSizeStore = ActualSizeStore;
        ActualSizeStore.Instance = new ActualSizeStore();
    })(Fayde.Providers || (Fayde.Providers = {}));
    var Providers = Fayde.Providers;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Providers) {
        var DataContextStore = (function (_super) {
            __extends(DataContextStore, _super);
            function DataContextStore() {
                _super.apply(this, arguments);
            }
            DataContextStore.prototype.GetValue = function (storage) {
                var val = _super.prototype.GetValue.call(this, storage);
                if (val === undefined)
                    val = storage.InheritedValue;
                return val;
            };
            DataContextStore.prototype.GetValuePrecedence = function (storage) {
                var prec = _super.prototype.GetValuePrecedence.call(this, storage);
                if (prec < Providers.PropertyPrecedence.InheritedDataContext)
                    return prec;
                if (storage.InheritedValue !== undefined)
                    return Providers.PropertyPrecedence.InheritedDataContext;
                return Providers.PropertyPrecedence.DefaultValue;
            };
            DataContextStore.prototype.EmitInheritedChanged = function (storage, newInherited) {
                var oldInherited = storage.InheritedValue;
                storage.InheritedValue = newInherited;
                if (storage.Precedence >= Providers.PropertyPrecedence.InheritedDataContext && oldInherited !== newInherited)
                    this.OnPropertyChanged(storage, Providers.PropertyPrecedence.InheritedDataContext, oldInherited, newInherited);
            };
            DataContextStore.prototype.CreateStorage = function (dobj, propd) {
                return {
                    OwnerNode: dobj.XamlNode,
                    Property: propd,
                    Precedence: Providers.PropertyPrecedence.DefaultValue,
                    Animations: undefined,
                    Local: undefined,
                    LocalStyleValue: undefined,
                    ImplicitStyleValue: undefined,
                    InheritedValue: undefined,
                    PropListeners: undefined
                };
            };
            DataContextStore.prototype.OnPropertyChanged = function (storage, effectivePrecedence, oldValue, newValue) {
                var args = _super.prototype.OnPropertyChanged.call(this, storage, effectivePrecedence, oldValue, newValue);
                if (args)
                    storage.OwnerNode._DataContextPropertyChanged(storage.Precedence < Providers.PropertyPrecedence.InheritedDataContext, args);
                return args;
            };
            return DataContextStore;
        })(Providers.PropertyStore);
        Providers.DataContextStore = DataContextStore;
        DataContextStore.Instance = new DataContextStore();
    })(Fayde.Providers || (Fayde.Providers = {}));
    var Providers = Fayde.Providers;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Providers) {
        var ImmutableStore = (function (_super) {
            __extends(ImmutableStore, _super);
            function ImmutableStore() {
                _super.apply(this, arguments);
            }
            ImmutableStore.prototype.GetValue = function (storage) {
                return storage.Local;
            };
            ImmutableStore.prototype.GetValuePrecedence = function (storage) {
                return Providers.PropertyPrecedence.LocalValue;
            };
            ImmutableStore.prototype.SetLocalValue = function (storage, newValue) {
                console.warn("Trying to set value for immutable property.");
            };
            ImmutableStore.prototype.ClearValue = function (storage) {
                console.warn("Trying to clear value for immutable property.");
            };
            ImmutableStore.prototype.ListenToChanged = function (target, propd, func, closure) {
                return {
                    Property: propd,
                    OnPropertyChanged: function (sender, args) {
                    },
                    Detach: function () {
                    }
                };
            };
            ImmutableStore.prototype.Clone = function (dobj, sourceStorage) {
                if (sourceStorage.Local instanceof Fayde.XamlObjectCollection) {
                    var newStorage = Fayde.Providers.GetStorage(dobj, sourceStorage.Property);
                    var newColl = newStorage.Local;
                    newColl.CloneCore(sourceStorage.Local);
                    var anims = newStorage.Animations = sourceStorage.Animations;
                    if (anims) {
                        for (var i = 0; i < anims.length; i++) {
                            anims[i].PropStorage = newStorage;
                        }
                    }
                    return newStorage;
                } else {
                    console.warn("Cloning Immutable improperly");
                    return _super.prototype.Clone.call(this, dobj, sourceStorage);
                }
            };
            return ImmutableStore;
        })(Providers.PropertyStore);
        Providers.ImmutableStore = ImmutableStore;
        ImmutableStore.Instance = new ImmutableStore();
    })(Fayde.Providers || (Fayde.Providers = {}));
    var Providers = Fayde.Providers;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Providers) {
        var InheritedStore = (function (_super) {
            __extends(InheritedStore, _super);
            function InheritedStore() {
                _super.apply(this, arguments);
            }
            InheritedStore.prototype.GetValue = function (storage) {
                var val;
                if ((val = storage.Local) !== undefined)
                    return val;
                if ((val = storage.LocalStyleValue) !== undefined)
                    return val;
                if ((val = storage.ImplicitStyleValue) !== undefined)
                    return val;
                if ((val = storage.InheritedValue) !== undefined)
                    return val;
                return storage.Property.DefaultValue;
            };
            InheritedStore.prototype.GetValuePrecedence = function (storage) {
                var prec = _super.prototype.GetValuePrecedence.call(this, storage);
                if (prec < Providers.PropertyPrecedence.Inherited)
                    return prec;
                if (storage.InheritedValue !== undefined)
                    return Providers.PropertyPrecedence.Inherited;
                return Providers.PropertyPrecedence.DefaultValue;
            };
            InheritedStore.prototype.OnPropertyChanged = function (storage, effectivePrecedence, oldValue, newValue) {
                var args = _super.prototype.OnPropertyChanged.call(this, storage, effectivePrecedence, oldValue, newValue);
                if (effectivePrecedence <= Providers.PropertyPrecedence.Inherited)
                    this.Propagate(storage.OwnerNode, storage.Property, newValue);
                return args;
            };
            InheritedStore.prototype.CreateStorage = function (dobj, propd) {
                return {
                    OwnerNode: dobj.XamlNode,
                    Property: propd,
                    Precedence: Providers.PropertyPrecedence.DefaultValue,
                    Animations: undefined,
                    Local: undefined,
                    LocalStyleValue: undefined,
                    ImplicitStyleValue: undefined,
                    InheritedValue: undefined,
                    PropListeners: undefined
                };
            };
            InheritedStore.PropagateInheritedOnAdd = function (dobj, subtreeNode) {
                var destination = subtreeNode.XObject;
                var store = InheritedStore.Instance;
                var arr = (destination)._PropertyStorage;
                var storage;
                var allProps = Fayde.InheritableOwner.AllInheritedProperties;
                var len = allProps.length;
                var propd;
                var newValue;
                var sourceNode;
                for (var i = 0; i < len; i++) {
                    propd = allProps[i];
                    sourceNode = dobj.XamlNode;
                    while (sourceNode && !((sourceNode.XObject).IsInheritable(propd))) {
                        sourceNode = sourceNode.ParentNode;
                    }
                    if (!sourceNode)
                        continue;
                    newValue = (sourceNode.XObject).GetValue(propd);
                    if (newValue === propd.DefaultValue)
                        continue;
                    storage = arr[propd._ID];
                    if (!storage)
                        storage = arr[propd._ID] = store.CreateStorage(destination, propd);
                    if (!store.SetInheritedValue(subtreeNode, propd, newValue))
                        store.Propagate(subtreeNode, propd, newValue);
                }
            };
            InheritedStore.ClearInheritedOnRemove = function (dobj, subtreeNode) {
                var store = InheritedStore.Instance;
                var allProps = Fayde.InheritableOwner.AllInheritedProperties;
                var len = allProps.length;
                var propd;
                for (var i = 0; i < len; i++) {
                    propd = allProps[i];
                    if (!store.SetInheritedValue(subtreeNode, propd, undefined))
                        store.Propagate(subtreeNode, propd, undefined);
                }
            };
            InheritedStore.prototype.Propagate = function (ownerNode, propd, newValue) {
                var enumerator = ownerNode.GetInheritedEnumerator();
                var uin;
                while (enumerator.MoveNext()) {
                    uin = enumerator.Current;
                    if (!this.SetInheritedValue(uin, propd, newValue))
                        this.Propagate(uin, propd, newValue);
                }
            };
            InheritedStore.prototype.SetInheritedValue = function (don, propd, newValue) {
                var dobj = don.XObject;
                if (!(dobj).IsInheritable(propd))
                    return false;
                var storage = Providers.GetStorage(dobj, propd);
                if (storage.Precedence < Providers.PropertyPrecedence.Inherited) {
                    storage.InheritedValue = newValue;
                    return true;
                }
                var oldValue = storage.InheritedValue;
                if (oldValue === undefined)
                    oldValue = propd.DefaultValue;
                storage.InheritedValue = newValue;
                storage.Precedence = Providers.PropertyPrecedence.Inherited;
                this.OnPropertyChanged(storage, Providers.PropertyPrecedence.Inherited, oldValue, newValue);
                return true;
            };
            return InheritedStore;
        })(Providers.PropertyStore);
        Providers.InheritedStore = InheritedStore;
        InheritedStore.Instance = new InheritedStore();
    })(Fayde.Providers || (Fayde.Providers = {}));
    var Providers = Fayde.Providers;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Providers) {
        var IsEnabledStore = (function (_super) {
            __extends(IsEnabledStore, _super);
            function IsEnabledStore() {
                _super.apply(this, arguments);
            }
            IsEnabledStore.prototype.GetValue = function (storage) {
                if (storage.InheritedValue === false)
                    return false;
                return _super.prototype.GetValue.call(this, storage);
            };
            IsEnabledStore.prototype.GetValuePrecedence = function (storage) {
                if (storage.InheritedValue === false)
                    return Providers.PropertyPrecedence.IsEnabled;
                return _super.prototype.GetValuePrecedence.call(this, storage);
            };
            IsEnabledStore.prototype.SetLocalValue = function (storage, newValue) {
                var oldValue = storage.Local;
                storage.Local = newValue;
                if (oldValue === newValue || storage.InheritedValue === false)
                    return;
                this.OnPropertyChanged(storage, Providers.PropertyPrecedence.LocalValue, oldValue, newValue);
            };
            IsEnabledStore.prototype.OnPropertyChanged = function (storage, effectivePrecedence, oldValue, newValue) {
                var args = _super.prototype.OnPropertyChanged.call(this, storage, effectivePrecedence, oldValue, newValue);
                storage.OwnerNode.OnIsEnabledChanged(oldValue, newValue);
                return args;
            };
            IsEnabledStore.prototype.CreateStorage = function (dobj, propd) {
                return {
                    OwnerNode: dobj.XamlNode,
                    Property: propd,
                    Precedence: Providers.PropertyPrecedence.DefaultValue,
                    InheritedValue: true,
                    Animations: undefined,
                    Local: undefined,
                    LocalStyleValue: undefined,
                    ImplicitStyleValue: undefined,
                    PropListeners: undefined
                };
            };
            IsEnabledStore.prototype.EmitInheritedChanged = function (storage, newInherited) {
                var oldInherited = storage.InheritedValue;
                if (newInherited !== false) {
                    storage.Precedence = _super.prototype.GetValuePrecedence.call(this, storage);
                    storage.InheritedValue = true;
                } else {
                    storage.InheritedValue = false;
                }
                if (oldInherited === newInherited)
                    return;
                this.OnPropertyChanged(storage, Providers.PropertyPrecedence.IsEnabled, oldInherited, newInherited);
            };
            IsEnabledStore.EmitInheritedChanged = function (cn, value) {
                var propd = Fayde.Controls.Control.IsEnabledProperty;
                var storage = Fayde.Providers.GetStorage(cn.XObject, propd);
                (propd.Store).EmitInheritedChanged(storage, value);
            };
            return IsEnabledStore;
        })(Providers.PropertyStore);
        Providers.IsEnabledStore = IsEnabledStore;
        IsEnabledStore.Instance = new IsEnabledStore();
    })(Fayde.Providers || (Fayde.Providers = {}));
    var Providers = Fayde.Providers;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Data) {
        Data.IValueConverter_ = Fayde.RegisterInterface("IValueConverter");
        var Binding = (function () {
            function Binding(path) {
                this._IsSealed = false;
                this._StringFormat = undefined;
                this._FallbackValue = undefined;
                this._TargetNullValue = undefined;
                this._BindsDirectlyToSource = false;
                this._Mode = Data.BindingMode.OneWay;
                this._NotifyOnValidationError = false;
                this._UpdateSourceTrigger = Data.UpdateSourceTrigger.Default;
                this._ValidatesOnExceptions = false;
                this._ValidatesOnDataErrors = false;
                this._ValidatesOnNotifyDataErrors = true;
                if (!path)
                    path = "";
                this._Path = new Data.PropertyPath(path);
            }
            Object.defineProperty(Binding.prototype, "BindsDirectlyToSource", {
                get: function () {
                    return this._BindsDirectlyToSource;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._BindsDirectlyToSource = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "Converter", {
                get: function () {
                    return this._Converter;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._Converter = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "ConverterParameter", {
                get: function () {
                    return this._ConverterParameter;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._ConverterParameter = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "ConverterCulture", {
                get: function () {
                    return this._ConverterCulture;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._ConverterCulture = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "ElementName", {
                get: function () {
                    return this._ElementName;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._ElementName = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "Mode", {
                get: function () {
                    return this._Mode;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._Mode = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "NotifyOnValidationError", {
                get: function () {
                    return this._NotifyOnValidationError;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._NotifyOnValidationError = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "RelativeSource", {
                get: function () {
                    return this._RelativeSource;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._RelativeSource = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "Path", {
                get: function () {
                    return this._Path;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._Path = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "Source", {
                get: function () {
                    return this._Source;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._Source = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "UpdateSourceTrigger", {
                get: function () {
                    return this._UpdateSourceTrigger;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._UpdateSourceTrigger = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "ValidatesOnExceptions", {
                get: function () {
                    return this._ValidatesOnExceptions;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._ValidatesOnExceptions = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "ValidatesOnDataErrors", {
                get: function () {
                    return this._ValidatesOnDataErrors;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._ValidatesOnDataErrors = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "ValidatesOnNotifyDataErrors", {
                get: function () {
                    return this._ValidatesOnNotifyDataErrors;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._ValidatesOnNotifyDataErrors = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "StringFormat", {
                get: function () {
                    return this._StringFormat;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._StringFormat = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "FallbackValue", {
                get: function () {
                    return this._FallbackValue;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._FallbackValue = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Binding.prototype, "TargetNullValue", {
                get: function () {
                    return this._TargetNullValue;
                },
                set: function (value) {
                    this.CheckSealed();
                    this._TargetNullValue = value;
                },
                enumerable: true,
                configurable: true
            });
            Binding.prototype.CheckSealed = function () {
                if (this._IsSealed)
                    throw new InvalidOperationException("The Binding cannot be changed after it has been used.");
            };
            Binding.prototype.Seal = function () {
                this._IsSealed = true;
            };
            Binding.prototype.Transmute = function (ctx) {
                return new Fayde.Data.BindingExpression(this, ctx.Owner, ctx.Property);
            };
            return Binding;
        })();
        Data.Binding = Binding;
        Fayde.RegisterType(Binding, {
            Name: "Binding",
            Namespace: "Fayde.Data",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Data) {
        Data.ICollectionView_ = Fayde.RegisterInterface("ICollectionView");
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Input) {
        Input.ICommand_ = Fayde.RegisterInterface("ICommand");
    })(Fayde.Input || (Fayde.Input = {}));
    var Input = Fayde.Input;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Navigation) {
        var NavigationService = (function () {
            function NavigationService() {
                var _this = this;
                this.LocationChanged = new MulticastEvent();
                this.Href = window.location.href;
                this.Hash = window.location.hash;
                if (this.Hash) {
                    this.Hash = this.Hash.substr(1);
                    this.Href = this.Href.substring(0, this.Href.indexOf('#'));
                }
                window.onhashchange = function () {
                    return _this._HandleFragmentChange();
                };
            }
            NavigationService.prototype._HandleFragmentChange = function () {
                this.Hash = window.location.hash;
                if (this.Hash) {
                    this.Hash = this.Hash.substr(1);
                }
                this.LocationChanged.Raise(this, EventArgs.Empty);
            };
            return NavigationService;
        })();
        Navigation.NavigationService = NavigationService;
        Fayde.RegisterType(NavigationService, {
            Name: "NavigationService",
            Namespace: "Fayde.Navigation",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Navigation || (Fayde.Navigation = {}));
    var Navigation = Fayde.Navigation;
})(Fayde || (Fayde = {}));

var Color = (function () {
    function Color() {
        this.R = 0;
        this.G = 0;
        this.B = 0;
        this.A = 1.0;
    }
    Color.prototype.Add = function (color2) {
        var c = new Color();
        c.R = this.R + color2.R;
        c.G = this.G + color2.G;
        c.B = this.B + color2.B;
        c.A = this.A + color2.A;
        return c;
    };
    Color.prototype.Subtract = function (color2) {
        var c = new Color();
        c.R = this.R - color2.R;
        c.G = this.G - color2.G;
        c.B = this.B - color2.B;
        c.A = this.A - color2.A;
        return c;
    };
    Color.prototype.Multiply = function (factor) {
        var c = new Color();
        c.R = this.R * factor;
        c.G = this.G * factor;
        c.B = this.B * factor;
        c.A = this.A * factor;
        return c;
    };
    Color.prototype.Equals = function (other) {
        return this.R === other.R && this.G === other.G && this.B === other.B && this.A === other.A;
    };
    Color.prototype.toString = function () {
        return "rgba(" + this.R.toString() + "," + this.G.toString() + "," + this.B.toString() + "," + this.A.toString() + ")";
    };
    Color.prototype.ToHexStringNoAlpha = function () {
        return "#" + this.R.toString(16) + this.G.toString(16) + this.B.toString(16);
    };
    Color.prototype.Clone = function () {
        return Color.FromRgba(this.R, this.G, this.B, this.A);
    };
    Color.LERP = function (start, end, p) {
        var c = new Color();
        c.R = start.R + (end.R - start.R) * p;
        c.G = start.G + (end.G - start.G) * p;
        c.B = start.B + (end.B - start.B) * p;
        c.A = start.A + (end.A - start.A) * p;
        return c;
    };
    Color.FromRgba = function (r, g, b, a) {
        var c = new Color();
        c.R = r;
        c.G = g;
        c.B = b;
        c.A = a;
        return c;
    };
    Color.FromHex = function (hex) {
        var match;
        var c = new Color();
        if ((match = Color.__AlphaRegex.exec(hex)) != null) {
            c.A = parseInt(match[1], 16) / 255.0;
            c.R = parseInt(match[2], 16);
            c.G = parseInt(match[3], 16);
            c.B = parseInt(match[4], 16);
        } else if ((match = Color.__NoAlphaRegex.exec(hex)) != null) {
            c.A = 1.0;
            c.R = parseInt(match[1], 16);
            c.G = parseInt(match[2], 16);
            c.B = parseInt(match[3], 16);
        }
        return c;
    };
    Color.__NoAlphaRegex = /#([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}/;
    Color.__AlphaRegex = /#([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}([0-9a-fA-F][0-9a-fA-F]){1}/;

    Color.KnownColors = {
        AliceBlue: Color.FromHex("#FFF0F8FF"),
        AntiqueWhite: Color.FromHex("#FFFAEBD7"),
        Aqua: Color.FromHex("#FF00FFFF"),
        Aquamarine: Color.FromHex("#FF7FFFD4"),
        Azure: Color.FromHex("#FFF0FFFF"),
        Beige: Color.FromHex("#FFF5F5DC"),
        Bisque: Color.FromHex("#FFFFE4C4"),
        Black: Color.FromHex("#FF000000"),
        BlanchedAlmond: Color.FromHex("#FFFFEBCD"),
        Blue: Color.FromHex("#FF0000FF"),
        BlueViolet: Color.FromHex("#FF8A2BE2"),
        Brown: Color.FromHex("#FFA52A2A"),
        BurlyWood: Color.FromHex("#FFDEB887"),
        CadetBlue: Color.FromHex("#FF5F9EA0"),
        Chartreuse: Color.FromHex("#FF7FFF00"),
        Chocolate: Color.FromHex("#FFD2691E"),
        Coral: Color.FromHex("#FFFF7F50"),
        CornflowerBlue: Color.FromHex("#FF6495ED"),
        Cornsilk: Color.FromHex("#FFFFF8DC"),
        Crimson: Color.FromHex("#FFDC143C"),
        Cyan: Color.FromHex("#FF00FFFF"),
        DarkBlue: Color.FromHex("#FF00008B"),
        DarkCyan: Color.FromHex("#FF008B8B"),
        DarkGoldenrod: Color.FromHex("#FFB8860B"),
        DarkGray: Color.FromHex("#FFA9A9A9"),
        DarkGreen: Color.FromHex("#FF006400"),
        DarkKhaki: Color.FromHex("#FFBDB76B"),
        DarkMagenta: Color.FromHex("#FF8B008B"),
        DarkOliveGreen: Color.FromHex("#FF556B2F"),
        DarkOrange: Color.FromHex("#FFFF8C00"),
        DarkOrchid: Color.FromHex("#FF9932CC"),
        DarkRed: Color.FromHex("#FF8B0000"),
        DarkSalmon: Color.FromHex("#FFE9967A"),
        DarkSeaGreen: Color.FromHex("#FF8FBC8F"),
        DarkSlateBlue: Color.FromHex("#FF483D8B"),
        DarkSlateGray: Color.FromHex("#FF2F4F4F"),
        DarkTurquoise: Color.FromHex("#FF00CED1"),
        DarkViolet: Color.FromHex("#FF9400D3"),
        DeepPink: Color.FromHex("#FFFF1493"),
        DeepSkyBlue: Color.FromHex("#FF00BFFF"),
        DimGray: Color.FromHex("#FF696969"),
        DodgerBlue: Color.FromHex("#FF1E90FF"),
        Firebrick: Color.FromHex("#FFB22222"),
        FloralWhite: Color.FromHex("#FFFFFAF0"),
        ForestGreen: Color.FromHex("#FF228B22"),
        Fuchsia: Color.FromHex("#FFFF00FF"),
        Gainsboro: Color.FromHex("#FFDCDCDC"),
        GhostWhite: Color.FromHex("#FFF8F8FF"),
        Gold: Color.FromHex("#FFFFD700"),
        Goldenrod: Color.FromHex("#FFDAA520"),
        Gray: Color.FromHex("#FF808080"),
        Green: Color.FromHex("#FF008000"),
        GreenYellow: Color.FromHex("#FFADFF2F"),
        Honeydew: Color.FromHex("#FFF0FFF0"),
        HotPink: Color.FromHex("#FFFF69B4"),
        IndianRed: Color.FromHex("#FFCD5C5C"),
        Indigo: Color.FromHex("#FF4B0082"),
        Ivory: Color.FromHex("#FFFFFFF0"),
        Khaki: Color.FromHex("#FFF0E68C"),
        Lavender: Color.FromHex("#FFE6E6FA"),
        LavenderBlush: Color.FromHex("#FFFFF0F5"),
        LawnGreen: Color.FromHex("#FF7CFC00"),
        LemonChiffon: Color.FromHex("#FFFFFACD"),
        LightBlue: Color.FromHex("#FFADD8E6"),
        LightCoral: Color.FromHex("#FFF08080"),
        LightCyan: Color.FromHex("#FFE0FFFF"),
        LightGoldenrodYellow: Color.FromHex("#FFFAFAD2"),
        LightGray: Color.FromHex("#FFD3D3D3"),
        LightGreen: Color.FromHex("#FF90EE90"),
        LightPink: Color.FromHex("#FFFFB6C1"),
        LightSalmon: Color.FromHex("#FFFFA07A"),
        LightSeaGreen: Color.FromHex("#FF20B2AA"),
        LightSkyBlue: Color.FromHex("#FF87CEFA"),
        LightSlateGray: Color.FromHex("#FF778899"),
        LightSteelBlue: Color.FromHex("#FFB0C4DE"),
        LightYellow: Color.FromHex("#FFFFFFE0"),
        Lime: Color.FromHex("#FF00FF00"),
        LimeGreen: Color.FromHex("#FF32CD32"),
        Linen: Color.FromHex("#FFFAF0E6"),
        Magenta: Color.FromHex("#FFFF00FF"),
        Maroon: Color.FromHex("#FF800000"),
        MediumAquamarine: Color.FromHex("#FF66CDAA"),
        MediumBlue: Color.FromHex("#FF0000CD"),
        MediumOrchid: Color.FromHex("#FFBA55D3"),
        MediumPurple: Color.FromHex("#FF9370DB"),
        MediumSeaGreen: Color.FromHex("#FF3CB371"),
        MediumSlateBlue: Color.FromHex("#FF7B68EE"),
        MediumSpringGreen: Color.FromHex("#FF00FA9A"),
        MediumTurquoise: Color.FromHex("#FF48D1CC"),
        MediumVioletRed: Color.FromHex("#FFC71585"),
        MidnightBlue: Color.FromHex("#FF191970"),
        MintCream: Color.FromHex("#FFF5FFFA"),
        MistyRose: Color.FromHex("#FFFFE4E1"),
        Moccasin: Color.FromHex("#FFFFE4B5"),
        NavajoWhite: Color.FromHex("#FFFFDEAD"),
        Navy: Color.FromHex("#FF000080"),
        OldLace: Color.FromHex("#FFFDF5E6"),
        Olive: Color.FromHex("#FF808000"),
        OliveDrab: Color.FromHex("#FF6B8E23"),
        Orange: Color.FromHex("#FFFFA500"),
        OrangeRed: Color.FromHex("#FFFF4500"),
        Orchid: Color.FromHex("#FFDA70D6"),
        PaleGoldenrod: Color.FromHex("#FFEEE8AA"),
        PaleGreen: Color.FromHex("#FF98FB98"),
        PaleTurquoise: Color.FromHex("#FFAFEEEE"),
        PaleVioletRed: Color.FromHex("#FFDB7093"),
        PapayaWhip: Color.FromHex("#FFFFEFD5"),
        PeachPuff: Color.FromHex("#FFFFDAB9"),
        Peru: Color.FromHex("#FFCD853F"),
        Pink: Color.FromHex("#FFFFC0CB"),
        Plum: Color.FromHex("#FFDDA0DD"),
        PowderBlue: Color.FromHex("#FFB0E0E6"),
        Purple: Color.FromHex("#FF800080"),
        Red: Color.FromHex("#FFFF0000"),
        RosyBrown: Color.FromHex("#FFBC8F8F"),
        RoyalBlue: Color.FromHex("#FF4169E1"),
        SaddleBrown: Color.FromHex("#FF8B4513"),
        Salmon: Color.FromHex("#FFFA8072"),
        SandyBrown: Color.FromHex("#FFF4A460"),
        SeaGreen: Color.FromHex("#FF2E8B57"),
        SeaShell: Color.FromHex("#FFFFF5EE"),
        Sienna: Color.FromHex("#FFA0522D"),
        Silver: Color.FromHex("#FFC0C0C0"),
        SkyBlue: Color.FromHex("#FF87CEEB"),
        SlateBlue: Color.FromHex("#FF6A5ACD"),
        SlateGray: Color.FromHex("#FF708090"),
        Snow: Color.FromHex("#FFFFFAFA"),
        SpringGreen: Color.FromHex("#FF00FF7F"),
        SteelBlue: Color.FromHex("#FF4682B4"),
        Tan: Color.FromHex("#FFD2B48C"),
        Teal: Color.FromHex("#FF008080"),
        Thistle: Color.FromHex("#FFD8BFD8"),
        Tomato: Color.FromHex("#FFFF6347"),
        Transparent: Color.FromHex("#00FFFFFF"),
        Turquoise: Color.FromHex("#FF40E0D0"),
        Violet: Color.FromHex("#FFEE82EE"),
        Wheat: Color.FromHex("#FFF5DEB3"),
        White: Color.FromHex("#FFFFFFFF"),
        WhiteSmoke: Color.FromHex("#FFF5F5F5"),
        Yellow: Color.FromHex("#FFFFFF00"),
        YellowGreen: Color.FromHex("#FF9ACD32")
    };
    return Color;
})();
Fayde.RegisterType(Color, {
    Name: "Color",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNS
});
Fayde.RegisterTypeConverter(Color, function (val) {
    if (!val)
        return undefined;
    val = val.toString();
    if (val[0] !== "#") {
        var color = Color.KnownColors[val];
        if (!color)
            throw new NotSupportedException("Unknown Color: " + val);
        return color;
    }
    return Color.FromHex(val);
});

var CornerRadius = (function () {
    function CornerRadius(topLeft, topRight, bottomRight, bottomLeft) {
        this.TopLeft = topLeft == null ? 0 : topLeft;
        this.TopRight = topRight == null ? 0 : topRight;
        this.BottomRight = bottomRight == null ? 0 : bottomRight;
        this.BottomLeft = bottomLeft == null ? 0 : bottomLeft;
    }
    CornerRadius.prototype.IsZero = function () {
        return this.TopLeft === 0 && this.TopRight === 0 && this.BottomRight === 0 && this.BottomLeft === 0;
    };
    CornerRadius.prototype.Equals = function (other) {
        return this.TopLeft === other.TopLeft && this.TopRight === other.TopRight && this.BottomRight === other.BottomRight && this.BottomLeft === other.BottomLeft;
    };
    CornerRadius.prototype.toString = function () {
        return "(" + this.TopLeft + ", " + this.TopRight + ", " + this.BottomRight + ", " + this.BottomLeft + ")";
    };
    CornerRadius.prototype.Clone = function () {
        return new CornerRadius(this.TopLeft, this.TopRight, this.BottomRight, this.BottomLeft);
    };
    return CornerRadius;
})();
Fayde.RegisterType(CornerRadius, {
    Name: "CornerRadius",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
Fayde.RegisterTypeConverter(CornerRadius, function (val) {
    if (!val)
        return new CornerRadius();
    if (typeof val === "number")
        return new CornerRadius(val, val, val, val);
    var tokens = val.toString().split(",");
    var topLeft, topRight, bottomRight, bottomLeft;
    if (tokens.length === 1) {
        topLeft = topRight = bottomRight = bottomLeft = parseFloat(tokens[0]);
    } else if (tokens.length === 4) {
        topLeft = parseFloat(tokens[0]);
        topRight = parseFloat(tokens[1]);
        bottomRight = parseFloat(tokens[2]);
        bottomLeft = parseFloat(tokens[3]);
    } else {
        throw new Exception("Cannot parse CornerRadius value '" + val + "'");
    }
    return new CornerRadius(topLeft, topRight, bottomRight, bottomLeft);
});

var DurationType;
(function (DurationType) {
    DurationType[DurationType["Automatic"] = 0] = "Automatic";
    DurationType[DurationType["Forever"] = 1] = "Forever";
    DurationType[DurationType["TimeSpan"] = 2] = "TimeSpan";
})(DurationType || (DurationType = {}));
var Duration = (function () {
    function Duration(ts) {
        this._Type = DurationType.TimeSpan;
        this._TimeSpan = ts;
    }
    Duration.prototype.Clone = function () {
        var dur = new Duration();
        dur._Type = this._Type;
        dur._TimeSpan = this._TimeSpan;
        return dur;
    };
    Object.defineProperty(Duration.prototype, "Type", {
        get: function () {
            return this._Type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "TimeSpan", {
        get: function () {
            if (this._Type === DurationType.TimeSpan)
                return this._TimeSpan;
            throw new InvalidOperationException("Duration does not have a TimeSpan.");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "HasTimeSpan", {
        get: function () {
            return this._Type === DurationType.TimeSpan;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "IsForever", {
        get: function () {
            return this._Type === DurationType.Forever;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "IsAutomatic", {
        get: function () {
            return this._Type === DurationType.Automatic;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Duration.prototype, "IsZero", {
        get: function () {
            return this._Type === DurationType.TimeSpan && this._TimeSpan.Ticks === 0;
        },
        enumerable: true,
        configurable: true
    });
    Duration.Automatic = (function () {
        var d = new Duration();
        (d)._Type = DurationType.Automatic;
        return d;
    })();
    Duration.Forever = (function () {
        var d = new Duration();
        (d)._Type = DurationType.Forever;
        return d;
    })();
    return Duration;
})();
Fayde.RegisterType(Duration, {
    Name: "Duration",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
Fayde.RegisterTypeConverter(Duration, function (val) {
    if (!val || val.toString().toLowerCase() === "automatic")
        return Duration.Automatic;
    if (val.toString().toLowerCase() === "forever")
        return Duration.Forever;
    var ts = Fayde.ConvertAnyToType(val, TimeSpan);
    return new Duration(ts);
});

var KeyTime = (function () {
    function KeyTime() {
        this._IsPaced = false;
        this._IsUniform = false;
        this._TimeSpan = null;
        this._Percent = 0;
        this.IsValid = true;
    }
    KeyTime.CreateUniform = function () {
        var kt = new KeyTime();
        kt._IsUniform = true;
        return kt;
    };
    KeyTime.CreateTimeSpan = function (ts) {
        var kt = new KeyTime();
        kt._TimeSpan = ts;
        return kt;
    };
    KeyTime.prototype.Clone = function () {
        var kt = new KeyTime();
        kt._TimeSpan = this._TimeSpan;
        kt._IsPaced = this._IsPaced;
        kt._IsUniform = this._IsUniform;
        kt._Percent = this._Percent;
        return kt;
    };
    Object.defineProperty(KeyTime.prototype, "IsPaced", {
        get: function () {
            return this._IsPaced;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyTime.prototype, "IsUniform", {
        get: function () {
            return this._IsUniform;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyTime.prototype, "HasTimeSpan", {
        get: function () {
            return this._TimeSpan != null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyTime.prototype, "TimeSpan", {
        get: function () {
            return this._TimeSpan;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyTime.prototype, "HasPercent", {
        get: function () {
            return this._Percent != null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyTime.prototype, "Percent", {
        get: function () {
            return this._Percent;
        },
        enumerable: true,
        configurable: true
    });
    return KeyTime;
})();
Fayde.RegisterType(KeyTime, {
    Name: "KeyTime",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
Fayde.RegisterTypeConverter(KeyTime, function (val) {
    if (!val || val.toString().toLowerCase() === "uniform")
        return KeyTime.CreateUniform();
    var ts = Fayde.ConvertAnyToType(val, TimeSpan);
    return KeyTime.CreateTimeSpan(ts);
});

var Length = (function () {
    function Length() {
    }
    return Length;
})();
Fayde.RegisterType(Length, {
    Name: "Length",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
Fayde.RegisterTypeConverter(Length, function (val) {
    if (!val || val.toString().toLowerCase() === "auto")
        return Number.NaN;
    if (typeof val === "number")
        return val;
    return parseFloat(val.toString());
});

var Point = (function () {
    function Point(x, y) {
        this.X = x == null ? 0 : x;
        this.Y = y == null ? 0 : y;
    }
    Point.prototype.toString = function () {
        return "X=" + this.X.toString() + ";Y=" + this.Y.toString();
    };
    Point.prototype.Equals = function (other) {
        return this.X === other.X && this.Y === other.Y;
    };
    Point.prototype.Clone = function () {
        return new Point(this.X, this.Y);
    };
    Point.Equals = function (p1, p2) {
        if (p1 == null)
            return p2 == null;
        if (p2 == null)
            return false;
        return p1.X === p2.X && p1.Y === p2.Y;
    };
    Point.LERP = function (start, end, p) {
        var x = start.X + (end.X - start.X) * p;
        var y = start.Y + (end.Y - start.Y) * p;
        return new Point(x, y);
    };
    return Point;
})();
Fayde.RegisterType(Point, {
    Name: "Point",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
Fayde.RegisterTypeConverter(Point, function (val) {
    if (!val)
        return new Point();
    var tokens = val.toString().split(",");
    if (tokens.length === 2) {
        var x = parseFloat(tokens[0]);
        var y = parseFloat(tokens[1]);
        return new Point(x, y);
    }
    throw new Exception("Cannot parse Point value '" + val + "'");
});

var Thickness = (function () {
    function Thickness(left, top, right, bottom) {
        this.Left = left == null ? 0 : left;
        this.Top = top == null ? 0 : top;
        this.Right = right == null ? 0 : right;
        this.Bottom = bottom == null ? 0 : bottom;
    }
    Thickness.prototype.Plus = function (thickness2) {
        var t = new Thickness();
        t.Left = this.Left + thickness2.Left;
        t.Right = this.Right + thickness2.Right;
        t.Top = this.Top + thickness2.Top;
        t.Bottom = this.Bottom + thickness2.Bottom;
        return t;
    };
    Thickness.prototype.IsEmpty = function () {
        return this.Left == 0 && this.Top == 0 && this.Right == 0 && this.Bottom == 0;
    };
    Thickness.prototype.IsBalanced = function () {
        return this.Left === this.Top && this.Left === this.Right && this.Left === this.Bottom;
    };
    Thickness.prototype.toString = function () {
        return "(" + this.Left + ", " + this.Top + ", " + this.Right + ", " + this.Bottom + ")";
    };
    Thickness.prototype.Clone = function () {
        return new Thickness(this.Left, this.Top, this.Right, this.Bottom);
    };
    Thickness.Equals = function (thickness1, thickness2) {
        if (thickness1 == null && thickness2 == null)
            return true;
        if (thickness1 == null || thickness2 == null)
            return false;
        return thickness1.Left === thickness2.Left && thickness1.Top === thickness2.Top && thickness1.Right === thickness2.Right && thickness1.Bottom === thickness2.Bottom;
    };
    return Thickness;
})();
Fayde.RegisterType(Thickness, {
    Name: "Thickness",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
Fayde.RegisterTypeConverter(Thickness, function (val) {
    if (!val)
        return new Thickness();
    if (typeof val === "number")
        return new Thickness(val, val, val, val);
    if (val instanceof Thickness) {
        var t = val;
        return new Thickness(t.Left, t.Top, t.Right, t.Bottom);
    }
    var tokens = val.toString().split(",");
    var left, top, right, bottom;
    if (tokens.length === 1) {
        left = top = right = bottom = parseFloat(tokens[0]);
    } else if (tokens.length === 2) {
        left = right = parseFloat(tokens[0]);
        top = bottom = parseFloat(tokens[1]);
    } else if (tokens.length === 4) {
        left = parseFloat(tokens[0]);
        top = parseFloat(tokens[1]);
        right = parseFloat(tokens[2]);
        bottom = parseFloat(tokens[3]);
    } else {
        throw new Exception("Cannot parse Thickness value '" + val + "'");
    }
    return new Thickness(left, top, right, bottom);
});

var TimeSpan = (function () {
    function TimeSpan() {
        this._Ticks = 0;
    }
    TimeSpan.FromTicks = function (ticks) {
        var ts = new TimeSpan();
        ts._Ticks = ticks;
        return ts;
    };
    TimeSpan.FromArgs = function (days, hours, minutes, seconds, milliseconds) {
        var ts = new TimeSpan();
        ts._Ticks = (days * TimeSpan._TicksPerDay) + (hours * TimeSpan._TicksPerHour) + (minutes * TimeSpan._TicksPerMinute) + (seconds * TimeSpan._TicksPerSecond) + (milliseconds * TimeSpan._TicksPerMillisecond);
        return ts;
    };
    Object.defineProperty(TimeSpan.prototype, "Days", {
        get: function () {
            return Math.floor(this._Ticks / TimeSpan._TicksPerDay);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "Hours", {
        get: function () {
            var remTicks = this._Ticks % TimeSpan._TicksPerDay;
            return Math.floor(remTicks / TimeSpan._TicksPerHour);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "Minutes", {
        get: function () {
            var remTicks = this._Ticks % TimeSpan._TicksPerDay;
            remTicks = remTicks % TimeSpan._TicksPerHour;
            return Math.floor(remTicks / TimeSpan._TicksPerMinute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "Seconds", {
        get: function () {
            var remTicks = this._Ticks % TimeSpan._TicksPerDay;
            remTicks = remTicks % TimeSpan._TicksPerHour;
            remTicks = remTicks % TimeSpan._TicksPerMinute;
            return Math.floor(remTicks / TimeSpan._TicksPerSecond);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "Milliseconds", {
        get: function () {
            var remTicks = this._Ticks % TimeSpan._TicksPerDay;
            remTicks = remTicks % TimeSpan._TicksPerHour;
            remTicks = remTicks % TimeSpan._TicksPerMinute;
            remTicks = remTicks % TimeSpan._TicksPerSecond;
            return Math.floor(remTicks / TimeSpan._TicksPerMillisecond);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "Ticks", {
        get: function () {
            return this._Ticks;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "TotalDays", {
        get: function () {
            return this._Ticks / TimeSpan._TicksPerDay;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "TotalHours", {
        get: function () {
            return this._Ticks / TimeSpan._TicksPerHour;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "TotalMinutes", {
        get: function () {
            return this._Ticks / TimeSpan._TicksPerMinute;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "TotalSeconds", {
        get: function () {
            return this._Ticks / TimeSpan._TicksPerSecond;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeSpan.prototype, "TotalMilliseconds", {
        get: function () {
            return this._Ticks / TimeSpan._TicksPerMillisecond;
        },
        enumerable: true,
        configurable: true
    });
    TimeSpan.prototype.AddTicks = function (ticks) {
        if (ticks == null)
            return;
        if (isNaN(ticks))
            return;
        this._Ticks += ticks;
    };
    TimeSpan.prototype.AddMilliseconds = function (milliseconds) {
        this.AddTicks(milliseconds * TimeSpan._TicksPerMillisecond);
    };
    TimeSpan.prototype.Add = function (ts2) {
        var ts = new TimeSpan();
        ts._Ticks = this._Ticks + ts2._Ticks;
        return ts;
    };
    TimeSpan.prototype.Subtract = function (ts2) {
        var ts = new TimeSpan();
        ts._Ticks = this._Ticks - ts2._Ticks;
        return ts;
    };
    TimeSpan.prototype.Multiply = function (v) {
        var ts = new TimeSpan();
        ts._Ticks = Math.round(this._Ticks * v);
        return ts;
    };
    TimeSpan.prototype.Divide = function (ts2) {
        var ts = new TimeSpan();
        ts._Ticks = this._Ticks / ts2._Ticks;
        return ts;
    };
    TimeSpan.prototype.CompareTo = function (ts2) {
        if (this._Ticks === ts2._Ticks)
            return 0;
        return (this._Ticks > ts2._Ticks) ? 1 : -1;
    };
    TimeSpan.prototype.IsZero = function () {
        return this._Ticks === 0;
    };
    TimeSpan.prototype.GetJsDelay = function () {
        return this._Ticks * TimeSpan._TicksPerMillisecond;
    };
    TimeSpan._TicksPerMillisecond = 1;
    TimeSpan._TicksPerSecond = 1000;
    TimeSpan._TicksPerMinute = TimeSpan._TicksPerSecond * 60;
    TimeSpan._TicksPerHour = TimeSpan._TicksPerMinute * 60;
    TimeSpan._TicksPerDay = TimeSpan._TicksPerHour * 24;
    return TimeSpan;
})();
Fayde.RegisterType(TimeSpan, {
    Name: "TimeSpan",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
Fayde.RegisterTypeConverter(TimeSpan, function (val) {
    if (typeof val === "number")
        return TimeSpan.FromTicks(val);
    val = val.toString();
    var tokens = val.split(":");
    if (tokens.length === 1) {
        var ticks = parseFloat(val);
        if (!isNaN(ticks))
            return TimeSpan.FromTicks(ticks);
        throw new Exception("Invalid TimeSpan format '" + val + "'.");
    }
    if (tokens.length !== 3)
        throw new Exception("Invalid TimeSpan format '" + val + "'.");
    var days = 0;
    var hours;
    var minutes;
    var seconds;
    var milliseconds = 0;
    var daysplit = tokens[0].split(".");
    if (daysplit.length === 2) {
        days = parseInt(daysplit[0]);
        hours = parseInt(daysplit[1]);
    } else if (daysplit.length === 1) {
        hours = parseInt(daysplit[0]);
    }
    minutes = parseInt(tokens[1]);
    seconds = parseFloat(tokens[2]);
    milliseconds = seconds % 1;
    seconds = seconds - milliseconds;
    milliseconds *= 1000.0;
    return TimeSpan.FromArgs(days, hours, minutes, seconds, milliseconds);
});

var Fayde;
(function (Fayde) {
    Fayde.IEnumerable_ = Fayde.RegisterInterface("IEnumerable");

    Fayde.IEnumerator_ = Fayde.RegisterInterface("IEnumerator");
    var ArrayEx = (function () {
        function ArrayEx() {
        }
        ArrayEx.AsEnumerable = function (arr) {
            return arr;
        };
        ArrayEx.GetEnumerator = function (arr, isReverse) {
            var len = arr.length;
            var e = { MoveNext: undefined, Current: undefined };
            var index;
            if (isReverse) {
                index = len;
                e.MoveNext = function () {
                    index--;
                    if (index < 0) {
                        e.Current = undefined;
                        return false;
                    }
                    e.Current = arr[index];
                    return true;
                };
            } else {
                index = -1;
                e.MoveNext = function () {
                    index++;
                    if (index >= len) {
                        e.Current = undefined;
                        return false;
                    }
                    e.Current = arr[index];
                    return true;
                };
            }
            return e;
        };
        ArrayEx.GetNodeEnumerator = function (arr, isReverse) {
            var len = arr.length;
            var e = { MoveNext: undefined, Current: undefined };
            var index;
            if (isReverse) {
                index = len;
                e.MoveNext = function () {
                    index--;
                    if (index < 0) {
                        e.Current = undefined;
                        return false;
                    }
                    e.Current = arr[index].XamlNode;
                    return true;
                };
            } else {
                index = -1;
                e.MoveNext = function () {
                    index++;
                    if (index >= len) {
                        e.Current = undefined;
                        return false;
                    }
                    e.Current = arr[index].XamlNode;
                    return true;
                };
            }
            return e;
        };
        ArrayEx.RemoveIfContains = function (arr, item) {
            var index = arr.indexOf(item);
            if (index < 0)
                return false;
            arr.splice(index, 1);
            return true;
        };
        ArrayEx.Except = function (arr1, arr2) {
            var cur;
            var rarr = [];
            for (var i = 0; i < arr1.length; i++) {
                cur = arr1[i];
                if (arr2.indexOf(cur) < 0)
                    rarr.push(cur);
            }
            return rarr;
        };
        ArrayEx.Fill = function (arr, index, count, fill) {
            for (var i = index; i < index + count; i++) {
                arr.splice(i, 0, fill);
            }
        };
        ArrayEx.EmptyEnumerator = {
            MoveNext: function () {
                return false;
            },
            Current: undefined
        };
        return ArrayEx;
    })();
    Fayde.ArrayEx = ArrayEx;
})(Fayde || (Fayde = {}));
Object.defineProperty(Array.prototype, "GetEnumerator", {
    value: function (isReverse) {
        return Fayde.ArrayEx.GetEnumerator(this, isReverse);
    },
    enumerable: false
});

var Nullstone = (function () {
    function Nullstone() {
    }
    Nullstone.Equals = function (val1, val2) {
        if (val1 == null && val2 == null)
            return true;
        if (val1 == null || val2 == null)
            return false;
        if (val1 === val2)
            return true;
        if (val1.Equals)
            return val1.Equals(val2);
        return false;
    };
    Nullstone.DoesInheritFrom = function (t, type) {
        var temp = t;
        while (temp && temp !== type) {
            temp = (temp)._BaseClass;
        }
        return temp != null;
    };
    Nullstone.GetPropertyDescriptor = function (obj, name) {
        if (!obj)
            return;
        var type = (obj).constructor;
        var propDesc = Object.getOwnPropertyDescriptor(type.prototype, name);
        if (propDesc)
            return propDesc;
        return Object.getOwnPropertyDescriptor(obj, name);
    };
    Nullstone.HasProperty = function (obj, name) {
        if (!obj)
            return false;
        if (obj.hasOwnProperty(name))
            return true;
        var type = obj.constructor;
        return type.prototype.hasOwnProperty(name);
    };
    Nullstone.ImplementsInterface = function (obj, i) {
        if (!obj)
            return false;
        var curType = obj.constructor;
        if (!curType)
            return false;
        var is;
        do {
            is = curType._Interfaces;
            if (!is)
                continue;
            if (is.indexOf(i) > -1)
                return true;
        } while(curType = curType._BaseClass);
        return false;
    };
    return Nullstone;
})();
function NotImplemented(str) {
    if (window.console && console.warn)
        console.warn("NotImplemented: " + str);
}
function Warn(str) {
    if (window.console && console.warn)
        console.warn(str);
}

var Fayde;
(function (Fayde) {
    (function (Xaml) {
        (function (ResourceType) {
            ResourceType[ResourceType["Script"] = 0] = "Script";
            ResourceType[ResourceType["Xaml"] = 1] = "Xaml";
        })(Xaml.ResourceType || (Xaml.ResourceType = {}));
        var ResourceType = Xaml.ResourceType;

        var XamlResource = (function () {
            function XamlResource(url) {
                this._IsLoaded = false;
                this._Xaml = null;
                this._Error = null;
                Object.defineProperty(this, "Url", { value: url, writable: false });
            }
            Object.defineProperty(XamlResource.prototype, "Document", {
                get: function () {
                    return this._Document;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(XamlResource.prototype, "IsLoaded", {
                get: function () {
                    return this._IsLoaded;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(XamlResource.prototype, "Error", {
                get: function () {
                    return this._Error;
                },
                enumerable: true,
                configurable: true
            });

            XamlResource.prototype.LoadAsync = function (onLoaded) {
                var _this = this;
                if (this._IsLoaded && this._Document) {
                    onLoaded(this);
                    return;
                }
                var request = new Fayde.AjaxRequest(function (result) {
                    _this._Xaml = result.GetData();
                    var parser = new DOMParser();
                    _this._Document = parser.parseFromString(_this._Xaml, "text/xml");
                    _this._IsLoaded = true;
                    onLoaded(_this);
                }, function (error) {
                    _this._IsLoaded = true;
                    console.warn("Could not load xaml resource: " + error.toString());
                    _this._Error = error;
                    onLoaded(_this);
                });
                request.Get(this.Url);
            };
            return XamlResource;
        })();
        var ScriptResource = (function () {
            function ScriptResource(url) {
                this._IsLoaded = false;
                this._Script = null;
                Object.defineProperty(this, "Url", { value: url, writable: false });
            }
            Object.defineProperty(ScriptResource.prototype, "IsLoaded", {
                get: function () {
                    return this._IsLoaded;
                },
                enumerable: true,
                configurable: true
            });

            ScriptResource.prototype.LoadAsync = function (onLoaded) {
                var _this = this;
                if (this._IsLoaded && this._Script) {
                    onLoaded(this);
                    return;
                }
                var script = this._Script = document.createElement("script");
                script.type = "text/javascript";
                script.src = this.Url;
                script.onreadystatechange = function (e) {
                    if (_this._IsLoaded || script.readyState !== "completed")
                        return;
                    _this._IsLoaded = true;
                    onLoaded(_this);
                };
                script.onload = function () {
                    if (_this._IsLoaded)
                        return;
                    _this._IsLoaded = true;
                    onLoaded(_this);
                };
                script.onerror = function (error) {
                    _this._Error = "Could not load script file.";
                    _this._IsLoaded = true;
                    onLoaded(_this);
                };
                var head = document.getElementsByTagName("head")[0];
                head.appendChild(script);
            };
            return ScriptResource;
        })();
        var entireNamespaceName = "$_root_$";
        var xamlresources = [];
        var scriptresources = [];
        function MapResource(type, namespaceURI, localName) {
            var r;
            if (type === ResourceType.Xaml) {
                r = xamlresources;
            } else if (type === ResourceType.Script) {
                r = scriptresources;
            } else {
                return undefined;
            }
            var nsuri = namespaceURI.toLowerCase();
            var names = r[nsuri];
            if (!names)
                return undefined;
            var resource = names[localName];
            if (!resource)
                resource = names[entireNamespaceName];
            return resource;
        }
        Xaml.MapResource = MapResource;
        function RegisterResource(type, url, namespaceURI, localName) {
            var r;
            if (type === ResourceType.Xaml) {
                r = xamlresources;
            } else if (type === ResourceType.Script) {
                r = scriptresources;
            } else {
                return undefined;
            }
            var nsuri = namespaceURI.toLowerCase();
            var names = r[nsuri];
            if (!names)
                names = r[nsuri] = [];
            var res = names[localName];
            if (!res) {
                if (type === ResourceType.Xaml) {
                    names[localName] = res = new XamlResource(url);
                } else if (type === ResourceType.Script) {
                    names[localName] = res = new ScriptResource(url);
                }
            }
            return res;
        }
        Xaml.RegisterResource = RegisterResource;
        function RegisterRootResource(url, namespaceURI) {
            var r = scriptresources;
            var nsuri = namespaceURI.toLowerCase();
            var names = r[nsuri];
            if (!names)
                names = r[nsuri] = [];
            var res = names[entireNamespaceName];
            if (!res)
                res = names[entireNamespaceName] = new ScriptResource(url);
            return res;
        }
        Xaml.RegisterRootResource = RegisterRootResource;
        var rdresources = [];
        function RegisterResourceDictionary(source) {
            var url = source.toString();
            if (!url)
                return null;
            var r = rdresources[url];
            if (!r)
                rdresources[url] = r = new XamlResource(url);
            return r;
        }
        Xaml.RegisterResourceDictionary = RegisterResourceDictionary;
        function MapResourceDictionary(source) {
            var url;
            if (!source || !(url = source.toString()))
                return null;
            return rdresources[url];
        }
        Xaml.MapResourceDictionary = MapResourceDictionary;
        var PageResolver = (function () {
            function PageResolver() {
            }
            PageResolver.Resolve = function (url, onSuccess, onError) {
                var resolver = new PageResolver();
                resolver._OnSuccess = onSuccess;
                resolver._OnError = onError;
                resolver._Url = url;
                resolver._Xaml = new XamlResource(url);
                resolver._Script = new ScriptResource(url + ".js");
                resolver._Xaml.LoadAsync(function (xr) {
                    return resolver._TryFinish();
                });
                resolver._Script.LoadAsync(function (sr) {
                    return resolver._TryFinish();
                });
                return resolver;
            };
            PageResolver.prototype.Stop = function () {
            };
            PageResolver.prototype._TryFinish = function () {
                if (!this._Xaml.IsLoaded || !this._Script.IsLoaded)
                    return;
                if (this._Xaml.Error)
                    this._OnError(this._Xaml.Error);
else
                    this._OnSuccess(this._Xaml.Document);
            };
            return PageResolver;
        })();
        Xaml.PageResolver = PageResolver;
    })(Fayde.Xaml || (Fayde.Xaml = {}));
    var Xaml = Fayde.Xaml;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Xaml) {
        var TemplateBinding = (function () {
            function TemplateBinding(property) {
                this.Property = property;
            }
            TemplateBinding.prototype.Transmute = function (ctx) {
                if (!ctx.TemplateBindingSource)
                    throw new XamlParseException("{TemplateBinding} can only be used within a ControlTemplate.");
                var propd = DependencyProperty.GetDependencyProperty((ctx.TemplateBindingSource).constructor, this.Property);
                return new Fayde.TemplateBindingExpression(propd, ctx.Property);
            };
            return TemplateBinding;
        })();
        Xaml.TemplateBinding = TemplateBinding;
        Fayde.RegisterType(TemplateBinding, {
            Name: "TemplateBinding",
            Namespace: "Fayde.Xaml",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Xaml || (Fayde.Xaml = {}));
    var Xaml = Fayde.Xaml;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Collections) {
        var ObservableCollection = (function () {
            function ObservableCollection() {
                this._ht = [];
                this.CollectionChanged = new MulticastEvent();
                this.PropertyChanged = new MulticastEvent();
            }
            ObservableCollection.prototype.GetEnumerator = function () {
                return Fayde.ArrayEx.GetEnumerator(this._ht);
            };

            Object.defineProperty(ObservableCollection.prototype, "Count", {
                get: function () {
                    return this._ht.length;
                },
                enumerable: true,
                configurable: true
            });
            ObservableCollection.prototype.GetValueAt = function (index) {
                var ht = this._ht;
                if (index < 0 || index >= ht.length)
                    throw new IndexOutOfRangeException(index);
                return ht[index];
            };
            ObservableCollection.prototype.SetValueAt = function (index, value) {
                var ht = this._ht;
                if (index < 0 || index >= ht.length)
                    throw new IndexOutOfRangeException(index);
                var oldValue = ht[index];
                ht[index] = value;
                this.CollectionChanged.Raise(this, Collections.NotifyCollectionChangedEventArgs.Replace(value, oldValue, index));
            };
            ObservableCollection.prototype.Add = function (value) {
                var index = this._ht.push(value) - 1;
                this.CollectionChanged.Raise(this, Collections.NotifyCollectionChangedEventArgs.Add(value, index));
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype.AddRange = function (values) {
                var index = this._ht.length;
                var len = values.length;
                for (var i = 0; i < len; i++) {
                    this._ht.push(values[i]);
                }
                this.CollectionChanged.Raise(this, Collections.NotifyCollectionChangedEventArgs.AddRange(values, index));
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype.Insert = function (value, index) {
                var ht = this._ht;
                if (index < 0 || index > ht.length)
                    throw new IndexOutOfRangeException(index);
                if (index >= ht.length)
                    ht.push(value);
else
                    ht.splice(index, 0, value);
                this.CollectionChanged.Raise(this, Collections.NotifyCollectionChangedEventArgs.Add(value, index));
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype.IndexOf = function (value) {
                return this._ht.indexOf(value);
            };
            ObservableCollection.prototype.Contains = function (value) {
                return this._ht.indexOf(value) > 0;
            };
            ObservableCollection.prototype.Remove = function (value) {
                var index = this._ht.indexOf(value);
                if (index < 0)
                    return;
                this._ht.splice(index, 1);
                this.CollectionChanged.Raise(this, Collections.NotifyCollectionChangedEventArgs.Remove(value, index));
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype.RemoveAt = function (index) {
                if (index < 0 || index >= this._ht.length)
                    throw new IndexOutOfRangeException(index);
                var item = this._ht.splice(index, 1)[0];
                this.CollectionChanged.Raise(this, Collections.NotifyCollectionChangedEventArgs.Remove(item, index));
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype.Clear = function () {
                this._ht = [];
                this.CollectionChanged.Raise(this, Collections.NotifyCollectionChangedEventArgs.Reset());
                this._RaisePropertyChanged("Count");
            };
            ObservableCollection.prototype._RaisePropertyChanged = function (propertyName) {
                this.PropertyChanged.Raise(this, new Fayde.PropertyChangedEventArgs(propertyName));
            };
            return ObservableCollection;
        })();
        Collections.ObservableCollection = ObservableCollection;
        Fayde.RegisterType(ObservableCollection, {
            Namespace: "Fayde.Collections",
            XmlNamespace: Fayde.XMLNS,
            Name: "ObservableCollection",
            Interfaces: [Fayde.IEnumerable_, Collections.INotifyCollectionChanged_, Fayde.INotifyPropertyChanged_]
        });
    })(Fayde.Collections || (Fayde.Collections = {}));
    var Collections = Fayde.Collections;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (GridUnitType) {
            GridUnitType[GridUnitType["Auto"] = 0] = "Auto";
            GridUnitType[GridUnitType["Pixel"] = 1] = "Pixel";
            GridUnitType[GridUnitType["Star"] = 2] = "Star";
        })(Controls.GridUnitType || (Controls.GridUnitType = {}));
        var GridUnitType = Controls.GridUnitType;
        var GridLength = (function () {
            function GridLength(value, unitType) {
                this.Value = value == null ? 0 : value;
                this.Type = unitType == null ? GridUnitType.Auto : unitType;
            }
            GridLength.Equals = function (gl1, gl2) {
                return Math.abs(gl1.Value - gl2.Value) < 0.001 && gl1.Type == gl2.Type;
            };
            GridLength.prototype.Clone = function () {
                return new Fayde.Controls.GridLength(this.Value, this.Type);
            };
            return GridLength;
        })();
        Controls.GridLength = GridLength;
        Fayde.RegisterType(GridLength, {
            Name: "GridLength",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
        Fayde.RegisterTypeConverter(GridLength, function (val) {
            if (!val || val.toLowerCase() === "auto")
                return new GridLength();
            var type = GridUnitType.Pixel;
            if (val[val.length - 1] === "*") {
                val = val.substr(0, val.length - 1);
                type = GridUnitType.Star;
            }
            var v = parseFloat(val);
            if (isNaN(v))
                v = 1;
            return new GridLength(v, type);
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var SelectorSelection = (function () {
                function SelectorSelection(owner) {
                    this._SelectedItems = [];
                    this._SelectedItem = null;
                    this._IsUpdating = false;
                    this.Mode = Controls.SelectionMode.Single;
                    this._Owner = owner;
                    this._Owner.SelectedItems.CollectionChanged.Subscribe(this._HandleOwnerSelectionChanged, this);
                }
                Object.defineProperty(SelectorSelection.prototype, "IsUpdating", {
                    get: function () {
                        return this._IsUpdating;
                    },
                    enumerable: true,
                    configurable: true
                });

                SelectorSelection.prototype._HandleOwnerSelectionChanged = function (sender, e) {
                    if (this._IsUpdating)
                        return;
                    if (this.Mode === Controls.SelectionMode.Single)
                        throw new InvalidOperationException("SelectedItems cannot be modified directly when in Single select mode");
                    try  {
                        var items = this._SelectedItems;
                        this._IsUpdating = true;
                        switch (e.Action) {
                            case Fayde.Collections.NotifyCollectionChangedAction.Add:
                                if (items.indexOf(e.NewItems[0]) < 0)
                                    this.AddToSelected(e.NewItems[0]);
                                break;
                            case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                                if (items.indexOf(e.OldItems[0]) > -1)
                                    this.RemoveFromSelected(e.OldItems[0]);
                                break;
                            case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                                if (items.indexOf(e.OldItems[0]) > -1)
                                    this.RemoveFromSelected(e.OldItems[0]);
                                if (items.indexOf(e.NewItems[0]) < 0)
                                    this.AddToSelected(e.NewItems[0]);
                                break;
                            case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                                var ownerItems = this._Owner.SelectedItems;
                                var item;
                                var enumerator = ownerItems.GetEnumerator();
                                while (enumerator.MoveNext()) {
                                    item = enumerator.Current;
                                    if (ownerItems.Contains(item))
                                        continue;
                                    if (items.indexOf(item) > -1)
                                        this.RemoveFromSelected(item);
                                }
                                enumerator = ownerItems.GetEnumerator();
                                while (enumerator.MoveNext()) {
                                    item = enumerator.Current;
                                    if (items.indexOf(item) < 0)
                                        this.AddToSelected(item);
                                }
                                break;
                        }
                        this._Owner._SelectedItemsIsInvalid = true;
                    } finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.RepopulateSelectedItems = function () {
                    if (!this._IsUpdating) {
                        try  {
                            this._IsUpdating = true;
                            var si = this._Owner.SelectedItems;
                            si.Clear();
                            si.AddRange(this._SelectedItems);
                        } finally {
                            this._IsUpdating = false;
                        }
                    }
                };
                SelectorSelection.prototype.ClearSelection = function (ignoreSelectedValue) {
                    if (ignoreSelectedValue === undefined)
                        ignoreSelectedValue = false;
                    if (this._SelectedItems.length === 0) {
                        this.UpdateSelectorProperties(null, -1, ignoreSelectedValue ? this._Owner.SelectedValue : null);
                        return;
                    }
                    try  {
                        this._IsUpdating = true;
                        var oldSelection = this._SelectedItems.slice(0);
                        this._SelectedItems = [];
                        this._SelectedItem = null;
                        this.UpdateSelectorProperties(null, -1, ignoreSelectedValue ? this._Owner.SelectedValue : null);
                        this._Owner._SelectedItemsIsInvalid = true;
                        this._Owner._RaiseSelectionChanged(oldSelection, []);
                    } finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.Select = function (item, ignoreSelectedValue) {
                    if (ignoreSelectedValue === undefined)
                        ignoreSelectedValue = false;
                    var ownerItems = this._Owner.Items;
                    if (!ownerItems.Contains(item))
                        return;
                    var ownerSelectedValue = this._Owner.SelectedValue;
                    var selectedItems = this._SelectedItems;
                    var selected = selectedItems.indexOf(item) > -1;
                    try  {
                        this._IsUpdating = true;
                        switch (this.Mode) {
                            case Controls.SelectionMode.Single:
                                if (selected) {
                                    if (Fayde.Input.Keyboard.HasControl())
                                        this.ClearSelection(ignoreSelectedValue);
else
                                        this.UpdateSelectorProperties(this._SelectedItem, ownerItems.IndexOf(this._SelectedItem), ownerSelectedValue);
                                } else {
                                    this.ReplaceSelection(item);
                                }
                                break;
                            case Controls.SelectionMode.Extended:
                                if (Fayde.Input.Keyboard.HasShift()) {
                                    var sIndex = ownerItems.IndexOf(this._SelectedItem);
                                    if (selectedItems.length === 0)
                                        this.SelectRange(0, ownerItems.IndexOf(item));
else
                                        this.SelectRange(sIndex, ownerItems.IndexOf(item));
                                } else if (Fayde.Input.Keyboard.HasControl()) {
                                    if (!selected)
                                        this.AddToSelected(item);
                                } else {
                                    if (selected)
                                        this.RemoveFromSelected(item);
else
                                        this.AddToSelected(item);
                                }
                                break;
                            case Controls.SelectionMode.Multiple:
                                if (selectedItems.indexOf(item) > -1)
                                    this.UpdateSelectorProperties(this._SelectedItem, ownerItems.IndexOf(this._SelectedItem), ownerSelectedValue);
else
                                    this.AddToSelected(item);
                                break;
                            default:
                                throw new NotSupportedException("SelectionMode " + this.Mode + " is not supported.");
                        }
                    } finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.SelectRange = function (startIndex, endIndex) {
                    var ownerItems = this._Owner.Items;
                    var selectedItems = this._SelectedItems;
                    var newlySelected = ownerItems.GetRange(startIndex, endIndex);
                    var newlyUnselected = [];
                    var enumerator = Fayde.ArrayEx.GetEnumerator(selectedItems);
                    var item;
                    while (enumerator.MoveNext()) {
                        item = enumerator.Current;
                        var index = newlySelected.indexOf(item);
                        if (index > -1)
                            newlySelected.splice(index, 1);
else
                            newlyUnselected.push(item);
                    }
                    selectedItems = selectedItems.filter(function (v) {
                        return newlyUnselected.indexOf(v) < 0;
                    });
                    selectedItems.push(newlySelected);
                    if (selectedItems.indexOf(this._SelectedItem) < 0) {
                        this._SelectedItem = selectedItems[0];
                        this.UpdateSelectorProperties(this._SelectedItem, this._SelectedItem == null ? -1 : ownerItems.IndexOf(this._SelectedItem), this._Owner._GetValueFromItem(this._SelectedItem));
                    }
                    this._Owner._SelectedItemsIsInvalid = true;
                    this._Owner._RaiseSelectionChanged(newlyUnselected, newlySelected.slice(0));
                };
                SelectorSelection.prototype.SelectAll = function (items) {
                    try  {
                        this._IsUpdating = true;
                        if (this.Mode === Controls.SelectionMode.Single)
                            throw new NotSupportedException("Cannot call SelectAll when in Single select mode");
                        var selectedItems = this._SelectedItems;
                        var select = Fayde.ArrayEx.Except(items, selectedItems);
                        if (select.length === 0)
                            return;
                        var owner = this._Owner;
                        selectedItems.push(select);
                        if (this._SelectedItem == null) {
                            this._SelectedItem = select[0];
                            this.UpdateSelectorProperties(this._SelectedItem, owner.Items.IndexOf(this._SelectedItem), owner._GetValueFromItem(this._SelectedItem));
                        }
                        owner._SelectedItemsIsInvalid = true;
                        owner._RaiseSelectionChanged([], select);
                    } finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.SelectOnly = function (item) {
                    if (this._SelectedItem === item && this._SelectedItems.length === 1)
                        return;
                    try  {
                        this._IsUpdating = true;
                        this.ReplaceSelection(item);
                    } finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.Unselect = function (item) {
                    if (this._SelectedItems.indexOf(item) < 0)
                        return;
                    try  {
                        this._IsUpdating = true;
                        this.RemoveFromSelected(item);
                    } finally {
                        this._IsUpdating = false;
                    }
                };
                SelectorSelection.prototype.AddToSelected = function (item) {
                    this._SelectedItems.push(item);
                    var owner = this._Owner;
                    if (this._SelectedItems.length === 1) {
                        this._SelectedItem = item;
                        this.UpdateSelectorProperties(item, owner.Items.IndexOf(item), owner._GetValueFromItem(item));
                    }
                    owner._SelectedItemsIsInvalid = true;
                    owner._RaiseSelectionChanged([], [item]);
                };
                SelectorSelection.prototype.RemoveFromSelected = function (item) {
                    var selectedItems = this._SelectedItems;
                    var index = selectedItems.indexOf(item);
                    if (index > -1)
                        selectedItems.splice(index, 1);
                    var owner = this._Owner;
                    if (this._SelectedItem === item) {
                        var newItem = selectedItems[0];
                        this._SelectedItem = newItem;
                        this.UpdateSelectorProperties(newItem, newItem == null ? -1 : owner.Items.IndexOf(newItem), owner._GetValueFromItem(item));
                    }
                    owner._SelectedItemsIsInvalid = true;
                    owner._RaiseSelectionChanged([item], []);
                };
                SelectorSelection.prototype.ReplaceSelection = function (item) {
                    var owner = this._Owner;
                    if (!this.UpdateCollectionView(item)) {
                        this.UpdateSelectorProperties(this._SelectedItem, owner.Items.IndexOf(this._SelectedItem), owner._GetValueFromItem(this._SelectedItem));
                        return;
                    }
                    var oldItems = this._SelectedItems.slice(0);
                    var newItems = [];
                    var itemIndex = oldItems.indexOf(item);
                    if (itemIndex > -1) {
                        oldItems.splice(itemIndex, 1);
                    } else {
                        newItems.push(item);
                    }
                    this._SelectedItems = [item];
                    this._SelectedItem = item;
                    this.UpdateSelectorProperties(item, owner.Items.IndexOf(item), owner._GetValueFromItem(item));
                    if (newItems.length !== 0 || oldItems.length !== 0) {
                        owner._SelectedItemsIsInvalid = true;
                        owner._RaiseSelectionChanged(oldItems, newItems);
                    }
                };
                SelectorSelection.prototype.UpdateSelectorProperties = function (item, index, value) {
                    var owner = this._Owner;
                    if (owner.SelectedItem !== item)
                        owner.SelectedItem = item;
                    if (owner.SelectedIndex !== index)
                        owner.SelectedIndex = index;
                    if (owner.SelectedValue !== value)
                        owner.SelectedValue = value;
                    this.UpdateCollectionView(item);
                };
                SelectorSelection.prototype.UpdateCollectionView = function (item) {
                    var icv;
                    var is = this._Owner.ItemsSource;
                    if (Nullstone.ImplementsInterface(is, Fayde.Data.ICollectionView_))
                        icv = is;
                    if (icv) {
                        icv.MoveCurrentTo(item);
                        return item === icv.CurrentItem;
                    }
                    return true;
                };
                return SelectorSelection;
            })();
            Primitives.SelectorSelection = SelectorSelection;
            Fayde.RegisterType(SelectorSelection, {
                Name: "SelectorSelection",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var DependencyProperty = (function () {
    function DependencyProperty() {
        this.IsReadOnly = false;
        this.IsCustom = true;
        this.IsAttached = false;
        this.IsInheritable = false;
        this.IsImmutable = false;
        this.AlwaysChange = false;
        this._Coercer = null;
        this._Validator = null;
    }
    DependencyProperty.Register = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterReadOnly = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsReadOnly = true;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterAttached = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsAttached = true;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterCore = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsCustom = false;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterReadOnlyCore = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsCustom = false;
        propd.IsReadOnly = true;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterAttachedCore = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsCustom = false;
        propd.IsAttached = true;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterImmutable = function (name, getTargetType, ownerType) {
        var propd = new ImmutableDependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = undefined;
        propd.IsImmutable = true;
        propd.Store = Fayde.Providers.ImmutableStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterInheritable = function (name, getTargetType, ownerType, defaultValue, changedCallback) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd.IsCustom = true;
        propd.IsInheritable = true;
        propd.Store = Fayde.Providers.InheritedStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.RegisterFull = function (name, getTargetType, ownerType, defaultValue, changedCallback, coercer, alwaysChange, validator, isCustom, isReadOnly, isAttached) {
        var propd = new DependencyProperty();
        propd.Name = name;
        propd.GetTargetType = getTargetType;
        propd.OwnerType = ownerType;
        propd.DefaultValue = defaultValue;
        propd.ChangedCallback = changedCallback;
        propd._Coercer = coercer;
        propd.AlwaysChange = alwaysChange;
        propd._Validator = validator;
        propd.IsCustom = isCustom !== false;
        propd.IsReadOnly = isReadOnly === true;
        propd.IsAttached = isAttached === true;
        propd.Store = Fayde.Providers.PropertyStore.Instance;
        propd.FinishRegister();
        return propd;
    };
    DependencyProperty.prototype.FinishRegister = function () {
        var name = this.Name;
        var ownerType = this.OwnerType;
        if (!ownerType || typeof ownerType !== "function")
            throw new InvalidOperationException("DependencyProperty does not have a valid OwnerType.");
        var registeredDPs = (ownerType)._RegisteredDPs;
        if (!registeredDPs) {
            var registeredDPs = {};
            Object.defineProperty(ownerType, "_RegisteredDPs", {
                value: registeredDPs,
                enumerable: false,
                writable: false
            });
        }
        if (registeredDPs[name] !== undefined)
            throw new InvalidOperationException("Dependency Property is already registered. [" + name + "]");
        registeredDPs[name] = this;
        this._ID = DependencyProperty._LastID = DependencyProperty._LastID + 1;
        DependencyProperty._IDs[this._ID] = this;
        if (this.IsImmutable)
            return;
        var propd = this;
        var getter = function () {
            return (this).GetValue(propd);
        };
        var setter = function (value) {
            (this).SetValue(propd, value);
        };
        if (this.IsReadOnly)
            setter = function (value) {
                throw new Exception("Property [" + propd.Name + "] is readonly.");
            };
        Object.defineProperty(ownerType.prototype, this.Name, {
            get: getter,
            set: setter,
            configurable: true
        });
    };
    DependencyProperty.prototype.ExtendTo = function (type) {
        var registeredDPs = type._RegisteredDPs;
        if (!registeredDPs) {
            var registeredDPs = {};
            Object.defineProperty(type, "_RegisteredDPs", {
                value: registeredDPs,
                enumerable: false,
                writable: false
            });
        }
        registeredDPs[this.Name] = this;
        var propd = this;
        var getter = function () {
            return (this).GetValue(propd);
        };
        var setter = function (value) {
            (this).SetValue(propd, value);
        };
        Object.defineProperty(type.prototype, this.Name, {
            get: getter,
            set: setter,
            configurable: true
        });
        return this;
    };
    DependencyProperty.prototype.ValidateSetValue = function (dobj, value, isValidOut) {
        isValidOut.IsValid = false;
        var coerced = value;
        if (this._Coercer && !(coerced = this._Coercer(dobj, this, coerced)))
            return coerced;

        if (this._Validator && !this._Validator(dobj, this, coerced))
            return coerced;
        isValidOut.IsValid = true;
        return coerced;
    };
    DependencyProperty.GetDependencyProperty = function (ownerType, name, noError) {
        if (!ownerType)
            return undefined;
        var reg = (ownerType)._RegisteredDPs;
        var propd;
        if (reg)
            propd = reg[name];
        if (!propd)
            propd = DependencyProperty.GetDependencyProperty((ownerType)._BaseClass, name, true);
        if (!propd && !noError)
            throw new Exception("Cannot locate dependency property [" + (ownerType)._TypeName + "].[" + name + "]");
        return propd;
    };
    DependencyProperty._IDs = [];
    DependencyProperty._LastID = 0;
    return DependencyProperty;
})();
Fayde.RegisterType(DependencyProperty, {
    Name: "DependencyProperty",
    Namespace: "Fayde"
});
var ImmutableDependencyProperty = (function (_super) {
    __extends(ImmutableDependencyProperty, _super);
    function ImmutableDependencyProperty() {
        _super.apply(this, arguments);
        this.IsImmutable = true;
    }
    ImmutableDependencyProperty.prototype.Initialize = function (dobj) {
        var storage = Fayde.Providers.GetStorage(dobj, this);
        storage.Precedence = Fayde.Providers.PropertyPrecedence.LocalValue;
        var obj = new (this.GetTargetType())();
        Object.defineProperty(dobj, this.Name, {
            value: obj,
            writable: false
        });
        return storage.Local = obj;
    };
    return ImmutableDependencyProperty;
})(DependencyProperty);

var Fayde;
(function (Fayde) {
    var Expression = (function () {
        function Expression() {
        }
        Expression.prototype.GetValue = function (propd) {
        };
        Expression.prototype.OnAttached = function (dobj) {
            this.IsAttached = true;
            this.OnDataContextChanged(dobj.DataContext);
        };
        Expression.prototype.OnDetached = function (dobj) {
            this.IsAttached = false;
            this.OnDataContextChanged(undefined);
        };
        Expression.prototype.OnDataContextChanged = function (newDataContext) {
        };
        return Expression;
    })();
    Fayde.Expression = Expression;
    Fayde.RegisterType(Expression, {
        Name: "Expression",
        Namespace: "Fayde"
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var LayoutInformation = (function () {
        function LayoutInformation() {
        }
        LayoutInformation.GetLayoutClip = function (uie) {
            var r = uie.XamlNode.LayoutUpdater.LayoutClip;
            var geom = new Fayde.Media.RectangleGeometry();
            geom.Rect = rect.copyTo(r);
            return geom;
        };
        LayoutInformation.GetLayoutExceptionElement = function () {
            var lu = Fayde.LayoutUpdater.LayoutExceptionUpdater;
            if (lu)
                return lu.Node.XObject;
        };
        LayoutInformation.GetLayoutSlot = function (uie) {
            return uie.XamlNode.LayoutUpdater.LayoutSlot;
        };
        return LayoutInformation;
    })();
    Fayde.LayoutInformation = LayoutInformation;
    Fayde.RegisterType(LayoutInformation, {
        Name: "LayoutInformation",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var dirtyEnum = _Dirty;
    var localTransformFlag = _Dirty.LocalTransform;
    var localProjectionFlag = _Dirty.LocalProjection;
    var transformFlag = _Dirty.Transform;
    var rvFlag = _Dirty.RenderVisibility;
    var htvFlag = _Dirty.HitTestVisibility;
    var localClipFlag = _Dirty.LocalClip;
    var layoutClipFlag = _Dirty.LayoutClip;
    var clipFlag = _Dirty.Clip;
    var downDirtyFlag = _Dirty.DownDirtyState;
    var upDirtyFlag = _Dirty.UpDirtyState;
    (function (UIElementFlags) {
        UIElementFlags[UIElementFlags["None"] = 0] = "None";
        UIElementFlags[UIElementFlags["RenderVisible"] = 0x02] = "RenderVisible";
        UIElementFlags[UIElementFlags["HitTestVisible"] = 0x04] = "HitTestVisible";
        UIElementFlags[UIElementFlags["TotalRenderVisible"] = 0x08] = "TotalRenderVisible";
        UIElementFlags[UIElementFlags["TotalHitTestVisible"] = 0x10] = "TotalHitTestVisible";
        UIElementFlags[UIElementFlags["DirtyArrangeHint"] = 0x800] = "DirtyArrangeHint";
        UIElementFlags[UIElementFlags["DirtyMeasureHint"] = 0x1000] = "DirtyMeasureHint";
        UIElementFlags[UIElementFlags["DirtySizeHint"] = 0x2000] = "DirtySizeHint";
    })(Fayde.UIElementFlags || (Fayde.UIElementFlags = {}));
    var UIElementFlags = Fayde.UIElementFlags;

    var maxPassCount = 250;
    var LayoutUpdater = (function () {
        function LayoutUpdater(Node) {
            this.Node = Node;
            this.LayoutClip = undefined;
            this.CompositeLayoutClip = undefined;
            this.LayoutSlot = undefined;
            this.PreviousConstraint = undefined;
            this.LastRenderSize = undefined;
            this.HiddenDesire = size.createNegativeInfinite();
            this.DesiredSize = new size();
            this.RenderSize = new size();
            this.VisualOffset = new Point();
            this.ActualHeight = NaN;
            this.ActualWidth = NaN;
            this.AbsoluteXform = mat3.identity();
            this.LayoutXform = mat3.identity();
            this.LocalXform = mat3.identity();
            this.RenderXform = mat3.identity();
            this.CarrierXform = null;
            this.LocalProjection = mat4.identity();
            this.AbsoluteProjection = mat4.identity();
            this.RenderProjection = mat4.identity();
            this.CarrierProjection = null;
            this.TotalOpacity = 1.0;
            this.TotalIsRenderVisible = true;
            this.TotalIsHitTestVisible = true;
            this.TotalRenderProjection = false;
            this.Extents = new rect();
            this.ExtentsWithChildren = new rect();
            this.Bounds = new rect();
            this.BoundsWithChildren = new rect();
            this.GlobalBounds = new rect();
            this.GlobalBoundsWithChildren = new rect();
            this.SurfaceBounds = new rect();
            this.SurfaceBoundsWithChildren = new rect();
            this.EffectPadding = new Thickness();
            this.ClipBounds = new rect();
            this.IsContainer = false;
            this.IsLayoutContainer = false;
            this.BreaksLayoutClipRender = false;
            this.CanHitElement = false;
            this.ShouldSkipHitTest = false;
            this.IsNeverInsideObject = false;
            this.Flags = Fayde.UIElementFlags.RenderVisible | Fayde.UIElementFlags.HitTestVisible;
            this.DirtyFlags = 0;
            this.InUpDirty = false;
            this.InDownDirty = false;
            this.DirtyRegion = new rect();
            this._ForceInvalidateOfNewBounds = false;
        }
        LayoutUpdater.prototype.OnIsAttachedChanged = function (newIsAttached, visualParentNode) {
            this.UpdateTotalRenderVisibility();
            this.UpdateTotalHitTestVisibility();
            if (!newIsAttached) {
                this._CacheInvalidateHint();
                var surface = this.Surface;
                if (surface)
                    surface.OnNodeDetached(this);
            }
        };
        LayoutUpdater.prototype.OnAddedToTree = function () {
            this.UpdateTotalRenderVisibility();
            this.UpdateTotalHitTestVisibility();
            this.Invalidate();
            this.LayoutClip = undefined;
            size.clear(this.RenderSize);
            this.UpdateTransform();
            this.UpdateProjection();
            this.InvalidateMeasure();
            this.InvalidateArrange();
            if (this._HasFlag(UIElementFlags.DirtySizeHint) || this.LastRenderSize !== undefined)
                this._PropagateFlagUp(UIElementFlags.DirtySizeHint);
        };
        LayoutUpdater.prototype.OnRemovedFromTree = function () {
            this.LayoutSlot = new rect();
            this.LayoutClip = undefined;
        };
        LayoutUpdater.prototype.SetContainerMode = function (isLayoutContainer, isContainer) {
            if (isLayoutContainer != null)
                this.IsLayoutContainer = isLayoutContainer;
            if (isContainer != null)
                this.IsContainer = isContainer;
else
                this.IsContainer = isLayoutContainer;
        };
        LayoutUpdater.prototype.HasMeasureArrangeHint = function () {
            return (this.Flags & (UIElementFlags.DirtyMeasureHint | UIElementFlags.DirtyArrangeHint)) > 0;
        };
        LayoutUpdater.prototype.ProcessDown = function () {
            var thisNode = this.Node;
            var thisUie = thisNode.XObject;
            var visualParentNode = thisNode.VisualParentNode;
            var visualParentLu;
            if (visualParentNode)
                visualParentLu = visualParentNode.LayoutUpdater;

            if (this.DirtyFlags & rvFlag) {
                this.DirtyFlags &= ~rvFlag;
                var ovisible = this.TotalIsRenderVisible;
                this.UpdateBounds();
                if (visualParentLu)
                    visualParentLu.UpdateBounds();
                this.UpdateRenderVisibility(visualParentLu);
                if (!this.TotalIsRenderVisible)
                    this._CacheInvalidateHint();
                if (ovisible !== this.TotalIsRenderVisible)
                    this.Surface._AddDirtyElement(this, dirtyEnum.NewBounds);
                this._PropagateDirtyFlagToChildren(rvFlag);
            }
            if (this.DirtyFlags & htvFlag) {
                this.DirtyFlags &= ~htvFlag;
                this.UpdateHitTestVisibility(visualParentLu);
                this._PropagateDirtyFlagToChildren(htvFlag);
            }
            var isLT = this.DirtyFlags & localTransformFlag;
            var isLP = this.DirtyFlags & localProjectionFlag;
            var isT = isLT || isLP || this.DirtyFlags & transformFlag;
            this.DirtyFlags &= ~(localTransformFlag | localProjectionFlag | transformFlag);
            if (isLT) {
                this.ComputeLocalTransform(thisUie);
            }
            if (isLP) {
                this.ComputeLocalProjection(thisUie);
            }
            if (isT) {
                this.ComputeTransform(thisNode, visualParentLu);
                if (visualParentLu)
                    visualParentLu.UpdateBounds();
                this._PropagateDirtyFlagToChildren(dirtyEnum.Transform);
            }
            var isLocalClip = this.DirtyFlags & localClipFlag;
            var isLayoutClip = this.DirtyFlags & layoutClipFlag;
            var isClip = isLocalClip || this.DirtyFlags & clipFlag;
            this.DirtyFlags &= ~(localClipFlag | layoutClipFlag | clipFlag);
            if (isLayoutClip) {
                this.ComputeLayoutClip(visualParentLu);
                this._PropagateDirtyFlagToChildren(dirtyEnum.LayoutClip);
            }
            if (this.DirtyFlags & dirtyEnum.ChildrenZIndices) {
                this.DirtyFlags &= ~dirtyEnum.ChildrenZIndices;
                thisNode._ResortChildrenByZIndex();
            }
            return !(this.DirtyFlags & downDirtyFlag);
        };
        LayoutUpdater.prototype.ProcessUp = function () {
            var thisNode = this.Node;
            var visualParentNode = thisNode.VisualParentNode;
            var visualParentLu;
            if (visualParentNode)
                visualParentLu = visualParentNode.LayoutUpdater;
            var invalidateSubtreePaint = false;
            if (this.DirtyFlags & dirtyEnum.Bounds) {
                this.DirtyFlags &= ~dirtyEnum.Bounds;
                var oextents = rect.copyTo(this.ExtentsWithChildren);
                var oglobalbounds = rect.copyTo(this.GlobalBoundsWithChildren);
                var osubtreebounds = rect.copyTo(this.SurfaceBoundsWithChildren);
                if ((thisNode).ComputeBounds)
                    (thisNode).ComputeBounds(this.ComputeBounds, this);
else
                    this.ComputeBounds();
                if (!rect.isEqual(oglobalbounds, this.GlobalBoundsWithChildren)) {
                    if (visualParentLu) {
                        visualParentLu.UpdateBounds();
                        visualParentLu.Invalidate(osubtreebounds);
                        visualParentLu.Invalidate(this.SurfaceBoundsWithChildren);
                    }
                }
                invalidateSubtreePaint = !rect.isEqual(oextents, this.ExtentsWithChildren) || this._ForceInvalidateOfNewBounds;
                this._ForceInvalidateOfNewBounds = false;
            }
            if (this.DirtyFlags & dirtyEnum.NewBounds) {
                if (visualParentLu)
                    visualParentLu.Invalidate(this.SurfaceBoundsWithChildren);
else if (thisNode.IsTopLevel)
                    invalidateSubtreePaint = true;
                this.DirtyFlags &= ~dirtyEnum.NewBounds;
            }
            if (invalidateSubtreePaint)
                this.Invalidate(this.SurfaceBoundsWithChildren);
            if (this.DirtyFlags & dirtyEnum.Invalidate) {
                this.DirtyFlags &= ~dirtyEnum.Invalidate;
                var dirty = this.DirtyRegion;
                if (visualParentLu) {
                    visualParentLu.Invalidate(dirty);
                } else {
                    if (thisNode.IsAttached) {
                        this.Surface._Invalidate(dirty);
                    }
                }
                rect.clear(dirty);
            }
            return !(this.DirtyFlags & upDirtyFlag);
        };
        LayoutUpdater.prototype._PropagateDirtyFlagToChildren = function (dirt) {
            var enumerator = this.Node.GetVisualTreeEnumerator();
            var s = this.Surface;
            while (enumerator.MoveNext()) {
                s._AddDirtyElement((enumerator.Current).LayoutUpdater, dirt);
            }
        };
        LayoutUpdater.prototype.FullInvalidate = function (invTransforms) {
            this.Invalidate();
            if (invTransforms) {
                this.UpdateTransform();
                this.UpdateProjection();
            }
            this.UpdateBounds(true);
        };
        LayoutUpdater.prototype.Invalidate = function (r) {
            if (!r)
                r = this.SurfaceBounds;
            if (!this.TotalIsRenderVisible || (this.TotalOpacity * 255) < 0.5)
                return;
            if (this.Node.IsAttached) {
                this.Surface._AddDirtyElement(this, _Dirty.Invalidate);
                this.InvalidateBitmapCache();
                if (false) {
                    rect.union(this.DirtyRegion, this.SurfaceBoundsWithChildren);
                } else {
                    rect.union(this.DirtyRegion, r);
                }
            }
        };
        LayoutUpdater.prototype._CacheInvalidateHint = function () {
        };
        LayoutUpdater.prototype.ComputeComposite = function () {
        };
        LayoutUpdater.prototype.InvalidateBitmapCache = function () {
        };
        LayoutUpdater.prototype.InvalidateMeasure = function () {
            this.DirtyFlags |= _Dirty.Measure;
            this._PropagateFlagUp(UIElementFlags.DirtyMeasureHint);
        };
        LayoutUpdater.prototype.InvalidateArrange = function () {
            this.DirtyFlags |= _Dirty.Arrange;
            this._PropagateFlagUp(UIElementFlags.DirtyArrangeHint);
        };
        LayoutUpdater.prototype.InvalidateSubtreePaint = function () {
            this.Invalidate(this.SurfaceBoundsWithChildren);
        };
        LayoutUpdater.prototype.UpdateClip = function () {
            if (this.Node.IsAttached)
                this.Surface._AddDirtyElement(this, localClipFlag);
        };
        LayoutUpdater.prototype.SetLayoutClip = function (layoutClip) {
            var old = this.LayoutClip;
            this.LayoutClip = layoutClip;
            if (old === layoutClip)
                return;
            if (old && layoutClip && rect.isEqual(old, layoutClip))
                return;
            if (this.Node.IsAttached)
                this.Surface._AddDirtyElement(this, layoutClipFlag);
        };
        LayoutUpdater.prototype.ComputeLayoutClip = function (vpLu) {
            if (this.BreaksLayoutClipRender) {
                this.CompositeLayoutClip = undefined;
                return;
            }
            var vpcomposite = (vpLu) ? vpLu.CompositeLayoutClip : undefined;
            var local = this.LayoutClip;
            if (vpcomposite && local)
                this.CompositeLayoutClip = rect.intersection(rect.copyTo(local), vpcomposite);
else if (vpcomposite)
                this.CompositeLayoutClip = rect.copyTo(vpcomposite);
else if (local)
                this.CompositeLayoutClip = rect.copyTo(local);
else
                this.CompositeLayoutClip = undefined;
        };
        LayoutUpdater.prototype.UpdateTransform = function () {
            if (this.Node.IsAttached)
                this.Surface._AddDirtyElement(this, _Dirty.LocalTransform);
        };
        LayoutUpdater.prototype.ComputeLocalTransform = function (uie) {
            var transform = uie.RenderTransform;
            if (!transform)
                return;
            var transformOrigin;
            if (uie instanceof Fayde.Controls.TextBlock)
                transformOrigin = this.GetTextBlockTransformOrigin(uie);
else
                transformOrigin = this.GetTransformOrigin(uie);
            mat3.identity(this.LocalXform);
            var render = mat3.create();
            mat3.set(transform.Value._Raw, render);
            mat3.translate(this.LocalXform, transformOrigin.X, transformOrigin.Y);
            mat3.multiply(this.LocalXform, render, this.LocalXform);
            mat3.translate(this.LocalXform, -transformOrigin.X, -transformOrigin.Y);
        };
        LayoutUpdater.prototype.ComputeLocalProjection = function (uie) {
            var projection = uie.Projection;
            if (!projection) {
                Fayde.Controls.Panel.SetZ(uie, NaN);
                return;
            }
            var objectSize = (uie instanceof Fayde.Shapes.Shape) ? this._GetShapeBrushSize(uie) : this._GetBrushSize();
            projection.SetObjectSize(objectSize);
            var z = projection.GetDistanceFromXYPlane();
            Fayde.Controls.Panel.SetZ(uie, z);
        };
        LayoutUpdater.prototype.ComputeTransform = function (uin, vplu) {
            var uie = uin.XObject;
            var projection = uie.Projection;
            var oldProjection = mat4.clone(this.LocalProjection);
            var old = mat3.clone(this.AbsoluteXform);
            mat4.identity(this.LocalProjection);
            if (vplu) {
                mat3.set(vplu.AbsoluteXform, this.AbsoluteXform);
                mat4.set(vplu.AbsoluteProjection, this.AbsoluteProjection);
                this.TotalRenderProjection = vplu.TotalRenderProjection;
            } else {
                mat3.identity(this.AbsoluteXform);
                mat4.identity(this.AbsoluteProjection);
                this.TotalRenderProjection = false;
            }
            var carrierProjection = this.CarrierProjection;
            var carrierXform = this.CarrierXform;
            if (carrierProjection)
                mat4.set(carrierProjection, this.LocalProjection);
            var renderXform = this.RenderXform;
            if (carrierXform)
                mat3.set(carrierXform, renderXform);
else
                mat3.identity(renderXform);
            mat3.multiply(renderXform, this.LayoutXform, renderXform);
            mat3.multiply(renderXform, this.LocalXform, renderXform);
            var m = mat3.toAffineMat4(renderXform);
            mat4.multiply(this.LocalProjection, m, this.LocalProjection);
            if (false) {
            } else {
                mat3.multiply(this.AbsoluteXform, this.RenderXform, this.AbsoluteXform);
            }
            if (projection) {
                m = projection.GetTransform();
                mat4.multiply(m, this.LocalProjection, this.LocalProjection);
                this.TotalRenderProjection = true;
            }
            mat4.multiply(this.LocalProjection, this.AbsoluteProjection, this.AbsoluteProjection);
            if (uin instanceof Fayde.Controls.Primitives.PopupNode) {
                var popupChildNode = (uin).SubtreeNode;
                if (popupChildNode)
                    popupChildNode.LayoutUpdater.UpdateTransform();
            }
            if (!mat4.equal(oldProjection, this.LocalProjection)) {
                if (vplu)
                    vplu.Invalidate(this.SurfaceBoundsWithChildren);
else if (uin.IsTopLevel)
                    this.InvalidateSubtreePaint();
                if (uin.IsAttached)
                    this.Surface._AddDirtyElement(this, _Dirty.NewBounds);
            }
            mat4.set(this.LocalProjection, this.RenderProjection);
            this.UpdateBounds();
            this.ComputeComposite();
            var post = uin;
            if (post.PostCompute)
                post.PostCompute(this, projection != null);
        };
        LayoutUpdater.prototype.UpdateProjection = function () {
            if (this.Node.IsAttached)
                this.Surface._AddDirtyElement(this, _Dirty.LocalProjection);
        };
        LayoutUpdater.prototype.TransformPoint = function (p) {
            var inverse = mat4.inverse(this.AbsoluteProjection, mat4.create());
            if (!inverse) {
                Warn("Could not get inverse of Absolute Projection for UIElement.");
                return;
            }
            var p4 = vec4.createFrom(p.X, p.Y, 0.0, 1.0);
            var m20 = inverse[2];
            var m21 = inverse[6];
            var m22 = inverse[10];
            var m23 = inverse[14];
            p4[2] = -(m20 * p4[0] + m21 * p4[1] + m23) / m22;
            mat4.transformVec4(inverse, p4);
            p.X = p4[0] / p4[3];
            p.Y = p4[1] / p4[3];
        };
        LayoutUpdater.prototype.TransformToVisual = function (toUin) {
            var result = mat4.create();
            if (toUin) {
                var inverse = mat4.create();
                mat4.inverse(toUin.LayoutUpdater.AbsoluteProjection, inverse);
                mat4.multiply(this.AbsoluteProjection, inverse, result);
            } else {
                mat4.set(this.AbsoluteProjection, result);
            }
            var raw = mat4.toAffineMat3(result);
            if (raw) {
                var mt = new Fayde.Media.MatrixTransform();
                mt.SetStoreValue(Fayde.Media.MatrixTransform.MatrixProperty, new Fayde.Media.Matrix(raw));
                return mt;
            }
            return new Fayde.Media.InternalTransform(result);
        };
        LayoutUpdater.prototype.GetTransformOrigin = function (uie) {
            var userXformOrigin = uie.RenderTransformOrigin;
            if (!userXformOrigin)
                return { X: 0, Y: 0 };
            return { X: this.ActualWidth * userXformOrigin.X, Y: this.ActualHeight * userXformOrigin.Y };
        };
        LayoutUpdater.prototype.GetTextBlockTransformOrigin = function (tb) {
            var userXformOrigin = tb.RenderTransformOrigin;
            if (!userXformOrigin)
                return { X: 0, Y: 0 };
            var xformSize = this.CoerceSize(this.RenderSize);
            return {
                X: xformSize.Width * userXformOrigin.X,
                Y: xformSize.Height * userXformOrigin.Y
            };
        };
        LayoutUpdater.prototype.UpdateRenderVisibility = function (vpLu) {
            var uie = this.Node.XObject;
            if (vpLu) {
                var vp = vpLu.Node.XObject;
                this.TotalOpacity = vpLu.TotalOpacity * uie.Opacity;
                this.TotalIsRenderVisible = (vp.Visibility === 0) && (uie.Visibility === 0);
            } else {
                this.TotalOpacity = uie.Opacity;
                this.TotalIsRenderVisible = (uie.Visibility === 0);
            }
        };
        LayoutUpdater.prototype.UpdateTotalRenderVisibility = function () {
            if (this.Node.IsAttached)
                this.Surface._AddDirtyElement(this, _Dirty.RenderVisibility);
        };
        LayoutUpdater.prototype.UpdateHitTestVisibility = function (vpLu) {
            var uie = this.Node.XObject;
            if (vpLu) {
                this.TotalIsHitTestVisible = vpLu.TotalIsHitTestVisible && uie.IsHitTestVisible;
            } else {
                this.TotalIsHitTestVisible = uie.IsHitTestVisible;
            }
        };
        LayoutUpdater.prototype.UpdateTotalHitTestVisibility = function () {
            if (this.Node.IsAttached)
                this.Surface._AddDirtyElement(this, _Dirty.HitTestVisibility);
        };
        LayoutUpdater.prototype.UpdateBounds = function (forceRedraw) {
            if (this.Node.IsAttached)
                this.Surface._AddDirtyElement(this, _Dirty.Bounds);
            this._ForceInvalidateOfNewBounds = this._ForceInvalidateOfNewBounds || forceRedraw;
        };
        LayoutUpdater.prototype.ComputeBounds = function () {
            var s = this.CoerceSize(size.fromRaw(this.ActualWidth, this.ActualHeight));
            if (isNaN(s.Width))
                s.Width = 0;
            if (isNaN(s.Height))
                s.Height = 0;
            rect.set(this.Extents, 0, 0, s.Width, s.Height);
            rect.copyTo(this.Extents, this.ExtentsWithChildren);
            var node = this.Node;
            var enumerator = node.GetVisualTreeEnumerator();
            while (enumerator.MoveNext()) {
                var item = enumerator.Current;
                var itemlu = item.LayoutUpdater;
                if (itemlu.TotalIsRenderVisible)
                    rect.union(this.ExtentsWithChildren, itemlu.GlobalBoundsWithChildren);
            }
            this.IntersectBoundsWithClipPath(this.Bounds, this.AbsoluteXform);
            rect.copyGrowTransform(this.BoundsWithChildren, this.ExtentsWithChildren, this.EffectPadding, this.AbsoluteXform);
            this.ComputeGlobalBounds();
            this.ComputeSurfaceBounds();
        };
        LayoutUpdater.prototype.ComputeGlobalBounds = function () {
            this.IntersectBoundsWithClipPath(this.GlobalBounds, this.LocalXform);
            rect.copyGrowTransform4(this.GlobalBoundsWithChildren, this.ExtentsWithChildren, this.EffectPadding, this.LocalProjection);
        };
        LayoutUpdater.prototype.ComputeSurfaceBounds = function () {
            this.IntersectBoundsWithClipPath(this.SurfaceBounds, this.AbsoluteXform);
            rect.copyGrowTransform4(this.SurfaceBoundsWithChildren, this.ExtentsWithChildren, this.EffectPadding, this.AbsoluteProjection);
        };
        LayoutUpdater.prototype.IntersectBoundsWithClipPath = function (dest, xform) {
            var isClipEmpty = rect.isEmpty(this.ClipBounds);
            var isLayoutClipEmpty = this.LayoutClip ? rect.isEmpty(this.LayoutClip) : true;
            if ((!isClipEmpty || !isLayoutClipEmpty) && !this.TotalIsRenderVisible) {
                rect.clear(dest);
                return dest;
            }
            rect.copyGrowTransform(dest, this.Extents, this.EffectPadding, null);
            if (!isClipEmpty)
                rect.intersection(dest, this.ClipBounds);
            if (!isLayoutClipEmpty)
                rect.intersection(dest, this.LayoutClip);
            return rect.transform(dest, xform);
        };
        LayoutUpdater.prototype._UpdateActualSize = function () {
            var last = this.LastRenderSize;
            var fe = this.Node.XObject;
            var s;
            if ((fe).ComputeActualSize)
                s = (fe).ComputeActualSize(this._ComputeActualSize, this);
else
                s = this._ComputeActualSize();
            this.ActualWidth = s.Width;
            this.ActualHeight = s.Height;
            if (last && size.isEqual(last, s))
                return;
            var propd = Fayde.FrameworkElement.ActualWidthProperty;
            propd.Store.SetLocalValue(Fayde.Providers.GetStorage(fe, propd), s.Width);
            var propd = Fayde.FrameworkElement.ActualHeightProperty;
            propd.Store.SetLocalValue(Fayde.Providers.GetStorage(fe, propd), s.Height);
            this.LastRenderSize = undefined;
            return {
                Element: fe,
                PreviousSize: last,
                NewSize: s
            };
        };
        LayoutUpdater.prototype._ComputeActualSize = function () {
            var node = this.Node;
            if (node.XObject.Visibility !== Fayde.Visibility.Visible)
                return new size();
            var parentNode = node.VisualParentNode;
            if ((parentNode && !(parentNode.XObject instanceof Fayde.Controls.Canvas)) || this.IsLayoutContainer)
                return size.copyTo(this.RenderSize);
            return this.CoerceSize(new size());
        };
        LayoutUpdater.prototype._GetBrushSize = function () {
            return {
                Width: this.ActualWidth,
                Height: this.ActualHeight
            };
        };
        LayoutUpdater.prototype._GetShapeBrushSize = function (shape) {
            return size.fromRect(shape.XamlNode.GetStretchExtents(shape, this));
        };
        LayoutUpdater.prototype.CoerceSize = function (s) {
            var fe = this.Node.XObject;
            var spw = fe.Width;
            var sph = fe.Height;
            var minw = fe.MinWidth;
            var minh = fe.MinHeight;
            var cw = minw;
            var ch = minh;
            cw = Math.max(cw, s.Width);
            ch = Math.max(ch, s.Height);
            if (!isNaN(spw))
                cw = spw;
            if (!isNaN(sph))
                ch = sph;
            cw = Math.max(Math.min(cw, fe.MaxWidth), minw);
            ch = Math.max(Math.min(ch, fe.MaxHeight), minh);
            if (fe.UseLayoutRounding) {
                cw = Math.round(cw);
                ch = Math.round(ch);
            }
            s.Width = cw;
            s.Height = ch;
            return s;
        };
        LayoutUpdater.prototype._HasFlag = function (flag) {
            return (this.Flags & flag) === flag;
        };
        LayoutUpdater.prototype._ClearFlag = function (flag) {
            this.Flags &= ~flag;
        };
        LayoutUpdater.prototype._SetFlag = function (flag) {
            this.Flags |= flag;
        };
        LayoutUpdater.prototype._PropagateFlagUp = function (flag) {
            this.Flags |= flag;
            var node = this.Node;
            var lu;
            while ((node = node.VisualParentNode) && (lu = node.LayoutUpdater) && !lu._HasFlag(flag)) {
                lu.Flags |= flag;
            }
        };
        LayoutUpdater.prototype.UpdateLayer = function (pass, error) {
            var elNode = this.Node;
            var parentNode;
            while (parentNode = elNode.VisualParentNode)
                elNode = parentNode;
            var element = elNode.XObject;
            var layout = elNode.LayoutUpdater;
            var lu;
            while (pass.Count < maxPassCount) {
                while (lu = pass.ArrangeList.shift()) {
                    lu._PropagateFlagUp(UIElementFlags.DirtyArrangeHint);
                }
                while (lu = pass.SizeList.shift()) {
                    lu._PropagateFlagUp(UIElementFlags.DirtySizeHint);
                }
                pass.Count = pass.Count + 1;
                var flag = UIElementFlags.None;
                if (element.Visibility === Fayde.Visibility.Visible) {
                    if (layout._HasFlag(UIElementFlags.DirtyMeasureHint))
                        flag = UIElementFlags.DirtyMeasureHint;
else if (layout._HasFlag(UIElementFlags.DirtyArrangeHint))
                        flag = UIElementFlags.DirtyArrangeHint;
else if (layout._HasFlag(UIElementFlags.DirtySizeHint))
                        flag = UIElementFlags.DirtySizeHint;
                }
                if (flag !== UIElementFlags.None) {
                    var measureWalker = Fayde.DeepTreeWalker(elNode);
                    var childNode;
                    while (childNode = measureWalker.Step()) {
                        lu = childNode.LayoutUpdater;
                        if (childNode.XObject.Visibility !== Fayde.Visibility.Visible || !lu._HasFlag(flag)) {
                            measureWalker.SkipBranch();
                            continue;
                        }
                        lu._ClearFlag(flag);
                        switch (flag) {
                            case UIElementFlags.DirtyMeasureHint:
                                if (lu.DirtyFlags & _Dirty.Measure)
                                    pass.MeasureList.push(lu);
                                break;
                            case UIElementFlags.DirtyArrangeHint:
                                if (lu.DirtyFlags & _Dirty.Arrange)
                                    pass.ArrangeList.push(lu);
                                break;
                            case UIElementFlags.DirtySizeHint:
                                if (lu.LastRenderSize !== undefined)
                                    pass.SizeList.push(lu);
                                break;
                            default:
                                break;
                        }
                    }
                }
                if (flag === UIElementFlags.DirtyMeasureHint) {
                    while (lu = pass.MeasureList.shift()) {
                        lu._DoMeasureWithError(error);
                        pass.Updated = true;
                    }
                } else if (flag === UIElementFlags.DirtyArrangeHint) {
                    while (lu = pass.ArrangeList.shift()) {
                        lu._DoArrangeWithError(error);
                        pass.Updated = true;
                        if (layout._HasFlag(UIElementFlags.DirtyMeasureHint))
                            break;
                    }
                } else if (flag === UIElementFlags.DirtySizeHint) {
                    var changes = [];
                    while (lu = pass.SizeList.pop()) {
                        pass.Updated = true;
                        changes.push(lu._UpdateActualSize());
                    }
                    var change;
                    while (change = changes.pop()) {
                        change.Element.SizeChanged.Raise(change.Element, new Fayde.SizeChangedEventArgs(change.PreviousSize, change.NewSize));
                    }
                } else {
                    break;
                }
            }
        };
        LayoutUpdater.prototype._DoMeasureWithError = function (error) {
            var last = this.PreviousConstraint;
            var node = this.Node;
            var visualParentNode = node.VisualParentNode;
            if (!node.IsAttached && !last && !visualParentNode && this.IsLayoutContainer) {
                last = size.createInfinite();
            }
            if (last) {
                var previousDesired = size.copyTo(this.DesiredSize);
                this._Measure(last, error);
                if (size.isEqual(previousDesired, this.DesiredSize))
                    return;
            }
            if (visualParentNode)
                visualParentNode.LayoutUpdater.InvalidateMeasure();
            this.DirtyFlags &= ~_Dirty.Measure;
        };
        LayoutUpdater.prototype._Measure = function (availableSize, error) {
            if (error.Message)
                return;
            var node = this.Node;
            var fe = node.XObject;
            if (isNaN(availableSize.Width) || isNaN(availableSize.Height)) {
                error.Message = "Cannot call Measure using a size with NaN values";
                LayoutUpdater.LayoutExceptionUpdater = this;
                return;
            }
            var last = this.PreviousConstraint;
            var shouldMeasure = (this.DirtyFlags & _Dirty.Measure) > 0;
            shouldMeasure = shouldMeasure || (!last || last.Width !== availableSize.Width || last.Height !== availableSize.Height);
            if (fe.Visibility !== Fayde.Visibility.Visible) {
                this.PreviousConstraint = availableSize;
                size.clear(this.DesiredSize);
                return;
            }
            node.ApplyTemplateWithError(error);
            if (!shouldMeasure)
                return;
            this.PreviousConstraint = availableSize;
            this.InvalidateArrange();
            this.UpdateBounds();
            var s = size.copyTo(availableSize);
            var margin = fe.Margin;
            if (margin)
                size.shrinkByThickness(s, margin);
            this.CoerceSize(s);
            if ((fe).MeasureOverride) {
                s = (fe).MeasureOverride(s);
            } else {
                s = (fe)._MeasureOverride(s, error);
            }
            if (error.Message)
                return;
            this.DirtyFlags &= ~_Dirty.Measure;
            this.HiddenDesire = size.copyTo(s);
            var visualParentNode = node.VisualParentNode;
            if (!visualParentNode || visualParentNode instanceof Fayde.Controls.CanvasNode) {
                if (node instanceof Fayde.Controls.CanvasNode || !this.IsLayoutContainer) {
                    size.clear(this.DesiredSize);
                    return;
                }
            }
            this.CoerceSize(s);
            if (margin)
                size.growByThickness(s, margin);
            size.min(s, availableSize);
            if (fe.UseLayoutRounding) {
                s.Width = Math.round(s.Width);
                s.Height = Math.round(s.Height);
            }
            size.copyTo(s, this.DesiredSize);
        };
        LayoutUpdater.prototype._DoArrangeWithError = function (error) {
            var last = this.LayoutSlot;
            if (last === null)
                last = undefined;
            var n = this.Node;
            var fe = n.XObject;
            var visualParentNode = n.VisualParentNode;
            if (!visualParentNode) {
                var surface = this.Surface;
                var desired;
                if (this.IsLayoutContainer) {
                    desired = size.copyTo(this.DesiredSize);
                    if (n.IsAttached && n.IsTopLevel && !n.ParentNode) {
                        var measure = this.PreviousConstraint;
                        if (measure)
                            size.max(desired, measure);
else
                            desired = size.copyTo(surface.Extents);
                    }
                } else {
                    desired.Width = fe.ActualWidth;
                    desired.Height = fe.ActualHeight;
                }
                var viewport = rect.fromSize(desired);
                viewport.X = Fayde.Controls.Canvas.GetLeft(fe);
                viewport.Y = Fayde.Controls.Canvas.GetTop(fe);
                last = viewport;
            }
            if (last) {
                this._Arrange(last, error);
            } else {
                if (visualParentNode)
                    visualParentNode.LayoutUpdater.InvalidateArrange();
            }
        };
        LayoutUpdater.prototype._Arrange = function (finalRect, error) {
            if (error.Message)
                return;
            var node = this.Node;
            var fe = node.XObject;
            if (fe.UseLayoutRounding) {
                rect.round(finalRect);
            }
            if (finalRect.Width < 0 || finalRect.Height < 0 || !isFinite(finalRect.Width) || !isFinite(finalRect.Height) || isNaN(finalRect.Width) || isNaN(finalRect.Height)) {
                var desired = this.DesiredSize;
                error.Number = BError.Argument;
                error.Message = "Invalid arguments to Arrange. Desired = " + desired.toString();
                return;
            }
            if (fe.Visibility !== Fayde.Visibility.Visible) {
                this.LayoutSlot = finalRect;
                return;
            }
            var slot = this.LayoutSlot;
            var shouldArrange = (this.DirtyFlags & _Dirty.Arrange) > 0 || !slot || !rect.isEqual(slot, finalRect);
            if (!shouldArrange)
                return;
            var measure = this.PreviousConstraint;
            if (this.IsContainer && !measure) {
                this._Measure(size.fromRect(finalRect), error);
            }
            measure = this.PreviousConstraint;
            this.SetLayoutClip(undefined);
            var childRect = rect.copyTo(finalRect);
            var margin = fe.Margin;
            if (margin)
                rect.shrinkByThickness(childRect, margin);
            this.UpdateTransform();
            this.UpdateProjection();
            this.UpdateBounds();
            var offer = size.copyTo(this.HiddenDesire);
            var stretched = this.CoerceSize(size.fromRect(childRect));
            var framework = this.CoerceSize(new size());
            var horiz = fe.HorizontalAlignment;
            var vert = fe.VerticalAlignment;
            if (horiz === Fayde.HorizontalAlignment.Stretch)
                framework.Width = Math.max(framework.Width, stretched.Width);
            if (vert === Fayde.VerticalAlignment.Stretch)
                framework.Height = Math.max(framework.Height, stretched.Height);
            size.max(offer, framework);
            this.LayoutSlot = finalRect;
            var response;
            if ((fe).ArrangeOverride) {
                response = (fe).ArrangeOverride(offer);
            } else {
                response = (fe)._ArrangeOverride(offer, error);
            }
            if (horiz === Fayde.HorizontalAlignment.Stretch)
                response.Width = Math.max(response.Width, framework.Width);
            if (vert === Fayde.VerticalAlignment.Stretch)
                response.Height = Math.max(response.Height, framework.Height);
            var flipHoriz = false;
            var flowDirection = fe.FlowDirection;
            var visualParentNode = node.VisualParentNode;
            if (visualParentNode)
                flipHoriz = visualParentNode.XObject.FlowDirection !== flowDirection;
else if (node.ParentNode instanceof Fayde.Controls.Primitives.PopupNode)
                flipHoriz = (node.ParentNode).XObject.FlowDirection !== flowDirection;
else
                flipHoriz = flowDirection === Fayde.FlowDirection.RightToLeft;
            var layoutXform = mat3.identity(this.LayoutXform);
            mat3.translate(layoutXform, childRect.X, childRect.Y);
            if (flipHoriz) {
                mat3.translate(layoutXform, offer.Width, 0);
                mat3.scale(layoutXform, -1, 1);
            }
            if (error.Message)
                return;
            this.DirtyFlags &= ~_Dirty.Arrange;
            var visualOffset = this.VisualOffset;
            visualOffset.X = childRect.X;
            visualOffset.Y = childRect.Y;
            var oldSize = size.copyTo(this.RenderSize);
            if (fe.UseLayoutRounding) {
                response.Width = Math.round(response.Width);
                response.Height = Math.round(response.Height);
            }
            size.copyTo(response, this.RenderSize);
            var constrainedResponse = this.CoerceSize(size.copyTo(response));
            size.min(constrainedResponse, response);
            if (!visualParentNode || visualParentNode instanceof Fayde.Controls.CanvasNode) {
                if (!this.IsLayoutContainer) {
                    size.clear(this.RenderSize);
                    return;
                }
            }
            var isTopLevel = node.IsAttached && node.IsTopLevel;
            if (!isTopLevel) {
                switch (horiz) {
                    case Fayde.HorizontalAlignment.Left:
                        break;
                    case Fayde.HorizontalAlignment.Right:
                        visualOffset.X += childRect.Width - constrainedResponse.Width;
                        break;
                    case Fayde.HorizontalAlignment.Center:
                        visualOffset.X += (childRect.Width - constrainedResponse.Width) * 0.5;
                        break;
                    default:
                        visualOffset.X += Math.max((childRect.Width - constrainedResponse.Width) * 0.5, 0);
                        break;
                }
                switch (vert) {
                    case Fayde.VerticalAlignment.Top:
                        break;
                    case Fayde.VerticalAlignment.Bottom:
                        visualOffset.Y += childRect.Height - constrainedResponse.Height;
                        break;
                    case Fayde.VerticalAlignment.Center:
                        visualOffset.Y += (childRect.Height - constrainedResponse.Height) * 0.5;
                        break;
                    default:
                        visualOffset.Y += Math.max((childRect.Height - constrainedResponse.Height) * 0.5, 0);
                        break;
                }
            }
            if (fe.UseLayoutRounding) {
                visualOffset.X = Math.round(visualOffset.X);
                visualOffset.Y = Math.round(visualOffset.Y);
            }
            layoutXform = mat3.identity(this.LayoutXform);
            mat3.translate(layoutXform, visualOffset.X, visualOffset.Y);
            if (flipHoriz) {
                mat3.translate(layoutXform, response.Width, 0);
                mat3.scale(layoutXform, -1, 1);
            }
            var element = new rect();
            element.Width = response.Width;
            element.Height = response.Height;
            var layoutClip = rect.copyTo(childRect);
            layoutClip.X = Math.max(childRect.X - visualOffset.X, 0);
            layoutClip.Y = Math.max(childRect.Y - visualOffset.Y, 0);
            if (fe.UseLayoutRounding) {
                layoutClip.X = Math.round(layoutClip.X);
                layoutClip.Y = Math.round(layoutClip.Y);
            }
            var oldLayoutClip = this.LayoutClip;
            if (((!isTopLevel && !rect.isRectContainedIn(element, layoutClip)) || !size.isEqual(constrainedResponse, response)) && !(node instanceof Fayde.Controls.CanvasNode) && ((visualParentNode && !(visualParentNode instanceof Fayde.Controls.CanvasNode)) || this.IsContainer)) {
                var frameworkClip = this.CoerceSize(size.createInfinite());
                var frect = rect.fromSize(frameworkClip);
                rect.intersection(layoutClip, frect);
                this.SetLayoutClip(layoutClip);
            }
            if (!size.isEqual(oldSize, response)) {
                if (!this.LastRenderSize) {
                    this.LastRenderSize = oldSize;
                    this._PropagateFlagUp(UIElementFlags.DirtySizeHint);
                }
            }
        };
        LayoutUpdater.prototype.DoRender = function (ctx, r) {
            if (!this.TotalIsRenderVisible)
                return;
            if ((this.TotalOpacity * 255) < 0.5)
                return;
            var region = new rect();
            if (false) {
            } else {
                rect.copyTo(this.ExtentsWithChildren, region);
                rect.transform(region, this.RenderXform);
                rect.transform(region, ctx.CurrentTransform);
                rect.roundOut(region);
                rect.intersection(region, r);
            }
            if (rect.isEmpty(region))
                return;
            ctx.Save();
            ctx.TransformMatrix(this.RenderXform);
            ctx.CanvasContext.globalAlpha = this.TotalOpacity;
            var uie = this.Node.XObject;
            var canvasCtx = ctx.CanvasContext;
            var clip = uie.Clip;
            if (clip) {
                clip.Draw(ctx);
                canvasCtx.clip();
            }

            var effect = uie.Effect;
            if (effect) {
                canvasCtx.save();
                effect.PreRender(ctx);
            }
            if ((uie).Render)
                (uie).Render(ctx, this, region);
            if (effect) {
                canvasCtx.restore();
            }
            var enumerator = this.Node.GetVisualTreeEnumerator(Fayde.VisualTreeDirection.ZFoward);
            while (enumerator.MoveNext()) {
                (enumerator.Current).LayoutUpdater.DoRender(ctx, region);
            }
            ctx.Restore();
        };
        LayoutUpdater.prototype.FindElementsInHostCoordinates = function (p) {
            var uinlist = [];
            this._FindElementsInHostCoordinates(this.Surface.TestRenderContext, p, uinlist, false);
            return uinlist;
        };
        LayoutUpdater.prototype._FindElementsInHostCoordinates = function (ctx, p, uinlist, applyXform) {
            if (this.ShouldSkipHitTest)
                return;
            if (!this.TotalIsRenderVisible)
                return;
            if (!this.TotalIsHitTestVisible)
                return;
            if (this.SurfaceBoundsWithChildren.Height <= 0)
                return;
            var thisNode = this.Node;
            ctx.Save();
            if (applyXform)
                ctx.TransformMatrix(this.RenderXform);
            if (!this._InsideClip(ctx, p.X, p.Y)) {
                ctx.Restore();
                return;
            }
            uinlist.unshift(thisNode);
            var enumerator = thisNode.GetVisualTreeEnumerator(Fayde.VisualTreeDirection.ZFoward);
            while (enumerator.MoveNext()) {
                (enumerator.Current).LayoutUpdater._FindElementsInHostCoordinates(ctx, p, uinlist, true);
            }
            if (thisNode === uinlist[0]) {
                if (!this.CanHitElement || !this._InsideObject(ctx, p.X, p.Y))
                    uinlist.shift();
            }
            ctx.Restore();
        };
        LayoutUpdater.prototype.HitTestPoint = function (ctx, p, uinlist) {
            if (this.ShouldSkipHitTest)
                return;
            if (!this.TotalIsRenderVisible)
                return;
            if (!this.TotalIsHitTestVisible)
                return;
            ctx.Save();
            ctx.TransformMatrix(this.RenderXform);
            if (!this._InsideClip(ctx, p.X, p.Y)) {
                ctx.Restore();
                return;
            }
            var thisNode = this.Node;
            uinlist.unshift(thisNode);
            var hit = false;
            var enumerator = thisNode.GetVisualTreeEnumerator(Fayde.VisualTreeDirection.ZReverse);
            while (enumerator.MoveNext()) {
                var childNode = (enumerator.Current);
                childNode.LayoutUpdater.HitTestPoint(ctx, p, uinlist);
                if (thisNode !== uinlist[0]) {
                    hit = true;
                    break;
                }
            }
            if (!hit && !(this.CanHitElement && this._InsideObject(ctx, p.X, p.Y))) {
                if (uinlist.shift() !== thisNode) {
                    throw new Exception("Look at my code! -> FENode._HitTestPoint");
                }
            }
            ctx.Restore();
        };
        LayoutUpdater.prototype._InsideObject = function (ctx, x, y) {
            if (this.IsNeverInsideObject)
                return false;
            var bounds = new rect();
            var fe = this.Node.XObject;
            rect.set(bounds, 0, 0, fe.ActualWidth, fe.ActualHeight);
            rect.transform(bounds, ctx.CurrentTransform);
            if (!rect.containsPointXY(bounds, x, y))
                return false;
            if (!this._InsideLayoutClip(ctx, x, y))
                return false;
            if ((this.Node).PostInsideObject)
                return (this.Node).PostInsideObject(ctx, this, x, y);
            return true;
        };
        LayoutUpdater.prototype._InsideClip = function (ctx, x, y) {
            var clip = this.Node.XObject.Clip;
            if (!clip)
                return true;
            var bounds = clip.GetBounds();
            rect.transform(bounds, ctx.CurrentTransform);
            if (!rect.containsPointXY(bounds, x, y))
                return false;
            return ctx.IsPointInClipPath(clip, x, y);
        };
        LayoutUpdater.prototype._InsideLayoutClip = function (ctx, x, y) {
            var layoutClip = this.LayoutClip;
            if (!layoutClip)
                return true;
            var layoutClipBounds = rect.copyTo(layoutClip);
            rect.transform(layoutClipBounds, ctx.CurrentTransform);
            return rect.containsPointXY(layoutClipBounds, x, y);
        };
        LayoutUpdater.prototype.RenderLayoutClip = function (ctx) {
            var composite = this.CompositeLayoutClip;
            if (composite)
                ctx.ClipRect(composite);
        };
        LayoutUpdater.LayoutExceptionUpdater = undefined;
        return LayoutUpdater;
    })();
    Fayde.LayoutUpdater = LayoutUpdater;
    Fayde.RegisterType(LayoutUpdater, {
        Name: "LayoutUpdater",
        Namespace: "Fayde"
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var NameScope = (function () {
        function NameScope(isRoot) {
            this.IsRoot = false;
            this.XNodes = {};
            if (isRoot)
                this.IsRoot = isRoot;
        }
        NameScope.prototype.FindName = function (name) {
            return this.XNodes[name];
        };
        NameScope.prototype.RegisterName = function (name, xnode) {
            var existing = this.XNodes[name];
            if (existing && existing !== xnode)
                throw new InvalidOperationException("Name is already registered.");
            this.XNodes[name] = xnode;
        };
        NameScope.prototype.UnregisterName = function (name) {
            this.XNodes[name] = undefined;
        };
        NameScope.prototype.Absorb = function (otherNs) {
            var on = otherNs.XNodes;
            for (var name in on) {
                this.RegisterName(name, on[name]);
            }
        };
        return NameScope;
    })();
    Fayde.NameScope = NameScope;
    Fayde.RegisterType(NameScope, {
        Name: "NameScope",
        Namespace: "Fayde"
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var TemplateBindingExpression = (function (_super) {
        __extends(TemplateBindingExpression, _super);
        function TemplateBindingExpression(sourcePropd, targetPropd) {
            _super.call(this);
            this._SetsParent = false;
            this.SourceProperty = sourcePropd;
            this.TargetProperty = targetPropd;
        }
        TemplateBindingExpression.prototype.GetValue = function (propd) {
            var target = this._Target;
            var source = target.TemplateOwner;
            var value;
            if (source)
                value = source.GetValue(this.SourceProperty);
            value = Fayde.ConvertAnyToType(value, this.TargetProperty.GetTargetType());
            return value;
        };
        TemplateBindingExpression.prototype.OnAttached = function (dobj) {
            _super.prototype.OnAttached.call(this, dobj);
            this._Target = dobj;
            this._DetachListener();
            var cc;
            if (this._Target instanceof Fayde.Controls.ContentControl)
                cc = this._Target;
            if (cc && this.TargetProperty._ID === Fayde.Controls.ContentControl.ContentProperty._ID) {
                this._SetsParent = cc._ContentSetsParent;
                cc._ContentSetsParent = false;
            }
            this._AttachListener();
        };
        TemplateBindingExpression.prototype.OnDetached = function (dobj) {
            _super.prototype.OnDetached.call(this, dobj);
            var listener = this._Listener;
            if (!listener)
                return;
            var cc;
            if (this._Target instanceof Fayde.Controls.ContentControl)
                cc = this._Target;
            if (cc)
                cc._ContentSetsParent = this._SetsParent;
            this._DetachListener();
            this._Target = null;
        };
        TemplateBindingExpression.prototype.OnSourcePropertyChanged = function (sender, args) {
            if (this.SourceProperty._ID !== args.Property._ID)
                return;
            try  {
                this.IsUpdating = true;
                var targetProp = this.TargetProperty;
                try  {
                    this._Target.SetStoreValue(targetProp, this.GetValue(null));
                } catch (err2) {
                    var val = targetProp.DefaultValue;
                    this._Target.SetStoreValue(targetProp, val);
                }
            } catch (err) {
            } finally {
                this.IsUpdating = false;
            }
        };
        TemplateBindingExpression.prototype._AttachListener = function () {
            var _this = this;
            var source = this._Target.TemplateOwner;
            if (!source)
                return;
            this._Listener = this.SourceProperty.Store.ListenToChanged(source, this.SourceProperty, function (sender, args) {
                return _this.OnSourcePropertyChanged(sender, args);
            }, this);
        };
        TemplateBindingExpression.prototype._DetachListener = function () {
            var listener = this._Listener;
            if (listener) {
                this._Listener.Detach();
                this._Listener = null;
            }
        };
        return TemplateBindingExpression;
    })(Fayde.Expression);
    Fayde.TemplateBindingExpression = TemplateBindingExpression;
    Fayde.RegisterType(TemplateBindingExpression, {
        Name: "TemplateBindingExpression",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (VisualTreeDirection) {
        VisualTreeDirection[VisualTreeDirection["Logical"] = 0] = "Logical";
        VisualTreeDirection[VisualTreeDirection["LogicalReverse"] = 1] = "LogicalReverse";
        VisualTreeDirection[VisualTreeDirection["ZFoward"] = 2] = "ZFoward";
        VisualTreeDirection[VisualTreeDirection["ZReverse"] = 3] = "ZReverse";
    })(Fayde.VisualTreeDirection || (Fayde.VisualTreeDirection = {}));
    var VisualTreeDirection = Fayde.VisualTreeDirection;

    var XamlNode = (function () {
        function XamlNode(xobj) {
            this.ParentNode = null;
            this.Name = "";
            this.NameScope = null;
            this.IsShareable = false;
            this._OwnerNameScope = null;
            this._LogicalChildren = [];
            this._IAMonitors = null;
            this._DataContext = undefined;
            this._IsEnabled = true;
            this.IsAttached = false;
            this.XObject = xobj;
        }
        Object.defineProperty(XamlNode.prototype, "DataContext", {
            get: function () {
                return this._DataContext;
            },
            set: function (value) {
                var old = this._DataContext;
                if (old === value)
                    return;
                this._DataContext = value;
                this.OnDataContextChanged(old, value);
            },
            enumerable: true,
            configurable: true
        });
        XamlNode.prototype.OnDataContextChanged = function (oldDataContext, newDataContext) {
            var childNodes = this._LogicalChildren;
            var len = childNodes.length;
            var childNode = null;
            for (var i = 0; i < len; i++) {
                childNode = childNodes[i];
                childNode.DataContext = newDataContext;
            }
        };

        Object.defineProperty(XamlNode.prototype, "IsEnabled", {
            get: function () {
                return this._IsEnabled;
            },
            set: function (value) {
                value = value !== false;
                var old = this._IsEnabled;
                if (old === value)
                    return;
                this._IsEnabled = value;
                this.OnIsEnabledChanged(old, value);
            },
            enumerable: true,
            configurable: true
        });
        XamlNode.prototype.OnIsEnabledChanged = function (oldValue, newValue) {
            var childNodes = this._LogicalChildren;
            var len = childNodes.length;
            var childNode = null;
            for (var i = 0; i < len; i++) {
                childNode = childNodes[i];
                childNode.IsEnabled = newValue;
            }
        };
        XamlNode.prototype.FindName = function (name) {
            var scope = this.FindNameScope();
            if (scope)
                return scope.FindName(name);
            return undefined;
        };
        XamlNode.prototype.SetName = function (name) {
            this.Name = name;
            var ns = this.FindNameScope();
            if (ns)
                ns.RegisterName(name, this);
        };
        XamlNode.prototype.FindNameScope = function () {
            if (this._OwnerNameScope)
                return this._OwnerNameScope;
            var curNode = this;
            var ns;
            while (curNode) {
                ns = curNode.NameScope;
                if (ns) {
                    this._OwnerNameScope = ns;
                    return ns;
                }
                curNode = curNode.ParentNode;
            }
            return undefined;
        };

        XamlNode.prototype.SetIsAttached = function (value) {
            if (this.IsAttached === value)
                return;
            this.IsAttached = value;
            this.OnIsAttachedChanged(value);
        };
        XamlNode.prototype.OnIsAttachedChanged = function (newIsAttached) {
            var childNodes = this._LogicalChildren;
            var len = childNodes.length;
            var childNode = null;
            for (var i = 0; i < len; i++) {
                childNode = childNodes[i];
                childNode.SetIsAttached(newIsAttached);
            }
            var monitors = this._IAMonitors;
            if (!monitors)
                return;
            len = monitors.length;
            for (var i = 0; i < len; i++) {
                monitors[i].Callback(newIsAttached);
            }
        };
        XamlNode.prototype.MonitorIsAttached = function (func) {
            var monitors = this._IAMonitors;
            if (!monitors)
                this._IAMonitors = monitors = [];
            var monitor = {
                Callback: func,
                Detach: null
            };
            monitor.Detach = function () {
                var index = monitors.indexOf(monitor);
                if (index > -1)
                    monitors.splice(index, 1);
            };
            this._IAMonitors.push(monitor);
            return monitor;
        };
        XamlNode.prototype.AttachTo = function (parentNode, error) {
            if (this.ParentNode && this.IsShareable)
                return true;
            var data = {
                ParentNode: parentNode,
                ChildNode: this,
                Name: ""
            };
            var curNode = parentNode;
            while (curNode) {
                if (curNode === this) {
                    error.Message = "Cycle found.";
                    error.Data = data;
                    error.Number = BError.Attach;
                    return false;
                }
                curNode = curNode.ParentNode;
            }
            if (this.ParentNode) {
                if (this.ParentNode === parentNode)
                    return true;
                error.Message = "Element is already a child of another element.";
                error.Data = data;
                error.Number = BError.Attach;
                return false;
            }
            var parentScope = parentNode.FindNameScope();
            var thisScope = this.NameScope;
            if (thisScope) {
                if (!thisScope.IsRoot) {
                    parentScope.Absorb(thisScope);
                    this.NameScope = null;
                    this._OwnerNameScope = parentScope;
                }
            } else if (parentScope) {
                var name = this.Name;
                if (name) {
                    var existing = parentScope.FindName(name);
                    if (existing && existing !== this) {
                        error.Message = "Name is already registered in parent namescope.";
                        data.Name = name;
                        error.Data = data;
                        error.Number = BError.Attach;
                        return false;
                    }
                    parentScope.RegisterName(name, this);
                }
                this._OwnerNameScope = parentScope;
            }
            var old = this.ParentNode;
            this.ParentNode = parentNode;
            this.OnParentChanged(old, parentNode);
            parentNode._LogicalChildren.push(this);
            this.SetIsAttached(parentNode.IsAttached);
            return true;
        };
        XamlNode.prototype.Detach = function () {
            var name = this.Name;
            if (name && !this.NameScope) {
                var ns = this.FindNameScope();
                if (ns)
                    ns.UnregisterName(this.Name);
            }
            this._OwnerNameScope = null;
            this.SetIsAttached(false);
            var old = this.ParentNode;
            this.ParentNode = null;
            if (old) {
                var index = old._LogicalChildren.indexOf(this);
                if (index > -1)
                    old._LogicalChildren.splice(index, 1);
                this.OnParentChanged(old, null);
            }
        };
        XamlNode.prototype.OnParentChanged = function (oldParentNode, newParentNode) {
        };
        XamlNode.prototype.GetInheritedEnumerator = function () {
            return undefined;
        };
        XamlNode.prototype.GetVisualTreeEnumerator = function (direction) {
            return undefined;
        };
        XamlNode.SetShareable = function (xn) {
            xn.IsShareable = true;
        };
        return XamlNode;
    })();
    Fayde.XamlNode = XamlNode;
    Fayde.RegisterType(XamlNode, {
        Name: "XamlNode",
        Namespace: "Fayde"
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var XamlObject = (function () {
        function XamlObject() {
            this.TemplateOwner = null;
            this._ID = XamlObject._LastID++;
            this.XamlNode = this.CreateNode();
        }
        XamlObject.prototype.CreateNode = function () {
            return new Fayde.XamlNode(this);
        };
        Object.defineProperty(XamlObject.prototype, "Name", {
            get: function () {
                return this.XamlNode.Name;
            },
            enumerable: true,
            configurable: true
        });
        XamlObject.prototype.Clone = function () {
            var xobj = new (this).constructor();
            xobj.CloneCore(this);
            return xobj;
        };
        XamlObject.prototype.CloneCore = function (source) {
        };
        XamlObject.prototype.IsInheritable = function (propd) {
            return false;
        };
        XamlObject._LastID = 0;
        return XamlObject;
    })();
    Fayde.XamlObject = XamlObject;
    Fayde.RegisterType(XamlObject, {
        Name: "XamlObject",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var XamlObjectCollection = (function (_super) {
        __extends(XamlObjectCollection, _super);
        function XamlObjectCollection() {
            _super.apply(this, arguments);
            this._ht = [];
        }
        XamlObjectCollection.prototype.AttachTo = function (xobj) {
            var error = new BError();
            if (!this.XamlNode.AttachTo(xobj.XamlNode, error))
                error.ThrowException();
        };
        Object.defineProperty(XamlObjectCollection.prototype, "Count", {
            get: function () {
                return this._ht.length;
            },
            enumerable: true,
            configurable: true
        });
        XamlObjectCollection.prototype.GetRange = function (startIndex, endIndex) {
            return this._ht.slice(startIndex, endIndex);
        };
        XamlObjectCollection.prototype.GetValueAt = function (index) {
            return this._ht[index];
        };
        XamlObjectCollection.prototype.SetValueAt = function (index, value) {
            if (!this.CanAdd(value))
                return false;
            if (index < 0 || index >= this._ht.length)
                return false;
            var removed = this._ht[index];
            var added = value;
            var error = new BError();
            if (this.AddingToCollection(added, error)) {
                this._ht[index] = added;
                this.RemovedFromCollection(removed, true);
                this._RaiseItemReplaced(removed, added, index);
                return true;
            }
            return false;
        };
        XamlObjectCollection.prototype.Add = function (value) {
            var rv = this.Insert(this._ht.length, value);
            return rv ? this._ht.length - 1 : -1;
        };
        XamlObjectCollection.prototype.Insert = function (index, value) {
            if (!this.CanAdd(value))
                return false;
            if (index < 0)
                return false;
            var count = this._ht.length;
            if (index > count)
                index = count;
            var error = new BError();
            if (this.AddingToCollection(value, error)) {
                this._ht.splice(index, 0, value);
                this._RaiseItemAdded(value, index);
                return true;
            }
            if (error.Message)
                throw new Exception(error.Message);
            return false;
        };
        XamlObjectCollection.prototype.Remove = function (value) {
            var index = this.IndexOf(value);
            if (index === -1)
                return false;
            return this.RemoveAt(index);
        };
        XamlObjectCollection.prototype.RemoveAt = function (index) {
            if (index < 0 || index >= this._ht.length)
                return false;
            var value = this._ht[index];
            this._ht.splice(index, 1);
            this.RemovedFromCollection(value, true);
            this._RaiseItemRemoved(value, index);
            return true;
        };
        XamlObjectCollection.prototype.Clear = function () {
            var old = this._ht;
            this._ht = [];
            var len = old.length;
            for (var i = 0; i < len; i++) {
                this.RemovedFromCollection(old[i], true);
            }
            this._RaiseCleared();
            return true;
        };
        XamlObjectCollection.prototype.IndexOf = function (value) {
            return this._ht.indexOf(value);
        };
        XamlObjectCollection.prototype.Contains = function (value) {
            return this.IndexOf(value) > -1;
        };
        XamlObjectCollection.prototype.CanAdd = function (value) {
            return true;
        };
        XamlObjectCollection.prototype.AddingToCollection = function (value, error) {
            if (value instanceof Fayde.XamlObject)
                return value.XamlNode.AttachTo(this.XamlNode, error);
            return true;
        };
        XamlObjectCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
            if (value instanceof Fayde.XamlObject)
                value.XamlNode.Detach();
        };
        XamlObjectCollection.prototype.GetEnumerator = function (reverse) {
            return Fayde.ArrayEx.GetEnumerator(this._ht, reverse);
        };
        XamlObjectCollection.prototype.GetNodeEnumerator = function (reverse) {
            return Fayde.ArrayEx.GetNodeEnumerator(this._ht, reverse);
        };
        XamlObjectCollection.prototype._RaiseItemAdded = function (value, index) {
        };
        XamlObjectCollection.prototype._RaiseItemRemoved = function (value, index) {
        };
        XamlObjectCollection.prototype._RaiseItemReplaced = function (removed, added, index) {
        };
        XamlObjectCollection.prototype._RaiseCleared = function () {
        };
        XamlObjectCollection.prototype.CloneCore = function (source) {
            var enumerator = Fayde.ArrayEx.GetEnumerator(source._ht);
            while (enumerator.MoveNext()) {
                this.Add(Fayde.Clone(enumerator.Current));
            }
        };
        XamlObjectCollection.prototype.ToArray = function () {
            return this._ht.slice(0);
        };
        return XamlObjectCollection;
    })(Fayde.XamlObject);
    Fayde.XamlObjectCollection = XamlObjectCollection;
    Fayde.RegisterType(XamlObjectCollection, {
        Name: "XamlObjectCollection",
        Namespace: "Fayde",
        Interfaces: [Fayde.IEnumerable_]
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Data) {
        var BindingExpressionBase = (function (_super) {
            __extends(BindingExpressionBase, _super);
            function BindingExpressionBase(binding, target, propd) {
                _super.call(this);
                this._TwoWayTextBox = null;
                this._Cached = false;
                this._CachedValue = undefined;
                this._Init(binding, target, propd);
            }
            Object.defineProperty(BindingExpressionBase.prototype, "DataItem", {
                get: function () {
                    return this.PropertyPathWalker.Source;
                },
                enumerable: true,
                configurable: true
            });

            BindingExpressionBase.prototype._Init = function (binding, target, propd) {
                Object.defineProperty(this, "ParentBinding", {
                    value: binding,
                    writable: false
                });
                Object.defineProperty(this, "Target", {
                    value: target,
                    writable: false
                });
                Object.defineProperty(this, "Property", {
                    value: propd,
                    writable: false
                });
                if (target instanceof Fayde.Controls.TextBox && binding.Mode === Data.BindingMode.TwoWay)
                    this._TwoWayTextBox = target;
                this._IsDataContextBound = !binding.ElementName && !binding.Source && !binding.RelativeSource;
                var bindsToView = propd === Fayde.DependencyObject.DataContextProperty || propd.GetTargetType() === Fayde.IEnumerable_ || propd.GetTargetType() === Fayde.Data.ICollectionView_;
                var walker = this.PropertyPathWalker = new Data.PropertyPathWalker(binding.Path.ParsePath, binding.BindsDirectlyToSource, bindsToView, this._IsDataContextBound);
                if (binding.Mode !== Data.BindingMode.OneTime)
                    walker.Listen(this);
            };
            BindingExpressionBase.prototype.GetValue = function (propd) {
                if (this._Cached)
                    return this._CachedValue;
                this._Cached = true;
                if (this.PropertyPathWalker.IsPathBroken) {
                    this._CachedValue = null;
                } else {
                    this._CachedValue = this.PropertyPathWalker.ValueInternal;
                }
                try  {
                    this._CachedValue = this._ConvertToType(propd, this._CachedValue);
                } catch (err) {
                    this._CachedValue = propd.DefaultValue;
                }
                return this._CachedValue;
            };
            BindingExpressionBase.prototype.OnAttached = function (element) {
                var _this = this;
                if (this.IsAttached)
                    return;
                if (Fayde.Data.Debug && window.console)
                    console.log("[BINDING] OnAttached: [" + (element).constructor._TypeName + "] {Path=" + this.ParentBinding.Path.Path + "}");
                _super.prototype.OnAttached.call(this, element);
                var source;
                if (this.ParentBinding.Source) {
                    source = this.ParentBinding.Source;
                } else if (this.ParentBinding.ElementName != null) {
                    source = this._FindSourceByElementName();
                    this._SourceAvailableMonitor = this.Target.XamlNode.MonitorIsAttached(function (newIsAttached) {
                        return _this._OnSourceAvailable();
                    });
                } else if (this.ParentBinding.RelativeSource) {
                    switch (this.ParentBinding.RelativeSource.Mode) {
                        case Data.RelativeSourceMode.Self:
                            source = this.Target;
                            break;
                        case Data.RelativeSourceMode.TemplatedParent:
                            source = this.Target.TemplateOwner;
                            break;
                        case Data.RelativeSourceMode.FindAncestor:
                            break;
                    }
                } else {
                    source = this._DataContext;
                }
                this.PropertyPathWalker.Update(source);
                if (this._TwoWayTextBox)
                    this._TwoWayTextBox.LostFocus.Subscribe(this._TextBoxLostFocus, this);
                if (this.ParentBinding.Mode === Data.BindingMode.TwoWay && this.Property.IsCustom) {
                    this._PropertyListener = this.Property.Store.ListenToChanged(this.Target, this.Property, this._UpdateSourceCallback, this);
                }
            };
            BindingExpressionBase.prototype._OnSourceAvailable = function () {
                this._SourceAvailableMonitor.Detach();
                var source = this._FindSourceByElementName();
                if (source)
                    this.PropertyPathWalker.Update(source);
                this._Invalidate();
                this.Target.SetValue(this.Property, this);
            };
            BindingExpressionBase.prototype._FindSourceByElementName = function () {
                var xobj = this.Target;
                var sourceNode;
                var name = this.ParentBinding.ElementName;
                var xnode = (xobj) ? xobj.XamlNode : null;
                var parentNode;
                while (xnode) {
                    sourceNode = xnode.FindName(name);
                    if (sourceNode)
                        return sourceNode.XObject;
                    if (xnode.XObject.TemplateOwner)
                        xobj = xnode.XObject.TemplateOwner;
else if ((parentNode = xnode.ParentNode) && Fayde.Controls.ItemsControl.GetItemsOwner(parentNode.XObject))
                        xnode = parentNode;
                    break;
                }
                return undefined;
            };
            BindingExpressionBase.prototype.OnDetached = function (element) {
                if (!this.IsAttached)
                    return;
                if (Fayde.Data.Debug && window.console)
                    console.log("[BINDING] OnDetached: [" + (element).constructor._TypeName + "] {Path=" + this.ParentBinding.Path.Path + "}");
                _super.prototype.OnDetached.call(this, element);
                if (this._TwoWayTextBox)
                    this._TwoWayTextBox.LostFocus.Unsubscribe(this._TextBoxLostFocus, this);

                if (this._PropertyListener) {
                    this._PropertyListener.Detach();
                    this._PropertyListener = null;
                }
                this.PropertyPathWalker.Update(null);
                this.Target = undefined;
            };
            BindingExpressionBase.prototype.IsBrokenChanged = function () {
                this.Refresh();
            };
            BindingExpressionBase.prototype.ValueChanged = function () {
                this.Refresh();
            };
            BindingExpressionBase.prototype.UpdateSource = function () {
                return this._UpdateSourceObject(undefined, true);
            };
            BindingExpressionBase.prototype._TryUpdateSourceObject = function (value) {
                if (!this.IsUpdating && this.ParentBinding.UpdateSourceTrigger === Data.UpdateSourceTrigger.Default)
                    this._UpdateSourceObject(value, false);
            };
            BindingExpressionBase.prototype._UpdateSourceCallback = function (sender, args) {
                try  {
                    if (!this.IsUpdating && this.ParentBinding.UpdateSourceTrigger === Data.UpdateSourceTrigger.Default)
                        this._UpdateSourceObject(this.Target.GetValue(this.Property), false);
                } catch (err) {
                    console.warn("[BINDING] UpdateSource: " + err.toString());
                }
            };
            BindingExpressionBase.prototype._TextBoxLostFocus = function () {
                this._UpdateSourceObject();
            };
            BindingExpressionBase.prototype._UpdateSourceObject = function (value, force) {
                if (value === undefined)
                    value = this.Target.GetValue(this.Property);
                force = force === true;
                var binding = this.ParentBinding;
                if (binding.Mode !== Data.BindingMode.TwoWay)
                    return;
                var dataError;
                var exception;
                var oldUpdating = this.IsUpdating;
                var node = this.PropertyPathWalker.FinalNode;
                try  {
                    if (!force && this._TwoWayTextBox && Fayde.Application.Current.MainSurface.FocusedNode === this.Target.XamlNode)
                        return;
                    if (this.PropertyPathWalker.IsPathBroken)
                        return;
                    if (binding.TargetNullValue && binding.TargetNullValue === value)
                        value = null;
                    var converter = binding.Converter;
                    if (converter) {
                        value = converter.ConvertBack(value, node.ValueType, binding.ConverterParameter, binding.ConverterCulture);
                    }
                    if (value instanceof String) {
                    }
                    try  {
                        if (value)
                            value = this._ConvertFromTargetToSource(value);
                    } catch (err) {
                        console.warn("[BINDING] ConvertFromTargetToSource: " + err.toString());
                        return;
                    }
                    if (!this._CachedValue && !value)
                        return;
                    this.IsUpdating = true;
                    node.SetValue(value);
                    this._CachedValue = value;
                } catch (err) {
                    if (binding.ValidatesOnExceptions) {
                        if (err instanceof TargetInvocationException)
                            exception = err.InnerException;
                        exception = err;
                    }
                } finally {
                    this.IsUpdating = oldUpdating;
                }
                this._MaybeEmitError(dataError, exception);
            };
            BindingExpressionBase.prototype.OnDataContextChanged = function (newDataContext) {
                if (Fayde.Data.Debug && window.console)
                    console.log("[BINDING] DataContextChanged: [" + (this.Target)._ID + ":" + (this.Target).constructor._TypeName + "] {Path=" + this.ParentBinding.Path.Path + "}");
                if (this._DataContext === newDataContext)
                    return;
                this._DataContext = newDataContext;
                if (!this._IsDataContextBound)
                    return;
                if (Fayde.Data.IsCounterEnabled)
                    Fayde.Data.DataContextCounter++;
                try  {
                    this.PropertyPathWalker.Update(newDataContext);
                    if (this.ParentBinding.Mode === Data.BindingMode.OneTime)
                        this.Refresh();
                } catch (err) {
                    console.warn(err.message);
                }
            };
            BindingExpressionBase.prototype._Invalidate = function () {
                this._Cached = false;
                this._CachedValue = undefined;
            };
            BindingExpressionBase.prototype.Refresh = function () {
                var dataError;
                var exception;
                if (!this.IsAttached)
                    return;
                var oldUpdating = this.IsUpdating;
                try  {
                    this.IsUpdating = true;
                    this._Invalidate();
                    this.Target.SetValue(this.Property, this);
                } catch (err) {
                    if (this.ParentBinding.ValidatesOnExceptions) {
                        exception = err;
                        if (exception instanceof TargetInvocationException)
                            exception = (exception).InnerException;
                    }
                } finally {
                    this.IsUpdating = oldUpdating;
                }
                this._MaybeEmitError(dataError, exception);
            };
            BindingExpressionBase.prototype._ConvertFromTargetToSource = function (value) {
                NotImplemented("BindingExpressionBase._ConvertFromTargetToSource");
                return value;
            };
            BindingExpressionBase.prototype._ConvertFromSourceToTarget = function (value) {
                NotImplemented("BindingExpressionBase._ConvertFromSourceToTarget");
                return value;
            };
            BindingExpressionBase.prototype._ConvertToType = function (propd, value) {
                try  {
                    var binding = this.ParentBinding;
                    if (!this.PropertyPathWalker.IsPathBroken && binding.Converter) {
                        value = binding.Converter.Convert(value, this.Property.GetTargetType(), binding.ConverterParameter, binding.ConverterCulture);
                    }
                    if (value === Fayde.UnsetValue || this.PropertyPathWalker.IsPathBroken) {
                        value = binding.FallbackValue;
                        if (value === undefined)
                            value = propd.DefaultValue;
                    } else if (value == null) {
                        value = binding.TargetNullValue;
                        if (value == null && this._IsDataContextBound && !binding.Path.Path)
                            value = propd.DefaultValue;
                    } else {
                        var format = binding.StringFormat;
                        if (format) {
                            if (format.indexOf("{0") < 0)
                                format = "{0:" + format + "}";
                            value = StringEx.Format(format, value);
                        }
                    }
                } catch (err) {
                    console.warn("[BINDING] " + err.toString());
                    return Fayde.ConvertAnyToType(binding.FallbackValue, propd.GetTargetType());
                }
                return value;
            };
            BindingExpressionBase.prototype._MaybeEmitError = function (message, exception) {
            };
            BindingExpressionBase.prototype._AttachToNotifyError = function (element) {
                NotImplemented("BindingExpressionBase._AttachToNotifyError");
            };
            BindingExpressionBase.prototype._NotifyErrorsChanged = function (o, e) {
                NotImplemented("BindingExpressionBase._NotifyErrorsChanged");
            };
            return BindingExpressionBase;
        })(Fayde.Expression);
        Data.BindingExpressionBase = BindingExpressionBase;
        Fayde.RegisterType(BindingExpressionBase, {
            Name: "BindingExpressionBase",
            Namespace: "Fayde.Data"
        });
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Data) {
        var RelativeSource = (function () {
            function RelativeSource(mode) {
                this.Mode = Data.RelativeSourceMode.TemplatedParent;
                if (mode)
                    this.Mode = mode;
                this.AncestorLevel = 1;
                this.AncestorType = null;
            }
            return RelativeSource;
        })();
        Data.RelativeSource = RelativeSource;
        Fayde.RegisterType(RelativeSource, {
            Name: "RelativeSource",
            Namespace: "Fayde.Data",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var requestAnimFrame = (function () {
        return window.requestAnimationFrame || (window).webkitRequestAnimationFrame || (window).mozRequestAnimationFrame || (window).oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
            window.setTimeout(callback, 1000 / 200);
        };
    })();
    var ClockTimer = (function () {
        function ClockTimer() {
            this._Listeners = [];
            this._LastTime = 0;
        }
        ClockTimer.prototype.RegisterTimer = function (listener) {
            var ls = this._Listeners;
            var index = ls.indexOf(listener);
            if (index > -1)
                return;
            ls.push(listener);
            if (ls.length === 1)
                this._RequestAnimationTick();
        };
        ClockTimer.prototype.UnregisterTimer = function (listener) {
            var ls = this._Listeners;
            var index = ls.indexOf(listener);
            if (index > -1)
                ls.splice(index, 1);
        };
        ClockTimer.prototype._DoTick = function () {
            var nowTime = new Date().getTime();
            var lastTime = this._LastTime;
            this._LastTime = nowTime;
            var ls = this._Listeners;
            var len = ls.length;
            if (len === 0)
                return;
            for (var i = 0; i < len; i++) {
                ls[i].OnTicked(lastTime, nowTime);
            }
            this._RequestAnimationTick();
        };
        ClockTimer.prototype._RequestAnimationTick = function () {
            var _this = this;
            requestAnimFrame(function () {
                return _this._DoTick();
            });
        };
        return ClockTimer;
    })();
    Fayde.ClockTimer = ClockTimer;
})(Fayde || (Fayde = {}));

var Exception = (function () {
    function Exception(message) {
        this.Message = message;
    }
    Exception.prototype.toString = function () {
        var typeName = (this).constructor._TypeName;
        if (typeName)
            return typeName + ": " + this.Message;
        return this.Message;
    };
    return Exception;
})();
Fayde.RegisterType(Exception, {
    Name: "Exception",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
var ArgumentException = (function (_super) {
    __extends(ArgumentException, _super);
    function ArgumentException(message) {
        _super.call(this, message);
    }
    return ArgumentException;
})(Exception);
Fayde.RegisterType(ArgumentException, {
    Name: "ArgumentException",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
var InvalidOperationException = (function (_super) {
    __extends(InvalidOperationException, _super);
    function InvalidOperationException(message) {
        _super.call(this, message);
    }
    return InvalidOperationException;
})(Exception);
Fayde.RegisterType(InvalidOperationException, {
    Name: "InvalidOperationException",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
var XamlParseException = (function (_super) {
    __extends(XamlParseException, _super);
    function XamlParseException(message) {
        _super.call(this, message);
    }
    return XamlParseException;
})(Exception);
Fayde.RegisterType(XamlParseException, {
    Name: "XamlParseException",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
var XamlMarkupParseException = (function (_super) {
    __extends(XamlMarkupParseException, _super);
    function XamlMarkupParseException(message) {
        _super.call(this, message);
    }
    return XamlMarkupParseException;
})(Exception);
Fayde.RegisterType(XamlMarkupParseException, {
    Name: "XamlMarkupParseException",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
var NotSupportedException = (function (_super) {
    __extends(NotSupportedException, _super);
    function NotSupportedException(message) {
        _super.call(this, message);
    }
    return NotSupportedException;
})(Exception);
Fayde.RegisterType(NotSupportedException, {
    Name: "NotSupportedException",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
var IndexOutOfRangeException = (function (_super) {
    __extends(IndexOutOfRangeException, _super);
    function IndexOutOfRangeException(index) {
        _super.call(this, index.toString());
    }
    return IndexOutOfRangeException;
})(Exception);
Fayde.RegisterType(IndexOutOfRangeException, {
    Name: "IndexOutOfRangeException",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
var AttachException = (function (_super) {
    __extends(AttachException, _super);
    function AttachException(message, data) {
        _super.call(this, message);
        this.Data = data;
    }
    return AttachException;
})(Exception);
Fayde.RegisterType(AttachException, {
    Name: "AttachException",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
var InvalidJsonException = (function (_super) {
    __extends(InvalidJsonException, _super);
    function InvalidJsonException(jsonText, innerException) {
        _super.call(this, "Invalid json.");
        this.JsonText = jsonText;
        this.InnerException = innerException;
    }
    return InvalidJsonException;
})(Exception);
Fayde.RegisterType(InvalidJsonException, {
    Name: "InvalidJsonException",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
var TargetInvocationException = (function (_super) {
    __extends(TargetInvocationException, _super);
    function TargetInvocationException(message, innerException) {
        _super.call(this, message);
        this.InnerException = innerException;
    }
    return TargetInvocationException;
})(Exception);
Fayde.RegisterType(TargetInvocationException, {
    Name: "TargetInvocationException",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
var UnknownTypeException = (function (_super) {
    __extends(UnknownTypeException, _super);
    function UnknownTypeException(fullTypeName) {
        _super.call(this, fullTypeName);
        this.FullTypeName = fullTypeName;
    }
    return UnknownTypeException;
})(Exception);
Fayde.RegisterType(UnknownTypeException, {
    Name: "UnknownTypeException",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});

var Fayde;
(function (Fayde) {
    var RenderContext = (function () {
        function RenderContext(ctx) {
            var _this = this;
            this.CurrentTransform = null;
            this._Transforms = [];
            this.CanvasContext = ctx;
            if (!ctx.hasOwnProperty("currentTransform")) {
                Object.defineProperty(ctx, "currentTransform", {
                    get: function () {
                        return _this.CurrentTransform;
                    },
                    set: function (value) {
                        ctx.setTransform(value[0], value[1], value[3], value[4], value[2], value[5]);
                        _this.CurrentTransform = value;
                    }
                });
            }
        }
        RenderContext.prototype.DoRender = function (layers, r) {
            this.Clear(r);
            this.CanvasContext.save();
            this.ClipRect(r);
            if (layers) {
                var len = layers.length;
                for (var i = 0; i < len; i++) {
                    layers[i].LayoutUpdater.DoRender(this, r);
                }
            }
            this.CanvasContext.restore();
        };
        RenderContext.prototype.Save = function () {
            this.CanvasContext.save();
            var ct = this.CurrentTransform;
            this._Transforms.push(ct);
            this.CurrentTransform = ct == null ? mat3.identity() : mat3.create(ct);
        };
        RenderContext.prototype.Restore = function () {
            var curXform = this._Transforms.pop();
            this.CurrentTransform = curXform;
            this.CanvasContext.restore();
        };
        RenderContext.prototype.ClipRect = function (r) {
            var cc = this.CanvasContext;
            cc.beginPath();
            cc.rect(r.X, r.Y, r.Width, r.Height);
            cc.clip();
        };
        RenderContext.prototype.ClipGeometry = function (g) {
            g.Draw(this);
            this.CanvasContext.clip();
        };
        RenderContext.prototype.ClipRawPath = function (p) {
            p.Draw(this);
            this.CanvasContext.clip();
        };
        RenderContext.prototype.IsPointInPath = function (x, y) {
            return this.CanvasContext.isPointInPath(x, y);
        };
        RenderContext.prototype.IsPointInClipPath = function (clip, x, y) {
            clip.Draw(this);
            return this.CanvasContext.isPointInPath(x, y);
        };
        RenderContext.prototype.Rect = function (r) {
            var cc = this.CanvasContext;
            cc.beginPath();
            cc.rect(r.X, r.Y, r.Width, r.Height);
        };
        RenderContext.prototype.Fill = function (brush, r) {
            var cc = this.CanvasContext;
            brush.SetupBrush(cc, r);
            cc.fillStyle = brush.ToHtml5Object();
            cc.fill();
        };
        RenderContext.prototype.FillRect = function (brush, r) {
            var cc = this.CanvasContext;
            brush.SetupBrush(cc, r);
            cc.beginPath();
            cc.rect(r.X, r.Y, r.Width, r.Height);
            cc.fillStyle = brush.ToHtml5Object();
            cc.fill();
        };
        RenderContext.prototype.StrokeAndFillRect = function (strokeBrush, thickness, strokeRect, fillBrush, fillRect) {
            var cc = this.CanvasContext;
            strokeBrush.SetupBrush(cc, strokeRect);
            fillBrush.SetupBrush(cc, fillRect);
            cc.beginPath();
            cc.rect(strokeRect.X, strokeRect.Y, strokeRect.Width, strokeRect.Height);
            cc.fillStyle = fillBrush.ToHtml5Object();
            cc.fill();
            cc.lineWidth = thickness;
            cc.strokeStyle = strokeBrush.ToHtml5Object();
            cc.stroke();
        };
        RenderContext.prototype.Stroke = function (stroke, thickness, region) {
            var cc = this.CanvasContext;
            stroke.SetupBrush(cc, region);
            cc.lineWidth = thickness;
            cc.strokeStyle = stroke.ToHtml5Object();
            cc.stroke();
        };
        RenderContext.prototype.Clear = function (r) {
            this.CanvasContext.clearRect(r.X, r.Y, r.Width, r.Height);
        };
        RenderContext.prototype.SetLineDash = function (offsets) {
            var ctx = this.CanvasContext;
            if ((ctx).setLineDash)
                (ctx).setLineDash(offsets);
        };
        RenderContext.prototype.PreTransformMatrix = function (mat) {
            var ct = this.CurrentTransform;
            mat3.multiply(mat, ct, ct);
            this.CanvasContext.setTransform(ct[0], ct[1], ct[3], ct[4], ct[2], ct[5]);
            this.CurrentTransform = ct;
        };
        RenderContext.prototype.PreTransform = function (transform) {
            var v = transform.Value;
            var mat;
            if (!v || !(mat = v._Raw))
                return;
            var ct = this.CurrentTransform;
            mat3.multiply(mat, ct, ct);
            this.CanvasContext.setTransform(ct[0], ct[1], ct[3], ct[4], ct[2], ct[5]);
            this.CurrentTransform = ct;
        };
        RenderContext.prototype.TransformMatrix = function (mat) {
            var ct = this.CurrentTransform;
            mat3.multiply(ct, mat, ct);
            var cc = this.CanvasContext;
            this.CanvasContext.setTransform(ct[0], ct[1], ct[3], ct[4], ct[2], ct[5]);
            this.CurrentTransform = ct;
        };
        RenderContext.prototype.Transform = function (transform) {
            var v = transform.Value;
            var mat;
            if (!v || !(mat = v._Raw))
                return;
            var ct = this.CurrentTransform;
            mat3.multiply(ct, mat, ct);
            var cc = this.CanvasContext;
            this.CanvasContext.setTransform(ct[0], ct[1], ct[3], ct[4], ct[2], ct[5]);
            this.CurrentTransform = ct;
        };
        RenderContext.prototype.Translate = function (x, y) {
            var ct = this.CurrentTransform;
            mat3.translate(ct, x, y);
            this.CanvasContext.translate(x, y);
        };
        return RenderContext;
    })();
    Fayde.RenderContext = RenderContext;
})(Fayde || (Fayde = {}));

var resizeTimeout;

var InputType;
(function (InputType) {
    InputType[InputType["NoOp"] = 0] = "NoOp";
    InputType[InputType["MouseUp"] = 1] = "MouseUp";
    InputType[InputType["MouseDown"] = 2] = "MouseDown";
    InputType[InputType["MouseLeave"] = 3] = "MouseLeave";
    InputType[InputType["MouseEnter"] = 4] = "MouseEnter";
    InputType[InputType["MouseMove"] = 5] = "MouseMove";
    InputType[InputType["MouseWheel"] = 6] = "MouseWheel";
})(InputType || (InputType = {}));

var Fayde;
(function (Fayde) {
    var Surface = (function () {
        function Surface(app) {
            this.TestRenderContext = new Fayde.RenderContext(Surface.TestCanvas.getContext("2d"));
            this._Layers = [];
            this._UpDirty = [];
            this._DownDirty = [];
            this._Canvas = null;
            this._Ctx = null;
            this._PercentageWidth = 0;
            this._PercentageHeight = 0;
            this._CanvasOffset = null;
            this._Extents = null;
            this._CapturedInputList = [];
            this._InputList = [];
            this._FocusedNode = null;
            this._FocusChangedEvents = [];
            this._FirstUserInitiatedEvent = false;
            this._UserInitiatedEvent = false;
            this._Captured = null;
            this._PendingCapture = null;
            this._PendingReleaseCapture = false;
            this._CurrentPos = null;
            this._EmittingMouseEvent = false;
            this._Cursor = Fayde.CursorType.Default;
            this._App = app;
            this._KeyInterop = Fayde.Input.KeyInterop.CreateInterop(this);
        }
        Object.defineProperty(Surface.prototype, "FocusedNode", {
            get: function () {
                return this._FocusedNode;
            },
            enumerable: true,
            configurable: true
        });

        Object.defineProperty(Surface.prototype, "Extents", {
            get: function () {
                if (!this._Extents)
                    this._Extents = size.fromRaw(this._Canvas.offsetWidth, this._Canvas.offsetHeight);
                return this._Extents;
            },
            enumerable: true,
            configurable: true
        });
        Surface.prototype.Register = function (canvas, width, widthType, height, heightType) {
            var _this = this;
            this._Canvas = canvas;
            this._Ctx = this._Canvas.getContext("2d");
            this._RenderContext = new Fayde.RenderContext(this._Ctx);
            this._ResizeCanvas();
            document.body.onresize = function (e) {
                return _this._HandleResize(window.event ? window.event : e);
            };
            window.onresize = function (e) {
                return _this._HandleResize(window.event ? window.event : e);
            };
            this._CalculateOffset();
            this._RegisterEvents();
        };
        Surface.prototype._CalculateOffset = function () {
            var left = 0;
            var top = 0;
            var cur = this._Canvas;
            if (cur.offsetParent) {
                do {
                    left += cur.offsetLeft;
                    top += cur.offsetTop;
                } while(cur = cur.offsetParent);
            }
            this._CanvasOffset = { left: left, top: top };
        };
        Surface.prototype._RegisterEvents = function () {
            var _this = this;
            var canvas = this._Canvas;
            canvas.addEventListener("mousedown", function (e) {
                return _this._HandleButtonPress(window.event ? window.event : e);
            });
            canvas.addEventListener("mouseup", function (e) {
                return _this._HandleButtonRelease(window.event ? window.event : e);
            });
            canvas.addEventListener("mouseout", function (e) {
                return _this._HandleOut(window.event ? window.event : e);
            });
            canvas.addEventListener("mousemove", function (e) {
                return _this._HandleMove(window.event ? window.event : e);
            });
            canvas.addEventListener("mousewheel", function (e) {
                return _this._HandleWheel(window.event ? window.event : e);
            });
            canvas.addEventListener("DOMMouseScroll", function (e) {
                return _this._HandleWheel(window.event ? window.event : e);
            });
            this._KeyInterop.RegisterEvents();
        };
        Surface.prototype.Attach = function (uie) {
            if (this._RootLayer)
                this.DetachLayer(this._RootLayer);
            if (!uie) {
                this._Invalidate();
                return;
            }
            if (!(uie instanceof Fayde.UIElement))
                throw new Exception("Unsupported top level element.");
            this._RootLayer = uie;
            this.AttachLayer(uie);
        };
        Surface.prototype.AttachLayer = function (layer) {
            var node = layer.XamlNode;
            if (this._RootLayer === layer)
                this._Layers.unshift(node);
else
                this._Layers.push(node);
            node.IsTopLevel = true;
            node.SetSurface(this);
            var lu = node.LayoutUpdater;
            lu.FullInvalidate(true);
            lu.InvalidateMeasure();
            node.SetIsAttached(true);
            node.SetIsLoaded(true);
        };
        Surface.prototype.DetachLayer = function (layer) {
            var node = layer.XamlNode;
            node.IsTopLevel = false;
            var il = this._InputList;
            if (il[il.length - 1] === node)
                this._InputList = [];
            var f = this._FocusedNode;
            if (f) {
                while (f) {
                    if (f === node) {
                        this._FocusNode();
                        break;
                    }
                    f = f.VisualParentNode;
                }
            }
            var index = this._Layers.indexOf(layer.XamlNode);
            if (index > -1)
                this._Layers.splice(index, 1);
            node.SetIsLoaded(false);
            node.SetIsAttached(false);
            this._Invalidate(node.LayoutUpdater.SurfaceBoundsWithChildren);
        };
        Surface.prototype.ProcessDirtyElements = function () {
            var error = new BError();
            var dirty = this._UpdateLayout(error);
            if (error.Message)
                error.ThrowException();
            if (!dirty)
                return false;
            if (this._App.DebugInterop)
                this._App.DebugInterop.LayoutUpdated();
            return true;
        };
        Surface.prototype._UpdateLayout = function (error) {
            TimelineProfile.LayoutPass(true);
            var maxPassCount = 250;
            var layers = this._Layers;
            if (!layers)
                return false;
            var pass = {
                MeasureList: [],
                ArrangeList: [],
                SizeList: [],
                Count: 0,
                Updated: true
            };
            var dirty = false;
            var updatedLayout = false;
            while (pass.Count < maxPassCount && pass.Updated) {
                pass.Updated = false;
                for (var i = 0; i < layers.length; i++) {
                    var node = layers[i];
                    var lu = node.LayoutUpdater;
                    if (!lu.HasMeasureArrangeHint())
                        continue;
                    var last = lu.PreviousConstraint;
                    var available = size.copyTo(this.Extents);
                    if (lu.IsContainer && (!last || (!size.isEqual(last, available)))) {
                        lu.InvalidateMeasure();
                        lu.PreviousConstraint = available;
                    }
                    lu.UpdateLayer(pass, error);
                }
                dirty = dirty || this._DownDirty.length > 0 || this._UpDirty.length > 0;
                this._ProcessDownDirtyElements();
                this._ProcessUpDirtyElements();
                if (pass.Updated || dirty)
                    updatedLayout = true;
            }
            if (pass.Count >= maxPassCount) {
                if (error)
                    error.Message = "UpdateLayout has entered infinite loop and has been aborted.";
            }
            TimelineProfile.LayoutPass(false);
            return updatedLayout;
        };
        Surface.prototype._ProcessDownDirtyElements = function () {
            var list = this._DownDirty;
            var lu;
            while ((lu = list[0])) {
                if (!lu.InDownDirty) {
                    list.shift();
                    continue;
                }
                var vp = lu.Node.VisualParentNode;
                if (vp && vp.LayoutUpdater.InDownDirty) {
                    list.push(list.shift());
                    continue;
                }
                if (lu.ProcessDown()) {
                    lu.InDownDirty = false;
                    list.shift();
                }
            }
            if (list.length > 0) {
                Warn("Finished DownDirty pass, not empty.");
            }
        };
        Surface.prototype._ProcessUpDirtyElements = function () {
            var list = this._UpDirty;
            var lu;
            while ((lu = list[0])) {
                if (!lu.InUpDirty) {
                    list.shift();
                    continue;
                }
                var childNodeIndex = this._GetChildNodeInUpListIndex(lu);
                if (childNodeIndex > -1) {
                    list.splice(childNodeIndex + 1, 0, list.shift());
                    continue;
                }
                if (lu.ProcessUp()) {
                    lu.InUpDirty = false;
                    list.shift();
                }
            }
            if (list.length > 0) {
                Warn("Finished UpDirty pass, not empty.");
            }
        };
        Surface.prototype._GetChildNodeInUpListIndex = function (lu) {
            var list = this._UpDirty;
            var len = list.length;
            var node = lu.Node;
            for (var i = len - 1; i >= 0; i--) {
                var cur = list[i];
                if (cur.InUpDirty && cur.Node.VisualParentNode === node)
                    return i;
            }
            return -1;
        };
        Surface.prototype._PropagateDirtyFlagToChildren = function (element, dirt) {
        };
        Surface.prototype._AddDirtyElement = function (lu, dirt) {
            if (lu.Node.VisualParentNode == null && !lu.Node.IsTopLevel)
                return;
            lu.DirtyFlags |= dirt;
            if (dirt & _Dirty.DownDirtyState && !lu.InDownDirty) {
                this._DownDirty.push(lu);
                lu.InDownDirty = true;
            }
            if (dirt & _Dirty.UpDirtyState && !lu.InUpDirty) {
                this._UpDirty.push(lu);
                lu.InUpDirty = true;
            }
        };
        Surface.prototype._RemoveDirtyElement = function (lu) {
            lu.InUpDirty = false;
            lu.InDownDirty = false;
        };
        Surface.prototype.OnNodeDetached = function (lu) {
            this._RemoveDirtyElement(lu);
            this._RemoveFocusFrom(lu);
        };
        Surface.prototype._Invalidate = function (r) {
            if (!r)
                r = rect.fromSize(this.Extents);
            if (!this._InvalidatedRect)
                this._InvalidatedRect = rect.copyTo(r);
else
                rect.union(this._InvalidatedRect, r);
        };
        Surface.prototype.Render = function () {
            var r = this._InvalidatedRect;
            if (!r)
                return;
            this._InvalidatedRect = null;
            if (!(r.Width > 0 && r.Height > 0))
                return;
            this._RenderContext.DoRender(this._Layers, r);
        };
        Surface.prototype._HandleResize = function (evt) {
            var _this = this;
            if (resizeTimeout)
                clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function () {
                return _this._HandleResizeTimeout(evt);
            }, 20);
        };
        Surface.prototype._HandleResizeTimeout = function (evt) {
            this._ResizeCanvas();
            this._Extents = null;
            var layers = this._Layers;
            var len = layers.length;
            var node;
            for (var i = 0; i < len; i++) {
                node = layers[i];
                node.LayoutUpdater.InvalidateMeasure();
            }
            resizeTimeout = null;
        };
        Surface.prototype._ResizeCanvas = function () {
            var canvas = this._Canvas;
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        };
        Surface.prototype._UpdateCursorFromInputList = function () {
            var newCursor = Fayde.CursorType.Default;
            var list = this._Captured ? this._CapturedInputList : this._InputList;
            var len = list.length;
            for (var i = 0; i < len; i++) {
                newCursor = list[i].XObject.Cursor;
                if (newCursor !== Fayde.CursorType.Default)
                    break;
            }
            this._SetCursor(newCursor);
        };
        Surface.prototype._SetCursor = function (cursor) {
            this._Cursor = cursor;
            this._Canvas.style.cursor = cursor;
        };
        Surface.prototype._HandleKeyDown = function (args) {
            this._SetUserInitiatedEvent(true);
            Fayde.Input.Keyboard.RefreshModifiers(args.Modifiers);
            if (this._FocusedNode) {
                var focusToRoot = Surface._ElementPathToRoot(this._FocusedNode);
                this._EmitKeyDown(focusToRoot, args);
            }
            if (!args.Handled && args.Key === Fayde.Input.Key.Tab) {
                if (this._FocusedNode)
                    Fayde.TabNavigationWalker.Focus(this._FocusedNode, args.Modifiers.Shift);
else
                    this._EnsureElementFocused();
            }
            this._SetUserInitiatedEvent(false);
        };
        Surface.prototype._EmitKeyDown = function (list, args, endIndex) {
            if (endIndex === 0)
                return;
            if (!endIndex || endIndex === -1)
                endIndex = list.length;
            var i = 0;
            var cur = list.shift();
            while (cur && i < endIndex) {
                cur._EmitKeyDown(args);
                cur = list.shift();
                i++;
            }
        };
        Surface.prototype._HandleButtonPress = function (evt) {
            Fayde.Input.Keyboard.RefreshModifiers(evt);
            var button = evt.which ? evt.which : evt.button;
            var pos = this._GetMousePosition(evt);
            this._SetUserInitiatedEvent(true);
            this._HandleMouseEvent(InputType.MouseDown, button, pos);
            this._UpdateCursorFromInputList();
            this._SetUserInitiatedEvent(false);
        };
        Surface.prototype._HandleButtonRelease = function (evt) {
            Fayde.Input.Keyboard.RefreshModifiers(evt);
            var button = evt.which ? evt.which : evt.button;
            var pos = this._GetMousePosition(evt);
            this._SetUserInitiatedEvent(true);
            this._HandleMouseEvent(InputType.MouseUp, button, pos);
            this._UpdateCursorFromInputList();
            this._SetUserInitiatedEvent(false);
            if (this._Captured)
                this._PerformReleaseCapture();
        };
        Surface.prototype._HandleOut = function (evt) {
            Fayde.Input.Keyboard.RefreshModifiers(evt);
            var pos = this._GetMousePosition(evt);
            this._HandleMouseEvent(InputType.MouseLeave, null, pos);
        };
        Surface.prototype._HandleMove = function (evt) {
            Fayde.Input.Keyboard.RefreshModifiers(evt);
            var pos = this._GetMousePosition(evt);
            this._HandleMouseEvent(InputType.MouseMove, null, pos);
            this._UpdateCursorFromInputList();
        };
        Surface.prototype._HandleWheel = function (evt) {
            Fayde.Input.Keyboard.RefreshModifiers(evt);
            var delta = 0;
            if (evt.wheelDelta)
                delta = evt.wheelDelta / 120;
else if (evt.detail)
                delta = -evt.detail / 3;
            if (evt.preventDefault)
                evt.preventDefault();
            evt.returnValue = false;
            this._HandleMouseEvent(InputType.MouseWheel, null, this._GetMousePosition(evt), delta);
            this._UpdateCursorFromInputList();
        };
        Surface.prototype._HandleMouseEvent = function (type, button, pos, delta, emitLeave, emitEnter) {
            this._CurrentPos = pos;
            if (this._EmittingMouseEvent)
                return false;
            if (this._RootLayer == null)
                return false;
            var newInputList = [];
            var layers = this._Layers;
            var layerCount = layers.length;
            for (var i = layerCount - 1; i >= 0 && newInputList.length === 0; i--) {
                var layer = layers[i];
                layer.LayoutUpdater.HitTestPoint(this._RenderContext, pos, newInputList);
            }
            this._EmittingMouseEvent = true;
            var indices = { Index1: -1, Index2: -1 };
            this._FindFirstCommonElement(this._InputList, newInputList, indices);
            if (emitLeave === undefined || emitLeave === true)
                this._EmitMouseList(InputType.MouseLeave, button, pos, delta, this._InputList, indices.Index1);
            if (emitEnter === undefined || emitEnter === true)
                this._EmitMouseList(InputType.MouseEnter, button, pos, delta, newInputList, indices.Index2);
            if (type !== InputType.NoOp)
                this._EmitMouseList(type, button, pos, delta, this._Captured ? this._CapturedInputList : newInputList);
            this._InputList = newInputList;
            if (this.HitTestCallback)
                this.HitTestCallback(newInputList);
            if (this._PendingCapture)
                this._PerformCapture(this._PendingCapture);
            if (this._PendingReleaseCapture || (this._Captured && !this._Captured.CanCaptureMouse()))
                this._PerformReleaseCapture();
            this._EmittingMouseEvent = false;
        };
        Surface.prototype._GetMousePosition = function (evt) {
            return new Point(evt.clientX + window.pageXOffset + this._CanvasOffset.left, evt.clientY + window.pageYOffset + this._CanvasOffset.top);
        };
        Surface.prototype._FindFirstCommonElement = function (list1, list2, outObj) {
            var i = list1.length - 1;
            var j = list2.length - 1;
            outObj.Index1 = -1;
            outObj.Index2 = -1;
            while (i >= 0 && j >= 0) {
                if (list1[i] !== list2[j])
                    return;
                outObj.Index1 = i--;
                outObj.Index2 = j--;
            }
        };
        Surface.prototype._EmitMouseList = function (type, button, pos, delta, list, endIndex) {
            var handled = false;
            if (endIndex === 0)
                return handled;
            if (!endIndex || endIndex === -1)
                endIndex = list.length;
            var args = this._CreateEventArgs(type, pos, delta);
            var node = list[0];
            if (node && args instanceof Fayde.RoutedEventArgs)
                args.Source = node.XObject;
            var isL = Surface.IsLeftButton(button);
            var isR = Surface.IsRightButton(button);
            for (var i = 0; i < endIndex; i++) {
                node = list[i];
                if (type === InputType.MouseLeave)
                    args.Source = node.XObject;
                if (node._EmitMouseEvent(type, isL, isR, args))
                    handled = true;
                if (type === InputType.MouseLeave)
                    args = this._CreateEventArgs(type, pos, delta);
            }
            return handled;
        };
        Surface.prototype._CreateEventArgs = function (type, pos, delta) {
            switch (type) {
                case InputType.MouseUp:
                    return new Fayde.Input.MouseButtonEventArgs(pos);
                case InputType.MouseDown:
                    return new Fayde.Input.MouseButtonEventArgs(pos);
                case InputType.MouseLeave:
                    return new Fayde.Input.MouseEventArgs(pos);
                case InputType.MouseEnter:
                    return new Fayde.Input.MouseEventArgs(pos);
                case InputType.MouseMove:
                    return new Fayde.Input.MouseEventArgs(pos);
                case InputType.MouseWheel:
                    return new Fayde.Input.MouseWheelEventArgs(pos, delta);
            }
        };
        Surface.prototype.SetMouseCapture = function (uin) {
            if (this._Captured || this._PendingCapture)
                return uin === this._Captured || uin === this._PendingCapture;
            if (!this._EmittingMouseEvent)
                return false;
            this._PendingCapture = uin;
            return true;
        };
        Surface.prototype.ReleaseMouseCapture = function (uin) {
            if (uin !== this._Captured && uin !== this._PendingCapture)
                return;
            if (this._EmittingMouseEvent)
                this._PendingReleaseCapture = true;
else
                this._PerformReleaseCapture();
        };
        Surface.prototype._PerformCapture = function (uin) {
            this._Captured = uin;
            var newInputList = [];
            while (uin != null) {
                newInputList.push(uin);
                uin = uin.VisualParentNode;
            }
            this._CapturedInputList = newInputList;
            this._PendingCapture = null;
        };
        Surface.prototype._PerformReleaseCapture = function () {
            var oldCaptured = this._Captured;
            this._Captured = null;
            this._PendingReleaseCapture = false;
            oldCaptured._EmitLostMouseCapture(this._CurrentPos);
            this._HandleMouseEvent(InputType.NoOp, null, this._CurrentPos, undefined, false, true);
        };
        Surface.prototype._SetUserInitiatedEvent = function (val) {
            this._EmitFocusChangeEvents();
            this._FirstUserInitiatedEvent = this._FirstUserInitiatedEvent || val;
            this._UserInitiatedEvent = val;
        };
        Surface.prototype.Focus = function (ctrlNode, recurse) {
            recurse = recurse === undefined || recurse === true;
            if (!ctrlNode.IsAttached)
                return false;
            var walker = Fayde.DeepTreeWalker(ctrlNode);
            var uin;
            while (uin = walker.Step()) {
                if (uin.XObject.Visibility !== Fayde.Visibility.Visible) {
                    walker.SkipBranch();
                    continue;
                }
                if (!(uin instanceof Fayde.Controls.ControlNode))
                    continue;
                var cn = uin;
                var c = cn.XObject;
                if (!c.IsEnabled) {
                    if (!recurse)
                        return false;
                    walker.SkipBranch();
                    continue;
                }
                var loaded = ctrlNode.IsLoaded;
                var check = ctrlNode;
                while (!loaded && (check = check.VisualParentNode)) {
                    loaded = loaded || check.IsLoaded;
                }
                if (loaded && cn.LayoutUpdater.TotalIsRenderVisible && c.IsTabStop)
                    return this._FocusNode(cn);
                if (!recurse)
                    return false;
            }
            return false;
        };
        Surface.prototype._FocusNode = function (uin) {
            if (uin === this._FocusedNode)
                return true;
            var fn = this._FocusedNode;
            if (fn) {
                this._FocusChangedEvents.push({
                    LostFocus: Surface._ElementPathToRoot(fn),
                    GotFocus: null
                });
            }
            this._FocusedNode = uin;
            if (uin) {
                this._FocusChangedEvents.push({
                    LostFocus: null,
                    GotFocus: Surface._ElementPathToRoot(uin)
                });
            }
            if (this._FirstUserInitiatedEvent)
                this._EmitFocusChangeEventsAsync();
            return true;
        };
        Surface.prototype._EnsureElementFocused = function () {
            var layers = this._Layers;
            if (!this._FocusedNode) {
                var last = layers.length - 1;
                for (var i = last; i >= 0; i--) {
                    if (Fayde.TabNavigationWalker.Focus(layers[i]))
                        break;
                }
                if (!this._FocusedNode && last !== -1)
                    this._FocusNode(layers[last]);
            }
            if (this._FirstUserInitiatedEvent)
                this._EmitFocusChangeEventsAsync();
        };
        Surface.prototype._RemoveFocusFrom = function (lu) {
            if (this._FocusedNode === lu.Node)
                this._FocusNode(null);
        };
        Surface.prototype._EmitFocusChangeEventsAsync = function () {
            var _this = this;
            setTimeout(function () {
                return _this._EmitFocusChangeEvents();
            }, 1);
        };
        Surface.prototype._EmitFocusChangeEvents = function () {
            var evts = this._FocusChangedEvents;
            var cur = evts.shift();
            while (cur) {
                this._EmitFocusList("lost", cur.LostFocus);
                this._EmitFocusList("got", cur.GotFocus);
                cur = evts.shift();
            }
        };
        Surface.prototype._EmitFocusList = function (type, list) {
            if (!list)
                return;
            var cur = list.shift();
            while (cur) {
                cur._EmitFocusChange(type);
                cur = list.shift();
            }
        };
        Surface._ElementPathToRoot = function (source) {
            var list = [];
            while (source) {
                list.push(source);
                source = source.VisualParentNode;
            }
            return list;
        };
        Surface.IsLeftButton = function (button) {
            return button === 1;
        };
        Surface.IsRightButton = function (button) {
            return button === 2;
        };
        Surface.MeasureWidth = function (text, font) {
            var ctx = Surface.TestCanvas.getContext("2d");
            ctx.font = font.ToHtml5Object();
            return ctx.measureText(text).width;
        };
        Surface.prototype.__DebugLayers = function () {
            var vth = Fayde.VisualTreeHelper;
            var layers = this._Layers;
            var len = layers.length;
            var str = "";
            for (var i = 0; i < len; i++) {
                str += vth.__Debug(layers[i]);
            }
            return str;
        };
        Surface.prototype.__GetById = function (id) {
            var layers = this._Layers;
            var len = layers.length;
            for (var i = 0; i < len; i++) {
                var walker = Fayde.DeepTreeWalker(layers[i]);
                var curNode;
                while (curNode = walker.Step()) {
                    if ((curNode.XObject)._ID === id)
                        return curNode.XObject;
                }
            }
        };
        Surface.TestCanvas = document.createElement("canvas");
        return Surface;
    })();
    Fayde.Surface = Surface;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Input) {
        (function (KeyboardNavigationMode) {
            KeyboardNavigationMode[KeyboardNavigationMode["Continue"] = 0] = "Continue";
            KeyboardNavigationMode[KeyboardNavigationMode["Once"] = 1] = "Once";
            KeyboardNavigationMode[KeyboardNavigationMode["Cycle"] = 2] = "Cycle";
            KeyboardNavigationMode[KeyboardNavigationMode["None"] = 3] = "None";
            KeyboardNavigationMode[KeyboardNavigationMode["Contained"] = 4] = "Contained";
            KeyboardNavigationMode[KeyboardNavigationMode["Local"] = 5] = "Local";
        })(Input.KeyboardNavigationMode || (Input.KeyboardNavigationMode = {}));
        var KeyboardNavigationMode = Input.KeyboardNavigationMode;
        (function (ModifierKeys) {
            ModifierKeys[ModifierKeys["None"] = 0] = "None";
            ModifierKeys[ModifierKeys["Alt"] = 1] = "Alt";
            ModifierKeys[ModifierKeys["Control"] = 2] = "Control";
            ModifierKeys[ModifierKeys["Shift"] = 4] = "Shift";
            ModifierKeys[ModifierKeys["Windows"] = 8] = "Windows";
            ModifierKeys[ModifierKeys["Apple"] = 16] = "Apple";
        })(Input.ModifierKeys || (Input.ModifierKeys = {}));
        var ModifierKeys = Input.ModifierKeys;

        var Keyboard = (function () {
            function Keyboard() {
            }
            Keyboard.RefreshModifiers = function (e) {
                if (e.Shift)
                    Keyboard.Modifiers |= ModifierKeys.Shift;
else
                    Keyboard.Modifiers &= ~ModifierKeys.Shift;
                if (e.Ctrl)
                    Keyboard.Modifiers |= ModifierKeys.Control;
else
                    Keyboard.Modifiers &= ~ModifierKeys.Control;
                if (e.Alt)
                    Keyboard.Modifiers |= ModifierKeys.Alt;
else
                    Keyboard.Modifiers &= ~ModifierKeys.Alt;
            };
            Keyboard.HasControl = function () {
                return (Keyboard.Modifiers & ModifierKeys.Control) === ModifierKeys.Control;
            };
            Keyboard.HasAlt = function () {
                return (Keyboard.Modifiers & ModifierKeys.Alt) === ModifierKeys.Alt;
            };
            Keyboard.HasShift = function () {
                return (Keyboard.Modifiers & ModifierKeys.Shift) === ModifierKeys.Shift;
            };
            Keyboard.Modifiers = ModifierKeys.None;
            return Keyboard;
        })();
        Input.Keyboard = Keyboard;
        Fayde.RegisterType(Keyboard, {
            Name: "Keyboard",
            Namespace: "Fayde.Input",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Input || (Fayde.Input = {}));
    var Input = Fayde.Input;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var Matrix = (function () {
            function Matrix(raw) {
                this._Inverse = null;
                this._Listeners = [];
                this._Raw = raw;
            }
            Object.defineProperty(Matrix.prototype, "M11", {
                get: function () {
                    return this._Raw[0];
                },
                set: function (val) {
                    this._Raw[0] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "M12", {
                get: function () {
                    return this._Raw[1];
                },
                set: function (val) {
                    this._Raw[1] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "M21", {
                get: function () {
                    return this._Raw[3];
                },
                set: function (val) {
                    this._Raw[3] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "M22", {
                get: function () {
                    return this._Raw[4];
                },
                set: function (val) {
                    this._Raw[4] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "OffsetX", {
                get: function () {
                    return this._Raw[2];
                },
                set: function (val) {
                    this._Raw[2] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "OffsetY", {
                get: function () {
                    return this._Raw[5];
                },
                set: function (val) {
                    this._Raw[5] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix.prototype, "Inverse", {
                get: function () {
                    var inverse = this._Inverse;
                    if (!inverse) {
                        inverse = new Matrix();
                        inverse._Raw = mat3.inverse(this._Raw, mat3.identity());
                        if (!inverse._Raw)
                            return undefined;
                        this._Inverse = inverse;
                    }
                    return inverse;
                },
                enumerable: true,
                configurable: true
            });

            Matrix.prototype.Listen = function (func) {
                var listeners = this._Listeners;
                var listener = {
                    Callback: func,
                    Detach: function () {
                        var index = listeners.indexOf(listener);
                        if (index > -1)
                            listeners.splice(index, 1);
                    }
                };
                listeners.push(listener);
                return listener;
            };
            Matrix.prototype._OnChanged = function () {
                this._Inverse = null;
                var listeners = this._Listeners;
                var len = listeners.length;
                for (var i = 0; i < len; i++) {
                    listeners[i].Callback(this);
                }
            };
            Matrix.prototype.toString = function () {
                return mat3.str(this._Raw);
            };
            return Matrix;
        })();
        Media.Matrix = Matrix;
        Fayde.RegisterType(Matrix, {
            Name: "Matrix",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var Matrix3D = (function () {
            function Matrix3D() {
                this._Inverse = null;
                this._Listeners = [];
            }
            Matrix3D.FromRaw = function (raw) {
                var r = new Matrix3D();
                r._Raw = raw;
                return r;
            };
            Object.defineProperty(Matrix3D.prototype, "M11", {
                get: function () {
                    return this._Raw[0];
                },
                set: function (val) {
                    this._Raw[0] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M12", {
                get: function () {
                    return this._Raw[1];
                },
                set: function (val) {
                    this._Raw[1] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M13", {
                get: function () {
                    return this._Raw[2];
                },
                set: function (val) {
                    this._Raw[2] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M14", {
                get: function () {
                    return this._Raw[3];
                },
                set: function (val) {
                    this._Raw[3] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M21", {
                get: function () {
                    return this._Raw[4];
                },
                set: function (val) {
                    this._Raw[4] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M22", {
                get: function () {
                    return this._Raw[5];
                },
                set: function (val) {
                    this._Raw[5] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M23", {
                get: function () {
                    return this._Raw[6];
                },
                set: function (val) {
                    this._Raw[6] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M24", {
                get: function () {
                    return this._Raw[7];
                },
                set: function (val) {
                    this._Raw[7] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M31", {
                get: function () {
                    return this._Raw[8];
                },
                set: function (val) {
                    this._Raw[8] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M32", {
                get: function () {
                    return this._Raw[9];
                },
                set: function (val) {
                    this._Raw[9] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M33", {
                get: function () {
                    return this._Raw[10];
                },
                set: function (val) {
                    this._Raw[10] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M34", {
                get: function () {
                    return this._Raw[11];
                },
                set: function (val) {
                    this._Raw[11] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "OffsetX", {
                get: function () {
                    return this._Raw[12];
                },
                set: function (val) {
                    this._Raw[12] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "OffsetY", {
                get: function () {
                    return this._Raw[13];
                },
                set: function (val) {
                    this._Raw[13] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "OffsetZ", {
                get: function () {
                    return this._Raw[14];
                },
                set: function (val) {
                    this._Raw[14] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "M44", {
                get: function () {
                    return this._Raw[15];
                },
                set: function (val) {
                    this._Raw[15] = val;
                    this._OnChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Matrix3D.prototype, "Inverse", {
                get: function () {
                    var inverse = this._Inverse;
                    if (!inverse) {
                        inverse = new Matrix3D();
                        inverse._Raw = mat4.inverse(this._Raw, mat4.identity());
                        if (!inverse._Raw)
                            return undefined;
                        this._Inverse = inverse;
                    }
                    return inverse;
                },
                enumerable: true,
                configurable: true
            });

            Matrix3D.prototype.Listen = function (func) {
                var listeners = this._Listeners;
                var listener = {
                    Callback: func,
                    Detach: function () {
                        var index = listeners.indexOf(listener);
                        if (index > -1)
                            listeners.splice(index, 1);
                    }
                };
                listeners.push(listener);
                return listener;
            };
            Matrix3D.prototype._OnChanged = function () {
                this._Inverse = null;
                var listeners = this._Listeners;
                var len = listeners.length;
                for (var i = 0; i < len; i++) {
                    listeners[i].Callback(this);
                }
            };
            Matrix3D.prototype.toString = function () {
                return mat4.str(this._Raw);
            };
            return Matrix3D;
        })();
        Media.Matrix3D = Matrix3D;
        Fayde.RegisterType(Matrix3D, {
            Name: "Matrix3D",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var RepeatBehavior = (function () {
                function RepeatBehavior() {
                    this._Duration = null;
                    this._Count = null;
                    this.IsForever = false;
                }
                RepeatBehavior.FromRepeatDuration = function (duration) {
                    var rb = new RepeatBehavior();
                    rb._Duration = duration;
                    return rb;
                };
                RepeatBehavior.FromIterationCount = function (count) {
                    var rb = new RepeatBehavior();
                    rb._Count = count;
                    return rb;
                };
                Object.defineProperty(RepeatBehavior.prototype, "HasCount", {
                    get: function () {
                        return this._Count != null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RepeatBehavior.prototype, "Count", {
                    get: function () {
                        return this._Count;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RepeatBehavior.prototype, "HasDuration", {
                    get: function () {
                        return this._Duration != null;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(RepeatBehavior.prototype, "Duration", {
                    get: function () {
                        return this._Duration;
                    },
                    enumerable: true,
                    configurable: true
                });
                RepeatBehavior.prototype.Clone = function () {
                    var rb = new RepeatBehavior();
                    rb._Duration = this._Duration;
                    rb._Count = this._Count;
                    rb.IsForever = this.IsForever;
                    return rb;
                };
                RepeatBehavior.Forever = (function () {
                    var rb = new RepeatBehavior();
                    rb.IsForever = true;
                    return rb;
                })();
                return RepeatBehavior;
            })();
            Animation.RepeatBehavior = RepeatBehavior;
            Fayde.RegisterType(RepeatBehavior, {
                Name: "RepeatBehavior",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            Fayde.RegisterTypeConverter(RepeatBehavior, function (val) {
                if (!val || val.toLowerCase() === "forever")
                    return RepeatBehavior.Forever;
                if (val[val.length - 1] === "x") {
                    var d = parseInt(val.substr(0, val.length - 1));
                    return RepeatBehavior.FromIterationCount(d);
                }
                var duration = new Duration(Fayde.ConvertAnyToType(val, TimeSpan));
                return RepeatBehavior.FromRepeatDuration(duration);
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (MVVM) {
        var RelayCommand = (function () {
            function RelayCommand(execute, canExecute) {
                this.CanExecuteChanged = new MulticastEvent();
                if (execute)
                    this.Execute = execute;
                if (canExecute)
                    this.CanExecute = canExecute;
            }
            RelayCommand.prototype.Execute = function (parameter) {
            };
            RelayCommand.prototype.CanExecute = function (parameter) {
                return true;
            };
            return RelayCommand;
        })();
        MVVM.RelayCommand = RelayCommand;
        Fayde.RegisterType(RelayCommand, {
            Name: "RelayCommand",
            Namespace: "Fayde.MVVM",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.MVVM || (Fayde.MVVM = {}));
    var MVVM = Fayde.MVVM;
})(Fayde || (Fayde = {}));

var Clip = (function () {
    function Clip(r) {
        var rounded = rect.roundOut(rect.copyTo(r));
        this.X = rounded.X;
        this.Y = rounded.Y;
        this.Width = rounded.Width;
        this.Height = rounded.Height;
    }
    return Clip;
})();
Fayde.RegisterType(Clip, {
    Name: "Clip",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});

var FontStyle = {
    Normal: "normal",
    Italic: "italic",
    Oblique: "oblique"
};
var FontStretch = {
    UltraCondensed: "ultra-condensed",
    ExtraCondensed: "extra-condensed",
    Condensed: "condensed",
    SemiCondensed: "semi-condensed",
    Normal: "normal",
    SemiExpanded: "semi-expanded",
    Expanded: "expanded",
    ExtraExpanded: "extra-expanded",
    UltraExpanded: "ultra-expanded"
};
var FontWeight = {
    Thin: 100,
    ExtraLight: 200,
    Light: 300,
    Normal: 400,
    Medium: 500,
    SemiBold: 600,
    Bold: 700,
    ExtraBold: 800,
    Black: 900,
    ExtraBlack: 950
};
var Font = (function () {
    function Font() {
        this._Family = Font.DEFAULT_FAMILY;
        this._Stretch = Font.DEFAULT_STRETCH;
        this._Style = Font.DEFAULT_STYLE;
        this._Weight = Font.DEFAULT_WEIGHT;
        this._Size = Font.DEFAULT_SIZE;
    }
    Object.defineProperty(Font.prototype, "Family", {
        get: function () {
            return this._Family;
        },
        set: function (value) {
            if (this._Family == value)
                return;
            this._Family = value;
            this._PurgeCache();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Font.prototype, "Stretch", {
        get: function () {
            return this._Stretch;
        },
        set: function (value) {
            if (this._Stretch == value)
                return;
            this._Stretch = value;
            this._PurgeCache();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Font.prototype, "Style", {
        get: function () {
            return this._Style;
        },
        set: function (value) {
            if (this._Style == value)
                return;
            this._Style = value;
            this._PurgeCache();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Font.prototype, "Weight", {
        get: function () {
            return this._Weight;
        },
        set: function (value) {
            if (this._Weight == value)
                return;
            this._Weight = value;
            this._PurgeCache();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Font.prototype, "Size", {
        get: function () {
            return this._Size;
        },
        set: function (value) {
            if (this._Size == value)
                return;
            this._Size = value;
            this._PurgeCache();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Font.prototype, "IsChanged", {
        get: function () {
            return this._CachedTranslation == null;
        },
        enumerable: true,
        configurable: true
    });
    Font.prototype.GetActualHeight = function () {
        return Font._MeasureHeight(this);
    };
    Font.prototype._Descender = function () {
        return 0.0;
    };
    Font.prototype._Ascender = function () {
        return 0.0;
    };
    Font.prototype._PurgeCache = function () {
        this._CachedHeight = undefined;
        this._CachedTranslation = undefined;
    };
    Font.prototype.ToHtml5Object = function () {
        if (!this._CachedTranslation)
            this._CachedTranslation = this._BuildTranslation();
        return this._CachedTranslation;
    };
    Font.prototype._BuildTranslation = function () {
        var s = "";
        s += this.Style.toString() + " ";
        s += "normal ";
        s += this.Weight.toString() + " ";
        s += this.Size + "px ";
        s += this.Family.toString();
        return s;
    };
    Font._MeasureHeight = function (font) {
        if (font._CachedHeight)
            return font._CachedHeight;
        var body = document.getElementsByTagName("body")[0];
        var dummy = document.createElement("div");
        var dummyText = document.createTextNode("M");
        dummy.appendChild(dummyText);
        dummy.setAttribute("style", "font: " + font.ToHtml5Object() + ";");
        body.appendChild(dummy);
        var result = dummy.offsetHeight;
        body.removeChild(dummy);
        font._CachedHeight = result;
        return result;
    };
    Font.DEFAULT_FAMILY = "Segoe UI, Lucida Sans Unicode, Verdana";
    Font.DEFAULT_STRETCH = FontStretch.Normal;
    Font.DEFAULT_STYLE = FontStyle.Normal;
    Font.DEFAULT_WEIGHT = FontWeight.Normal;
    Font.DEFAULT_SIZE = 14;
    return Font;
})();
Fayde.RegisterType(Font, {
    Name: "Font",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});

var FontFamily = (function () {
    function FontFamily(FamilyNames) {
        this.FamilyNames = FamilyNames;
    }
    FontFamily.prototype.toString = function () {
        return this.FamilyNames;
    };
    FontFamily.prototype.Clone = function () {
        return new FontFamily(this.FamilyNames);
    };
    return FontFamily;
})();
Fayde.RegisterType(FontFamily, {
    Name: "FontFamily",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNS
});
Fayde.RegisterTypeConverter(FontFamily, function (val) {
    if (!val)
        return new FontFamily(Font.DEFAULT_FAMILY);
    return new FontFamily(val.toString());
});

var RectOverlap = {
    Out: 0,
    In: 1,
    Part: 2
};
var rect = (function () {
    function rect() {
        this.X = 0;
        this.Y = 0;
        this.Width = 0;
        this.Height = 0;
    }
    rect.prototype.toString = function () {
        return "{" + this.X + "," + this.Y + "," + this.Width + "," + this.Height + "}";
    };
    rect.prototype.Clone = function () {
        var r = new rect();
        r.X = this.X;
        r.Y = this.Y;
        r.Width = this.Width;
        r.Height = this.Height;
        return r;
    };
    rect.getRight = function (r) {
        return r.X + r.Width;
    };
    rect.getBottom = function (r) {
        return r.Y + r.Height;
    };
    rect.fromSize = function (size) {
        var r = new rect();
        r.Width = size.Width;
        r.Height = size.Height;
        return r;
    };
    rect.clear = function (dest) {
        dest.X = 0;
        dest.Y = 0;
        dest.Width = 0;
        dest.Height = 0;
    };
    rect.set = function (dest, x, y, width, height) {
        if (!dest)
            dest = new rect();
        dest.X = x;
        dest.Y = y;
        dest.Width = width;
        dest.Height = height;
        return dest;
    };
    rect.isEmpty = function (rect1) {
        return rect1.Width <= 0 || rect1.Height <= 0;
    };
    rect.isEmptyLogical = function (rect1) {
        return rect1.Width <= 0 && rect1.Height <= 0;
    };
    rect.copyTo = function (src, dest) {
        if (!dest)
            dest = new rect();
        dest.X = src.X;
        dest.Y = src.Y;
        dest.Width = src.Width;
        dest.Height = src.Height;
        return dest;
    };
    rect.isEqual = function (rect1, rect2) {
        return rect1.X === rect2.X && rect1.Y === rect2.Y && rect1.Width === rect2.Width && rect1.Height === rect2.Height;
    };
    rect.intersection = function (dest, rect2) {
        var x = Math.max(dest.X, rect2.X);
        var y = Math.max(dest.Y, rect2.Y);
        dest.Width = Math.max(0, Math.min(dest.X + dest.Width, rect2.X + rect2.Width) - x);
        dest.Height = Math.max(0, Math.min(dest.Y + dest.Height, rect2.Y + rect2.Height) - y);
        dest.X = x;
        dest.Y = y;
        return dest;
    };
    rect.union = function (dest, rect2) {
        if (rect.isEmpty(rect2))
            return dest;
        if (rect.isEmpty(dest))
            return rect.copyTo(rect2, dest);
        var x = Math.min(dest.X, rect2.X);
        var y = Math.min(dest.Y, rect2.Y);
        dest.Width = Math.max(dest.X + dest.Width, rect2.X + rect2.Width) - x;
        dest.Height = Math.max(dest.Y + dest.Height, rect2.Y + rect2.Height) - y;
        dest.X = x;
        dest.Y = y;
        return dest;
    };
    rect.unionLogical = function (dest, rect2) {
        if (rect.isEmptyLogical(rect2))
            return dest;
        if (rect.isEmptyLogical(dest))
            return rect.copyTo(rect2, dest);
        var x = Math.min(dest.X, rect2.X);
        var y = Math.min(dest.Y, rect2.Y);
        dest.Width = Math.max(dest.X + dest.Width, rect2.X + rect2.Width) - x;
        dest.Height = Math.max(dest.Y + dest.Height, rect2.Y + rect2.Height) - y;
        dest.X = x;
        dest.Y = y;
        return dest;
    };
    rect.growBy = function (dest, left, top, right, bottom) {
        dest.X -= left;
        dest.Y -= top;
        dest.Width += left + right;
        dest.Height += top + bottom;
        if (dest.Width < 0)
            dest.Width = 0;
        if (dest.Height < 0)
            dest.Height = 0;
    };
    rect.growByThickness = function (dest, thickness) {
        dest.X -= thickness.Left;
        dest.Y -= thickness.Top;
        dest.Width += thickness.Left + thickness.Right;
        dest.Height += thickness.Top + thickness.Bottom;
        if (dest.Width < 0)
            dest.Width = 0;
        if (dest.Height < 0)
            dest.Height = 0;
    };
    rect.shrinkBy = function (dest, left, top, right, bottom) {
        dest.X += left;
        dest.Y += top;
        dest.Width -= left + right;
        dest.Height -= top + bottom;
        if (dest.Width < 0)
            dest.Width = 0;
        if (dest.Height < 0)
            dest.Height = 0;
    };
    rect.shrinkByThickness = function (dest, thickness) {
        dest.X += thickness.Left;
        dest.Y += thickness.Top;
        dest.Width -= thickness.Left + thickness.Right;
        dest.Height -= thickness.Top + thickness.Bottom;
        if (dest.Width < 0)
            dest.Width = 0;
        if (dest.Height < 0)
            dest.Height = 0;
    };
    rect.extendTo = function (rect1, x, y) {
        var rx = rect1.X;
        var ry = rect1.Y;
        var rw = rect1.Width;
        var rh = rect1.Height;
        if (x < rx || x > (rx + rw))
            rw = Math.max(Math.abs(x - rx), Math.abs(x - rx - rw));
        if (y < ry || y > (ry + rh))
            rh = Math.max(Math.abs(y - ry), Math.abs(y - ry - rh));
        rect1.X = Math.min(rx, x);
        rect1.Y = Math.min(ry, y);
        rect1.Width = rw;
        rect1.Height = rh;
    };
    rect.transform = function (dest, xform) {
        if (!xform)
            return dest;
        var x = dest.X;
        var y = dest.Y;
        var width = dest.Width;
        var height = dest.Height;
        var p1 = vec2.createFrom(x, y);
        var p2 = vec2.createFrom(x + width, y);
        var p3 = vec2.createFrom(x + width, y + height);
        var p4 = vec2.createFrom(x, y + height);
        mat3.transformVec2(xform, p1);
        mat3.transformVec2(xform, p2);
        mat3.transformVec2(xform, p3);
        mat3.transformVec2(xform, p4);
        var l = Math.min(p1[0], p2[0], p3[0], p4[0]);
        var t = Math.min(p1[1], p2[1], p3[1], p4[1]);
        var r = Math.max(p1[0], p2[0], p3[0], p4[0]);
        var b = Math.max(p1[1], p2[1], p3[1], p4[1]);
        dest.X = l;
        dest.Y = t;
        dest.Width = r - l;
        dest.Height = b - t;
        return dest;
    };
    rect.clipmask = function (clip) {
        var mask = 0;
        if (-clip[0] + clip[3] < 0)
            mask |= (1 << 0);
        if (clip[0] + clip[3] < 0)
            mask |= (1 << 1);
        if (-clip[1] + clip[3] < 0)
            mask |= (1 << 2);
        if (clip[1] + clip[3] < 0)
            mask |= (1 << 3);
        if (clip[2] + clip[3] < 0)
            mask |= (1 << 4);
        if (-clip[2] + clip[3] < 0)
            mask |= (1 << 5);
        return mask;
    };
    rect.transform4 = function (dest, projection) {
        if (!projection)
            return dest;
        var x = dest.X;
        var y = dest.Y;
        var width = dest.Width;
        var height = dest.Height;
        var p1 = vec4.createFrom(x, y, 0.0, 1.0);
        var p2 = vec4.createFrom(x + width, y, 0.0, 1.0);
        var p3 = vec4.createFrom(x + width, y + height, 0.0, 1.0);
        var p4 = vec4.createFrom(x, y + height, 0.0, 1.0);
        mat4.transformVec4(projection, p1);
        mat4.transformVec4(projection, p2);
        mat4.transformVec4(projection, p3);
        mat4.transformVec4(projection, p4);
        var vs = 65536.0;
        var vsr = 1.0 / vs;
        p1[0] *= vsr;
        p1[1] *= vsr;
        p2[0] *= vsr;
        p2[1] *= vsr;
        p3[0] *= vsr;
        p3[1] *= vsr;
        p4[0] *= vsr;
        p4[1] *= vsr;
        var cm1 = rect.clipmask(p1);
        var cm2 = rect.clipmask(p2);
        var cm3 = rect.clipmask(p3);
        var cm4 = rect.clipmask(p4);
        if ((cm1 | cm2 | cm3 | cm4) !== 0) {
            if ((cm1 & cm2 & cm3 & cm4) === 0) {
                rect.clear(dest);
            }
        } else {
            var p1w = 1.0 / p1[3];
            var p2w = 1.0 / p2[3];
            var p3w = 1.0 / p3[3];
            var p4w = 1.0 / p4[3];
            p1[0] *= p1w * vs;
            p1[1] *= p1w * vs;
            p2[0] *= p2w * vs;
            p2[1] *= p2w * vs;
            p3[0] *= p3w * vs;
            p3[1] *= p3w * vs;
            p4[0] *= p4w * vs;
            p4[1] *= p4w * vs;
            dest.X = p1[0];
            dest.Y = p1[1];
            dest.Width = 0;
            dest.Height = 0;
            rect.extendTo(dest, p2[0], p2[1]);
            rect.extendTo(dest, p3[0], p3[1]);
            rect.extendTo(dest, p4[0], p4[1]);
        }
        return dest;
    };
    rect.round = function (dest) {
        dest.X = Math.round(dest.X);
        dest.Y = Math.round(dest.Y);
        dest.Width = Math.round(dest.Width);
        dest.Height = Math.round(dest.Height);
        return dest;
    };
    rect.roundOut = function (dest) {
        var x = Math.floor(dest.X);
        var y = Math.floor(dest.Y);
        dest.Width = Math.ceil(dest.X + dest.Width) - Math.floor(dest.X);
        dest.Height = Math.ceil(dest.Y + dest.Height) - Math.floor(dest.Y);
        dest.X = x;
        dest.Y = y;
        return dest;
    };
    rect.roundIn = function (dest) {
        var x = Math.ceil(dest.X);
        var y = Math.ceil(dest.Y);
        dest.Width = Math.floor(dest.X + dest.Width) - Math.ceil(dest.X);
        dest.Height = Math.floor(dest.Y + dest.Height) - Math.ceil(dest.Y);
        dest.X = x;
        dest.Y = y;
        return dest;
    };
    rect.copyGrowTransform = function (dest, src, thickness, xform) {
        rect.copyTo(src, dest);
        rect.growByThickness(dest, thickness);
        if (xform)
            rect.transform(dest, xform);
    };
    rect.copyGrowTransform4 = function (dest, src, thickness, projection) {
        rect.copyTo(src, dest);
        rect.growByThickness(dest, thickness);
        if (projection)
            rect.transform4(dest, projection);
    };
    rect.containsPoint = function (rect1, p) {
        return rect1.X <= p.X && rect1.Y <= p.Y && (rect1.X + rect1.Width) >= p.X && (rect1.Y + rect1.Height) >= p.Y;
    };
    rect.containsPointXY = function (rect1, x, y) {
        return rect1.X <= x && rect1.Y <= y && (rect1.X + rect1.Width) >= x && (rect1.Y + rect1.Height) >= y;
    };
    rect.rectIn = function (rect1, rect2) {
        var copy = rect.copyTo(rect1);
        rect.intersection(copy, rect2);
        if (rect.isEmpty(copy))
            return RectOverlap.Out;
        if (rect.isEqual(copy, rect2))
            return RectOverlap.In;
        return RectOverlap.Part;
    };
    rect.isRectContainedIn = function (src, test) {
        var copy = rect.copyTo(src);
        rect.intersection(copy, test);
        return rect.isEqual(src, copy);
    };
    return rect;
})();
Fayde.RegisterType(rect, {
    Name: "rect",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});

var size = (function () {
    function size() {
        this.Width = 0;
        this.Height = 0;
    }
    size.prototype.toString = function () {
        return "{" + this.Width + "," + this.Height + "}";
    };
    size.prototype.Clone = function () {
        var s = new size();
        s.Width = this.Width;
        s.Height = this.Height;
        return s;
    };
    size.fromRaw = function (width, height) {
        var s = new size();
        s.Width = width;
        s.Height = height;
        return s;
    };
    size.fromRect = function (src) {
        var s = new size();
        s.Width = src.Width;
        s.Height = src.Height;
        return s;
    };
    size.createInfinite = function () {
        var s = new size();
        s.Width = Number.POSITIVE_INFINITY;
        s.Height = Number.POSITIVE_INFINITY;
        return s;
    };
    size.createNegativeInfinite = function () {
        var s = new size();
        s.Width = Number.NEGATIVE_INFINITY;
        s.Height = Number.NEGATIVE_INFINITY;
        return s;
    };
    size.copyTo = function (src, dest) {
        if (!dest)
            dest = new size();
        dest.Width = src.Width;
        dest.Height = src.Height;
        return dest;
    };
    size.clear = function (dest) {
        dest.Width = 0;
        dest.Height = 0;
    };
    size.isEqual = function (size1, size2) {
        return size1.Width === size2.Width && size1.Height === size2.Height;
    };
    size.growBy = function (dest, width, height) {
        var h = dest.Height;
        var w = dest.Width;
        if (h != Number.POSITIVE_INFINITY)
            h += height;
        if (w != Number.POSITIVE_INFINITY)
            w += width;
        dest.Width = w > 0 ? w : 0;
        dest.Height = h > 0 ? h : 0;
        return dest;
    };
    size.growByThickness = function (dest, thickness) {
        var w = dest.Width;
        var h = dest.Height;
        if (w != Number.POSITIVE_INFINITY)
            w += thickness.Left + thickness.Right;
        if (h != Number.POSITIVE_INFINITY)
            h += thickness.Top + thickness.Bottom;
        dest.Width = w > 0 ? w : 0;
        dest.Height = h > 0 ? h : 0;
        return dest;
    };
    size.shrinkBy = function (dest, width, height) {
        var h = dest.Height;
        var w = dest.Width;
        if (h != Number.POSITIVE_INFINITY)
            h -= height;
        if (w != Number.POSITIVE_INFINITY)
            w -= width;
        dest.Width = w > 0 ? w : 0;
        dest.Height = h > 0 ? h : 0;
        return dest;
    };
    size.shrinkByThickness = function (dest, thickness) {
        var w = dest.Width;
        var h = dest.Height;
        if (w != Number.POSITIVE_INFINITY)
            w -= thickness.Left + thickness.Right;
        if (h != Number.POSITIVE_INFINITY)
            h -= thickness.Top + thickness.Bottom;
        dest.Width = w > 0 ? w : 0;
        dest.Height = h > 0 ? h : 0;
        return dest;
    };
    size.min = function (dest, other) {
        dest.Width = Math.min(dest.Width, other.Width);
        dest.Height = Math.min(dest.Height, other.Height);
        return dest;
    };
    size.max = function (dest, other) {
        dest.Width = Math.max(dest.Width, other.Width);
        dest.Height = Math.max(dest.Height, other.Height);
        return dest;
    };
    return size;
})();
Fayde.RegisterType(size, {
    Name: "size",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});

var UriKind;
(function (UriKind) {
    UriKind[UriKind["Absolute"] = 0] = "Absolute";
    UriKind[UriKind["Relative"] = 1] = "Relative";
    UriKind[UriKind["RelativeOrAbsolute"] = 2] = "RelativeOrAbsolute";
})(UriKind || (UriKind = {}));
Fayde.RegisterEnum(UriKind, {
    Name: "UriKind",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNS
});
var Uri = (function () {
    function Uri(originalString, kind) {
        this._OriginalString = originalString;
        if (kind == null)
            kind = UriKind.RelativeOrAbsolute;
        this._Kind = kind;
    }
    Object.defineProperty(Uri.prototype, "OriginalString", {
        get: function () {
            return this._OriginalString;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Uri.prototype, "Fragment", {
        get: function () {
            var index = this._OriginalString.indexOf("#");
            if (index > -1)
                return this._OriginalString.substr(index + 1);
            return "";
        },
        enumerable: true,
        configurable: true
    });
    Uri.prototype.toString = function () {
        return this._OriginalString;
    };
    Uri.prototype.Clone = function () {
        return new Uri(this._OriginalString, this._Kind);
    };
    Uri.IsNullOrEmpty = function (uri) {
        if (uri == null)
            return true;
        if (uri._OriginalString)
            return false;
        return true;
    };
    Uri.Equals = function (uri1, uri2) {
        if (uri1 == null && uri2 == null)
            return true;
        if (uri1 == null || uri2 == null)
            return false;
        return uri1.toString() === uri2.toString();
    };
    return Uri;
})();
Fayde.RegisterType(Uri, {
    Name: "Uri",
    Namespace: "window",
    XmlNamespace: Fayde.XMLNSX
});
Fayde.RegisterTypeConverter(Uri, function (val) {
    if (val == null)
        val = "";
    return new Uri(val.toString());
});

var BError = (function () {
    function BError() {
    }
    BError.prototype.ThrowException = function () {
        var ex;
        switch (this.Number) {
            case BError.Attach:
                ex = new AttachException(this.Message, this.Data);
                break;
            case BError.Argument:
                ex = new ArgumentException(this.Message);
                break;
            case BError.InvalidOperation:
                ex = new InvalidOperationException(this.Message);
                break;
            case BError.XamlParse:
                ex = new XamlParseException(this.Message);
                break;
            default:
                ex = new Exception(this.Message);
                break;
        }
        throw ex;
    };
    BError.Argument = 2;
    BError.InvalidOperation = 3;
    BError.XamlParse = 5;
    BError.Attach = 6;
    return BError;
})();
Fayde.RegisterType(BError, {
    Name: "BError",
    Namespace: "Fayde"
});

var Enum = (function () {
    function Enum(Object) {
        this.Object = Object;
    }
    return Enum;
})();
Fayde.RegisterType(Enum, {
    Name: "Enum",
    Namespace: "Fayde"
});

var EventArgs = (function () {
    function EventArgs() {
    }
    EventArgs.Empty = new EventArgs();
    return EventArgs;
})();
Fayde.RegisterType(EventArgs, {
    Name: "EventArgs",
    Namespace: "Fayde",
    XmlNamespace: Fayde.XMLNS
});

var MulticastEvent = (function () {
    function MulticastEvent() {
        this._Listeners = [];
    }
    MulticastEvent.prototype.Subscribe = function (callback, closure) {
        this._Listeners.push({ Closure: closure, Callback: callback });
    };
    MulticastEvent.prototype.Unsubscribe = function (callback, closure) {
        var listeners = this._Listeners;
        var len = listeners.length;
        var listener = null;
        var i = 0;
        while (i < len) {
            listener = listeners[i];
            if (listener.Closure === closure && listener.Callback === callback) {
                listeners.splice(i, 1);
                len--;
            } else
                i++;
        }
    };
    MulticastEvent.prototype.Raise = function (sender, args) {
        var listeners = this._Listeners;
        var len = listeners.length;
        var listener = null;
        for (var i = 0; i < len; i++) {
            listener = listeners[i];
            listener.Callback.call(listener.Closure, sender, args);
        }
    };
    MulticastEvent.prototype.RaiseAsync = function (sender, args) {
        var _this = this;
        window.setTimeout(function () {
            return _this.Raise(sender, args);
        }, 1);
    };
    return MulticastEvent;
})();
Fayde.RegisterType(MulticastEvent, {
    Name: "MulticastEvent",
    Namespace: "Fayde"
});

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        var DoubleCollection = (function (_super) {
            __extends(DoubleCollection, _super);
            function DoubleCollection() {
                _super.apply(this, arguments);
            }
            return DoubleCollection;
        })(Fayde.XamlObjectCollection);
        Shapes.DoubleCollection = DoubleCollection;
        Fayde.RegisterType(DoubleCollection, {
            Name: "DoubleCollection",
            Namespace: "Fayde.Shapes",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        var PointCollection = (function () {
            function PointCollection() {
                this._ht = [];
            }
            Object.defineProperty(PointCollection.prototype, "Count", {
                get: function () {
                    return this._ht.length;
                },
                enumerable: true,
                configurable: true
            });
            PointCollection.FromData = function (data) {
                var pc = new PointCollection();
                pc._ht = pc._ht.concat(Fayde.Media.ParseShapePoints(data));
                return pc;
            };
            PointCollection.FromArray = function (data) {
                var pc = new PointCollection();
                pc._ht = pc._ht.concat(data);
                return pc;
            };
            PointCollection.prototype.GetValueAt = function (index) {
                return this._ht[index];
            };
            PointCollection.prototype.SetValueAt = function (index, value) {
                if (index < 0 || index >= this._ht.length)
                    return false;
                var removed = this._ht[index];
                var added = value;
                this._ht[index] = added;
                var owner = this.Owner;
                if (owner)
                    owner._InvalidateNaturalBounds();
            };
            PointCollection.prototype.Add = function (value) {
                this._ht.push(value);
                var owner = this.Owner;
                if (owner)
                    owner._InvalidateNaturalBounds();
            };
            PointCollection.prototype.AddRange = function (points) {
                this._ht.push.apply(this._ht, points);
                var owner = this.Owner;
                if (owner)
                    owner._InvalidateNaturalBounds();
            };
            PointCollection.prototype.Insert = function (index, value) {
                if (index < 0)
                    return;
                var len = this._ht.length;
                if (index > len)
                    index = len;
                this._ht.splice(index, 0, value);
                var owner = this.Owner;
                if (owner)
                    owner._InvalidateNaturalBounds();
            };
            PointCollection.prototype.Remove = function (value) {
                var index = this.IndexOf(value);
                if (index === -1)
                    return;
                this.RemoveAt(index);
                var owner = this.Owner;
                if (owner)
                    owner._InvalidateNaturalBounds();
            };
            PointCollection.prototype.RemoveAt = function (index) {
                if (index < 0 || index >= this._ht.length)
                    return;
                var value = this._ht.splice(index, 1)[0];
                var owner = this.Owner;
                if (owner)
                    owner._InvalidateNaturalBounds();
            };
            PointCollection.prototype.Clear = function () {
                this._ht = [];
                var owner = this.Owner;
                if (owner)
                    owner._InvalidateNaturalBounds();
            };
            PointCollection.prototype.IndexOf = function (value) {
                var count = this._ht.length;
                for (var i = 0; i < count; i++) {
                    if (Nullstone.Equals(value, this._ht[i]))
                        return i;
                }
                return -1;
            };
            PointCollection.prototype.Contains = function (value) {
                return this.IndexOf(value) > -1;
            };
            PointCollection.prototype.GetEnumerator = function (reverse) {
                return Fayde.ArrayEx.GetEnumerator(this._ht, reverse);
            };
            return PointCollection;
        })();
        Shapes.PointCollection = PointCollection;
        Fayde.RegisterType(PointCollection, {
            Name: "PointCollection",
            Namespace: "Fayde.Shapes",
            XmlNamespace: Fayde.XMLNS
        });
        Fayde.RegisterTypeConverter(PointCollection, function (val) {
            var pc = new PointCollection();
            pc.AddRange(Fayde.Media.ParseShapePoints(val));
            return pc;
        });
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Xaml) {
        var parser = new DOMParser();
        var FrameworkTemplate = (function (_super) {
            __extends(FrameworkTemplate, _super);
            function FrameworkTemplate() {
                _super.call(this);
                this.ResourceChain = [];
            }
            FrameworkTemplate.prototype.GetVisualTree = function (bindingSource) {
                var ctx = {
                    Document: this.TemplateElement.ownerDocument,
                    ResourceChain: this.ResourceChain,
                    NameScope: new Fayde.NameScope(true),
                    ObjectStack: [],
                    TemplateBindingSource: bindingSource
                };
                var uie = createObject(this.TemplateElement.firstElementChild, ctx);
                if (!(uie instanceof Fayde.UIElement))
                    throw new XamlParseException("Template root visual is not a UIElement.");
                uie.XamlNode.NameScope = ctx.NameScope;
                return uie;
            };
            return FrameworkTemplate;
        })(Fayde.XamlObject);
        Xaml.FrameworkTemplate = FrameworkTemplate;
        Fayde.RegisterType(FrameworkTemplate, {
            Name: "FrameworkTemplate",
            Namespace: "Fayde.Xaml"
        });

        function Load(xaml) {
            var ctx = {
                Document: parser.parseFromString(xaml, "text/xml"),
                ResourceChain: [],
                NameScope: new Fayde.NameScope(true),
                ObjectStack: [],
                TemplateBindingSource: null
            };
            validateDocument(ctx.Document);
            return createObject(ctx.Document.documentElement, ctx);
        }
        Xaml.Load = Load;
        function LoadDocument(doc) {
            var ctx = {
                Document: doc,
                ResourceChain: [],
                NameScope: new Fayde.NameScope(true),
                ObjectStack: [],
                TemplateBindingSource: null
            };
            validateDocument(ctx.Document);
            return createObject(ctx.Document.documentElement, ctx);
        }
        Xaml.LoadDocument = LoadDocument;
        function createObject(el, ctx) {
            var resolution = Fayde.TypeResolver.Resolve(el.namespaceURI, el.localName);
            if (resolution === undefined)
                throw new XamlParseException("Could not resolve type '" + el.namespaceURI + ":" + el.localName + "'");
            if (resolution.IsPrimitive)
                return createPrimitive(resolution.Type, el, ctx);
            if (resolution.IsSimple)
                return createSimple(resolution.Type, el, ctx);
            if (resolution.IsSystem)
                return Fayde.ConvertAnyToType(el.textContent, resolution.Type);
            if (resolution.IsEnum) {
                var val = resolution.Type[el.textContent.trim()];
                if (val != null)
                    return val;
                return 0;
            }
            var val = new (resolution.Type)();
            if (val instanceof FrameworkTemplate)
                return createTemplate(val, el, ctx);
            ctx.ObjectStack.push(val);
            if (val instanceof Fayde.XamlObject) {
                var xobj = val;
                var xnode = xobj.XamlNode;
                var nameAttr = el.attributes.getNamedItemNS(Fayde.XMLNSX, "Name");
                if (nameAttr) {
                    var name = nameAttr.value;
                    ctx.NameScope.RegisterName(name, xnode);
                    xnode.Name = name;
                }
                xobj.TemplateOwner = ctx.TemplateBindingSource;
            }
            var childProcessor = createXamlChildProcessor(val, resolution.Type, ctx);
            if (val instanceof Fayde.XamlObjectCollection) {
                childProcessor.ProcessCollection(el, val);
            } else if (val instanceof Fayde.ResourceDictionary) {
                ctx.ResourceChain.push(val);
                processResourceDictionary(el, val, ctx);
                ctx.ResourceChain.pop();
            } else {
                childProcessor.Process(el);
            }
            return ctx.ObjectStack.pop();
        }
        function createPrimitive(type, el, ctx) {
            if (type === null)
                return null;
            if (type === Number)
                return parseFloat(el.textContent);
            if (type === String)
                return el.textContent;
            if (type === Boolean) {
                var c = el.textContent.toUpperCase();
                return c === "TRUE" ? true : (c === "FALSE" ? false : null);
            }
            if (type === Date)
                return new Date(el.textContent);
            if (type === RegExp)
                return new RegExp(el.textContent);
            if (type === Array) {
                var arr = [];
                ctx.ObjectStack.push(arr);
                var childEl = el.firstElementChild;
                while (childEl) {
                    arr.push(createObject(childEl, ctx));
                    childEl = childEl.nextElementSibling;
                }
                ctx.ObjectStack.pop();
                return arr;
            }
            return undefined;
        }
        function createSimple(type, el, ctx) {
            var text = el.textContent.trim();
            if (text)
                return Fayde.ConvertAnyToType(text, type);
            return new (type)();
        }
        function createTemplate(ft, el, ctx) {
            Object.defineProperty(ft, "ResourceChain", { value: ctx.ResourceChain.slice(0), writable: false });
            Object.defineProperty(ft, "TemplateElement", { value: el, writable: false });
            if (ft instanceof Fayde.Controls.ControlTemplate) {
                var targetTypeNode = el.attributes.getNamedItemNS(Fayde.XMLNS, "TargetType");
                if (!targetTypeNode)
                    targetTypeNode = el.attributes.getNamedItem("TargetType");
                if (!targetTypeNode)
                    throw new XamlParseException("ControlTemplate must have a TargetType.");
                var ctres = Fayde.TypeResolver.ResolveFullyQualifiedName(targetTypeNode.value, targetTypeNode);
                if (!ctres)
                    throw new XamlParseException("Could not find ControlTemplate.TargetType '" + targetTypeNode.value + "'.");
                Object.defineProperty(ft, "TargetType", {
                    value: ctres.Type,
                    writable: false
                });
            }
            return ft;
        }

        function createXamlChildProcessor(owner, ownerType, ctx) {
            var app;
            var dobj;
            var contentPropd;
            var contentCollection;
            if (owner instanceof Fayde.DependencyObject) {
                dobj = owner;
                contentPropd = Fayde.TypeResolver.GetAnnotation(ownerType, "ContentProperty");
                if (contentPropd instanceof DependencyProperty) {
                    if (contentPropd.IsImmutable) {
                        contentCollection = dobj[contentPropd.Name];
                    } else {
                        var contentTargetType = contentPropd.GetTargetType();
                        if (Nullstone.DoesInheritFrom(contentTargetType, Fayde.XamlObjectCollection)) {
                            contentCollection = new (contentTargetType)();
                            dobj.SetValue(contentPropd, contentCollection);
                        }
                    }
                } else if (dobj instanceof Fayde.Application) {
                    app = dobj;
                }
            }
            function createAttributeObject(attr, dobj, propd) {
                var value = attr.textContent;
                if (value[0] === "{") {
                    var parseCtx = {
                        Owner: dobj,
                        Property: propd,
                        Resolver: attr,
                        ResourceChain: ctx.ResourceChain,
                        TemplateBindingSource: ctx.TemplateBindingSource,
                        ObjectStack: ctx.ObjectStack
                    };
                    var result = Xaml.MarkupExpressionParser.Parse(value, parseCtx);
                    if (result !== undefined)
                        return result;
                }
                if (propd === Fayde.Style.TargetTypeProperty) {
                    var resolution = Fayde.TypeResolver.ResolveFullyQualifiedName(value, attr);
                    if (resolution === undefined)
                        throw new XamlParseException("Could not resolve type '" + value + "'");
                    return resolution.Type;
                } else if (propd === Fayde.Setter.PropertyProperty) {
                    var ownerStyle = findOwnerStyle();
                    return resolveDependencyProperty(value, ownerStyle.TargetType, attr);
                }
                var targetType = propd.GetTargetType();
                if (targetType === String)
                    return value;
                return Fayde.ConvertAnyToType(value, targetType);
            }
            function findOwnerStyle() {
                var s = ctx.ObjectStack;
                var len = s.length;
                var cur;
                for (var i = len - 1; i >= 0; i--) {
                    cur = s[i];
                    if (cur instanceof Fayde.Style)
                        return cur;
                }
                return undefined;
            }
            function resolveDependencyProperty(val, targetType, resolver) {
                var tokens = val.split(".");
                if (tokens.length === 1)
                    return DependencyProperty.GetDependencyProperty(targetType, val);
                var resolution = Fayde.TypeResolver.ResolveFullyQualifiedName(tokens[0], resolver);
                if (resolution === undefined)
                    throw new XamlParseException("Could not resolve DependencyProperty type '" + val + "'");
                return DependencyProperty.GetDependencyProperty(resolution.Type, tokens[1]);
            }
            function getResourcesChildElement(el) {
                if (!dobj)
                    return undefined;
                var parentNsUri = el.namespaceURI;
                var expectedname = el.localName + ".Resources";
                var child = el.firstElementChild;
                var nsUri;
                while (child) {
                    nsUri = child.namespaceURI || Fayde.XMLNS;
                    if (nsUri === parentNsUri && child.localName === expectedname)
                        return child;
                    child = child.nextElementSibling;
                }
                return undefined;
            }
            var hasSetContent = false;
            var propertiesSet = [];
            function ensurePropertyNotSet(propertyName) {
                if (propertiesSet.indexOf(propertyName) > -1)
                    throw new XamlParseException("Cannot set a property in XAML more than once.");
                propertiesSet.push(propertyName);
            }
            return {
                Process: function (el) {
                    var resElement = getResourcesChildElement(el);
                    var rd;
                    if (resElement) {
                        rd = (dobj).Resources;
                        if (rd) {
                            ctx.ResourceChain.push(rd);
                            processResourceDictionary(resElement, rd, ctx);
                        }
                    }
                    var attrs = el.attributes;
                    var len = attrs.length;
                    var attr;
                    for (var i = 0; i < len; i++) {
                        attr = attrs[i];
                        if (attr.name === "xmlns")
                            continue;
                        if (attr.prefix === "xmlns")
                            continue;
                        if (attr.namespaceURI === Fayde.XMLNSX)
                            continue;
                        this.ProcessAttribute(attr);
                    }
                    var child = el.firstElementChild;
                    while (child) {
                        if (child !== resElement)
                            this.ProcessElement(child);
                        child = child.nextElementSibling;
                    }
                    if (!hasSetContent && !el.firstElementChild && contentPropd) {
                        var text = el.textContent;
                        if (text && (text = text.trim()))
                            dobj.SetValue(contentPropd, text);
                    }
                    if (rd)
                        ctx.ResourceChain.pop();
                },
                ProcessAttribute: function (attr) {
                    var tokens = attr.localName.split(".");
                    var propd;
                    var event;
                    var propertyName;
                    if (tokens.length > 1) {
                        var nsUri = attr.namespaceURI || Fayde.XMLNS;
                        var typeRes = Fayde.TypeResolver.Resolve(nsUri, tokens[0]);
                        propertyName = tokens[1];
                        propd = DependencyProperty.GetDependencyProperty(typeRes.Type, propertyName, true);
                        if (!propd)
                            throw new XamlParseException("Could not find attached property '" + nsUri + ":" + attr.localName + "'");
                        if (!dobj)
                            throw new XamlParseException("Cannot set an attached property on an object that is not a DependencyObject.");
                    } else {
                        propertyName = attr.localName;
                        if (dobj)
                            propd = DependencyProperty.GetDependencyProperty(ownerType, propertyName, true);
                        if (!propd) {
                            event = owner[propertyName];
                            if (!(event instanceof MulticastEvent))
                                event = undefined;
                        }
                    }
                    ensurePropertyNotSet(propertyName);
                    if (propd) {
                        dobj.SetValue(propd, createAttributeObject(attr, dobj, propd));
                    } else if (event) {
                        var rootobj = ctx.ObjectStack[0];
                        var callback = rootobj[attr.value];
                        if (!callback)
                            throw new XamlParseException("Cannot find method for event subscription '" + attr.value + "'.");
                        event.Subscribe(callback, rootobj);
                    } else {
                        owner[propertyName] = attr.textContent;
                    }
                },
                ProcessElement: function (el) {
                    var tokens = el.localName.split(".");
                    var propd;
                    var propertyName;
                    if (tokens.length > 1) {
                        var nsUri = el.namespaceURI || Fayde.XMLNS;
                        var typeRes = Fayde.TypeResolver.Resolve(nsUri, tokens[0]);
                        if (!typeRes)
                            throw new XamlParseException("Could not resolve type '" + nsUri + ":" + tokens[0] + "'");
                        propertyName = tokens[1];
                        propd = DependencyProperty.GetDependencyProperty(typeRes.Type, propertyName, true);
                        if (!propd)
                            throw new XamlParseException("Could not find property '" + nsUri + ":" + el.localName + "'");
                        ensurePropertyNotSet(propertyName);
                        var val;
                        if (propd.IsImmutable) {
                            val = dobj.GetValue(propd);
                            if (!(val instanceof Fayde.XamlObjectCollection))
                                throw new XamlParseException("Cannot set immutable property.");
                            this.ProcessCollection(el, val);
                        } else {
                            if (propd.IsAttached) {
                                var propTargetType = propd.GetTargetType();
                                if (Nullstone.DoesInheritFrom(propTargetType, Fayde.XamlObjectCollection)) {
                                    val = new (propTargetType)();
                                    dobj.SetValue(propd, val);
                                    this.ProcessCollection(el, val);
                                    return;
                                }
                            }
                            dobj.SetValue(propd, createObject(el.firstElementChild, ctx));
                        }
                    } else {
                        if (!contentPropd) {
                            if (!app)
                                throw new XamlParseException("Attempting to set content on an object that does not have a Content Property.");
                            if (hasSetContent)
                                throw new XamlParseException("Content has already been set.");
                            hasSetContent = true;
                            app.MainSurface.Attach(createObject(el, ctx));
                        } else {
                            if (contentCollection) {
                                contentCollection.Add(createObject(el, ctx));
                            } else {
                                ensurePropertyNotSet(propertyName);
                                if (hasSetContent)
                                    throw new XamlParseException("Content has already been set.");
                                hasSetContent = true;
                                dobj.SetValue(contentPropd, createObject(el, ctx));
                            }
                        }
                    }
                },
                ProcessCollection: function (propertyEl, coll) {
                    ctx.ObjectStack.push(coll);
                    var curEl = propertyEl.firstElementChild;
                    while (curEl) {
                        coll.Add(createObject(curEl, ctx));
                        curEl = curEl.nextElementSibling;
                    }
                    ctx.ObjectStack.pop();
                }
            };
        }
        function validateDocument(doc) {
            var docEl = doc.documentElement;
            if (!docEl.isDefaultNamespace(Fayde.XMLNS))
                throw new XamlParseException("Invalid default namespace in XAML document.");
        }
        function LoadApplication(xaml, canvas) {
            TimelineProfile.Parse(true, "App");
            var appLoader = createAppLoader(xaml, canvas);
            appLoader.Load();
        }
        Xaml.LoadApplication = LoadApplication;

        function createAppLoader(xaml, canvas) {
            var appSources = new Fayde.XamlObjectCollection();
            var rdResources = [];
            var theme;
            var ctx = {
                Document: parser.parseFromString(xaml, "text/xml"),
                ResourceChain: [],
                NameScope: new Fayde.NameScope(true),
                ObjectStack: [],
                TemplateBindingSource: null
            };
            validateDocument(ctx.Document);
            function registerSources() {
                var appEl = ctx.Document.documentElement;
                var appNsUri = appEl.namespaceURI;
                var themeUrl = appEl.getAttributeNS(appNsUri, "Theme");
                if (!themeUrl)
                    themeUrl = appEl.getAttribute("Theme");
                theme = new Theme(themeUrl);
                var sourceNodeName = appEl.localName + ".Sources";
                var nsUri;
                var curElement = appEl.firstElementChild;
                while (curElement) {
                    nsUri = curElement.namespaceURI || Fayde.XMLNS;
                    if (nsUri === appNsUri && curElement.localName === sourceNodeName)
                        break;
                    curElement = curElement.nextElementSibling;
                }
                if (!curElement)
                    return;
                curElement = curElement.firstElementChild;
                var nsSource;
                while (curElement) {
                    nsSource = createObject(curElement, ctx);
                    nsSource.RegisterSource();
                    appSources.Add(nsSource);
                    curElement = curElement.nextElementSibling;
                }
            }
            function preloadResourceDictionaries() {
                var appEl = ctx.Document.documentElement;
                var appNsUri = appEl.namespaceURI;
                var resourcesNodeName = appEl.localName + ".Resources";
                var nsUri;
                var curElement = appEl.firstElementChild;
                while (curElement) {
                    nsUri = curElement.namespaceURI || Fayde.XMLNS;
                    if (nsUri === appNsUri && curElement.localName === resourcesNodeName)
                        break;
                    curElement = curElement.nextElementSibling;
                }
                if (curElement)
                    parseResources(curElement);
            }
            function parseResources(resel) {
                var curElement = resel.firstElementChild;
                var src;
                var childEl;
                while (curElement) {
                    if (curElement.localName === "ResourceDictionary") {
                        if (src = curElement.getAttribute("Source"))
                            rdResources.push(Fayde.Xaml.RegisterResourceDictionary(new Uri(src)));
                        childEl = curElement.firstElementChild;
                        while (childEl) {
                            if (childEl.localName === "ResourceDictionary.MergedDictionaries") {
                                parseResources(childEl);
                                break;
                            }
                            childEl = childEl.nextElementSibling;
                        }
                    }
                    curElement = curElement.nextElementSibling;
                }
            }
            function collectDependencies() {
                var deps = [];
                var next;
                var attrs;
                var curElement = ctx.Document.documentElement;
                var nsUri;
                while (curElement) {
                    nsUri = curElement.namespaceURI;
                    if (nsUri !== null && nsUri !== Fayde.XMLNS && nsUri !== Fayde.XMLNSX)
                        deps.push({ NamespaceUri: curElement.namespaceURI, Name: curElement.localName });
                    attrs = curElement.attributes;
                    next = curElement.nextElementSibling;
                    if (!next)
                        next = (curElement.parentNode).nextElementSibling;
                    curElement = next;
                }
                return deps;
            }
            function finishLoad() {
                var el = ctx.Document.documentElement;
                var nsUri = el.namespaceURI || Fayde.XMLNS;
                var resolution = Fayde.TypeResolver.Resolve(nsUri, el.localName);
                if (resolution === undefined)
                    throw new XamlParseException("Could not resolve application type '" + nsUri + ":" + el.localName + "'");
                var app = new (resolution.Type)();
                theme.Create();
                Object.defineProperty(app, "Theme", { value: theme, writable: false });
                Fayde.Application.Current = app;
                if (!(app instanceof Fayde.Application))
                    throw new XamlParseException("Root Element must be an Application.");
                app.Sources._ht = appSources._ht;
                app.MainSurface.Register(canvas);
                ctx.ObjectStack.push(app);
                var childProcessor = createXamlChildProcessor(app, resolution.Type, ctx);
                childProcessor.Process(el);
                app.RootVisual.XamlNode.NameScope = ctx.NameScope;
                ctx.ObjectStack.pop();
                TimelineProfile.Parse(false, "App");
                Fayde.Application.Current.Start();
            }
            return {
                Load: function () {
                    registerSources();
                    preloadResourceDictionaries();
                    collectDependencies();
                    var loaders = appSources.ToArray();
                    loaders.push.apply(loaders, rdResources);
                    loaders.push(theme);
                    Fayde.Runtime.LoadBatchAsync(loaders, function () {
                        return finishLoad();
                    });
                }
            };
        }
        var Theme = (function () {
            function Theme(url) {
                this.Url = url;
            }
            Theme.prototype.Create = function () {
                var rd = Load(this._Xaml);
                Object.defineProperty(this, "Resources", { value: rd, writable: false });
            };
            Theme.prototype.LoadAsync = function (onLoaded) {
                var _this = this;
                var request = new Fayde.AjaxRequest(function (result) {
                    _this._Xaml = result.GetData();
                    onLoaded(_this);
                }, function (error) {
                    console.warn("Could not load Theme: " + error);
                    onLoaded(_this);
                });
                request.Get(this.Url);
            };
            return Theme;
        })();
        Xaml.Theme = Theme;
        function processResourceDictionary(el, rd, ctx) {
            ctx.ObjectStack.push(rd);
            var subEl = el.firstElementChild;
            var rdEl;
            var curEl = subEl;
            if (subEl && subEl.namespaceURI === Fayde.XMLNS && subEl.localName === "ResourceDictionary") {
                rdEl = subEl;
                curEl = subEl.firstElementChild;
            } else if (el && el.namespaceURI === Fayde.XMLNS && el.localName === "ResourceDictionary") {
                rdEl = el;
            }
            var srcAttr = rdEl ? rdEl.getAttribute("Source") : undefined;
            if (srcAttr) {
                rd.Source = new Uri(srcAttr);
                loadResourceDictionary(rd);
            } else {
                var localName;
                while (curEl) {
                    localName = curEl.localName;
                    if (localName.indexOf(".") < 0) {
                        createObjectInResources(curEl, rd, ctx);
                    } else if (localName === "ResourceDictionary.MergedDictionaries") {
                        processMergedDictionaries(curEl, rd, ctx);
                    }
                    curEl = curEl.nextElementSibling;
                }
            }
            ctx.ObjectStack.pop();
        }
        function processMergedDictionaries(mdEl, rd, ctx) {
            var curEl = mdEl.firstElementChild;
            var rd;
            var rdc = rd.MergedDictionaries;
            while (curEl) {
                if (curEl.localName === "ResourceDictionary") {
                    rdc.Add(rd = new Fayde.ResourceDictionary());
                    processResourceDictionary(curEl, rd, ctx);
                }
                curEl = curEl.nextElementSibling;
            }
        }
        function loadResourceDictionary(rd) {
            if ((rd)._IsSourceLoaded)
                return;
            var resource = Fayde.Xaml.MapResourceDictionary(rd.Source);
            if (!resource)
                return;
            var doc = resource.Document;
            if (!doc)
                return;
            var ctx = {
                Document: doc,
                ResourceChain: [rd],
                NameScope: new Fayde.NameScope(true),
                ObjectStack: [rd],
                TemplateBindingSource: null
            };
            validateDocument(ctx.Document);
            (rd)._IsSourceLoaded = true;
            processResourceDictionary(ctx.Document.documentElement, rd, ctx);
        }
        function createObjectInResources(el, rd, ctx) {
            var cur = createObject(el, ctx);
            var key = getElementKey(el);
            if (key) {
                rd.Set(key, cur);
            } else {
                if (!(cur instanceof Fayde.Style))
                    throw new XamlParseException("An object in a ResourceDictionary must have x:Key.");
                var targetType = cur.TargetType;
                if (!targetType)
                    throw new XamlParseException("A Style in a ResourceDictionary must have x:Key or TargetType.");
                rd.Set(targetType, cur);
            }
        }
        function getElementKey(el) {
            var attrs = el.attributes;
            var keyn = attrs.getNamedItemNS(Fayde.XMLNSX, "Key");
            if (keyn)
                return keyn.value;
            var keyn = attrs.getNamedItemNS(Fayde.XMLNSX, "Name");
            if (keyn)
                return keyn.value;
            return "";
        }
    })(Fayde.Xaml || (Fayde.Xaml = {}));
    var Xaml = Fayde.Xaml;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Collections) {
        (function (NotifyCollectionChangedAction) {
            NotifyCollectionChangedAction[NotifyCollectionChangedAction["Add"] = 1] = "Add";
            NotifyCollectionChangedAction[NotifyCollectionChangedAction["Remove"] = 2] = "Remove";
            NotifyCollectionChangedAction[NotifyCollectionChangedAction["Replace"] = 3] = "Replace";
            NotifyCollectionChangedAction[NotifyCollectionChangedAction["Reset"] = 4] = "Reset";
        })(Collections.NotifyCollectionChangedAction || (Collections.NotifyCollectionChangedAction = {}));
        var NotifyCollectionChangedAction = Collections.NotifyCollectionChangedAction;
        var NotifyCollectionChangedEventArgs = (function (_super) {
            __extends(NotifyCollectionChangedEventArgs, _super);
            function NotifyCollectionChangedEventArgs() {
                _super.apply(this, arguments);
            }
            NotifyCollectionChangedEventArgs.Reset = function () {
                var args = new NotifyCollectionChangedEventArgs();
                Object.defineProperty(args, "Action", { value: NotifyCollectionChangedAction.Reset, writable: false });
                Object.defineProperty(args, "OldStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "NewStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "OldItems", { value: null, writable: false });
                Object.defineProperty(args, "NewItems", { value: null, writable: false });
                return args;
            };
            NotifyCollectionChangedEventArgs.Replace = function (newValue, oldValue, index) {
                var args = new NotifyCollectionChangedEventArgs();
                Object.defineProperty(args, "Action", { value: NotifyCollectionChangedAction.Replace, writable: false });
                Object.defineProperty(args, "OldStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "NewStartingIndex", { value: index, writable: false });
                Object.defineProperty(args, "OldItems", { value: [oldValue], writable: false });
                Object.defineProperty(args, "NewItems", { value: [newValue], writable: false });
                return args;
            };
            NotifyCollectionChangedEventArgs.Add = function (newValue, index) {
                var args = new NotifyCollectionChangedEventArgs();
                Object.defineProperty(args, "Action", { value: NotifyCollectionChangedAction.Add, writable: false });
                Object.defineProperty(args, "OldStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "NewStartingIndex", { value: index, writable: false });
                Object.defineProperty(args, "OldItems", { value: null, writable: false });
                Object.defineProperty(args, "NewItems", { value: [newValue], writable: false });
                return args;
            };
            NotifyCollectionChangedEventArgs.AddRange = function (newValues, index) {
                var args = new NotifyCollectionChangedEventArgs();
                Object.defineProperty(args, "Action", { value: NotifyCollectionChangedAction.Add, writable: false });
                Object.defineProperty(args, "OldStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "NewStartingIndex", { value: index, writable: false });
                Object.defineProperty(args, "OldItems", { value: null, writable: false });
                Object.defineProperty(args, "NewItems", { value: newValues, writable: false });
                return args;
            };
            NotifyCollectionChangedEventArgs.Remove = function (oldValue, index) {
                var args = new NotifyCollectionChangedEventArgs();
                Object.defineProperty(args, "Action", { value: NotifyCollectionChangedAction.Remove, writable: false });
                Object.defineProperty(args, "OldStartingIndex", { value: index, writable: false });
                Object.defineProperty(args, "NewStartingIndex", { value: -1, writable: false });
                Object.defineProperty(args, "OldItems", { value: [oldValue], writable: false });
                Object.defineProperty(args, "NewItems", { value: null, writable: false });
                return args;
            };
            return NotifyCollectionChangedEventArgs;
        })(EventArgs);
        Collections.NotifyCollectionChangedEventArgs = NotifyCollectionChangedEventArgs;
    })(Fayde.Collections || (Fayde.Collections = {}));
    var Collections = Fayde.Collections;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ControlTemplate = (function (_super) {
            __extends(ControlTemplate, _super);
            function ControlTemplate() {
                _super.call(this);
            }
            ControlTemplate.prototype.GetVisualTree = function (bindingSource) {
                var uie = _super.prototype.GetVisualTree.call(this, bindingSource);
                return uie;
            };
            return ControlTemplate;
        })(Fayde.Xaml.FrameworkTemplate);
        Controls.ControlTemplate = ControlTemplate;
        Fayde.RegisterType(ControlTemplate, {
            Name: "ControlTemplate",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ItemsPanelTemplate = (function (_super) {
            __extends(ItemsPanelTemplate, _super);
            function ItemsPanelTemplate() {
                _super.call(this);
            }
            ItemsPanelTemplate.prototype.GetVisualTree = function (bindingSource) {
                var panel = _super.prototype.GetVisualTree.call(this, bindingSource);
                if (!(panel instanceof Controls.Panel))
                    throw new XamlParseException("The root element of an ItemsPanelTemplate must be a Panel subclass.");
                return panel;
            };
            return ItemsPanelTemplate;
        })(Fayde.Xaml.FrameworkTemplate);
        Controls.ItemsPanelTemplate = ItemsPanelTemplate;
        Fayde.RegisterType(ItemsPanelTemplate, {
            Name: "ItemsPanelTemplate",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var ItemsChangedEventArgs = (function (_super) {
                __extends(ItemsChangedEventArgs, _super);
                function ItemsChangedEventArgs(action, itemCount, itemUICount, oldPosition, position) {
                    _super.call(this);
                    Object.defineProperty(this, "Action", { value: action, writable: false });
                    Object.defineProperty(this, "ItemCount", { value: itemCount, writable: false });
                    Object.defineProperty(this, "ItemUICount", { value: itemUICount, writable: false });
                    Object.defineProperty(this, "OldPosition", { value: oldPosition, writable: false });
                    Object.defineProperty(this, "Position", { value: position, writable: false });
                }
                return ItemsChangedEventArgs;
            })(EventArgs);
            Primitives.ItemsChangedEventArgs = ItemsChangedEventArgs;
            Fayde.RegisterType(ItemsChangedEventArgs, {
                Name: "ItemsChangedEventArgs",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var DataTemplate = (function (_super) {
        __extends(DataTemplate, _super);
        function DataTemplate() {
            _super.call(this);
        }
        DataTemplate.prototype.GetVisualTree = function (bindingSource) {
            var uie = _super.prototype.GetVisualTree.call(this, bindingSource);
            return uie;
        };
        return DataTemplate;
    })(Fayde.Xaml.FrameworkTemplate);
    Fayde.DataTemplate = DataTemplate;
    Fayde.RegisterType(DataTemplate, {
        Name: "DataTemplate",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var DeferredValueExpression = (function (_super) {
        __extends(DeferredValueExpression, _super);
        function DeferredValueExpression() {
            _super.apply(this, arguments);
        }
        DeferredValueExpression.prototype.GetValue = function (propd) {
            return undefined;
        };
        DeferredValueExpression.prototype.toString = function () {
            return "DeferredValueExpression";
        };
        return DeferredValueExpression;
    })(Fayde.Expression);
    Fayde.DeferredValueExpression = DeferredValueExpression;
    Fayde.RegisterType(DeferredValueExpression, {
        Name: "DeferredValueExpression",
        Namespace: "Fayde"
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var DONode = (function (_super) {
        __extends(DONode, _super);
        function DONode(xobj) {
            _super.call(this, xobj);
        }
        DONode.prototype.OnParentChanged = function (oldParentNode, newParentNode) {
            var propd = DependencyObject.DataContextProperty;
            var storage = Fayde.Providers.GetStorage(this.XObject, propd);
            var newInherited = newParentNode ? newParentNode.DataContext : undefined;
            (propd.Store).EmitInheritedChanged(storage, newInherited);
        };
        Object.defineProperty(DONode.prototype, "DataContext", {
            get: function () {
                return this.XObject.DataContext;
            },
            set: function (value) {
                var propd = DependencyObject.DataContextProperty;
                var storage = Fayde.Providers.GetStorage(this.XObject, propd);
                (propd.Store).EmitInheritedChanged(storage, value);
                this.OnDataContextChanged(undefined, value);
            },
            enumerable: true,
            configurable: true
        });
        DONode.prototype._DataContextPropertyChanged = function (isLocalSet, args) {
            this.OnDataContextChanged(args.OldValue, args.NewValue);
            var dcpid = DependencyObject.DataContextProperty._ID.toString();
            var exprs = (this.XObject)._Expressions;
            var expr;
            for (var id in exprs) {
                expr = exprs[id];
                if (!expr)
                    continue;
                if (isLocalSet && id === dcpid)
                    continue;
                expr.OnDataContextChanged(args.NewValue);
            }
        };
        return DONode;
    })(Fayde.XamlNode);
    Fayde.DONode = DONode;
    Fayde.RegisterType(DONode, {
        Name: "DONode",
        Namespace: "Fayde"
    });
    var DependencyObject = (function (_super) {
        __extends(DependencyObject, _super);
        function DependencyObject() {
            _super.call(this);
            this._Expressions = [];
            this._PropertyStorage = [];
        }
        DependencyObject.prototype.CreateNode = function () {
            return new DONode(this);
        };
        DependencyObject.prototype.GetValue = function (propd) {
            if (!propd)
                throw new ArgumentException("No property specified.");
            var storage = Fayde.Providers.GetStorage(this, propd);
            return propd.Store.GetValue(storage);
        };
        DependencyObject.prototype.SetValue = function (propd, value) {
            if (!propd)
                throw new ArgumentException("No property specified.");
            if (propd.IsReadOnly)
                throw new InvalidOperationException("DependencyProperty '" + (propd.OwnerType)._TypeName + "." + propd.Name + "' is read only.");
            this.SetValueInternal(propd, value);
        };
        DependencyObject.prototype.SetValueInternal = function (propd, value) {
            var expression;
            if (value instanceof Fayde.Expression)
                expression = value;
            if (expression instanceof Fayde.Data.BindingExpressionBase) {
                var binding = (expression).ParentBinding;
                var path = binding.Path.Path;
                if ((!path || path === ".") && binding.Mode === Fayde.Data.BindingMode.TwoWay)
                    throw new ArgumentException("TwoWay bindings require a non-empty Path.");
                binding.Seal();
            }
            var existing = this._Expressions[propd._ID];
            var updateTwoWay = false;
            var addingExpression = false;
            if (expression) {
                if (expression !== existing) {
                    if (expression.IsAttached)
                        throw new ArgumentException("Cannot attach the same Expression to multiple FrameworkElements");
                    if (existing)
                        this._RemoveExpression(propd);
                    this._AddExpression(propd, expression);
                }
                addingExpression = true;
                value = expression.GetValue(propd);
            } else if (existing) {
                if (existing instanceof Fayde.Data.BindingExpressionBase) {
                    var binding = (existing).ParentBinding;
                    if (binding.Mode === Fayde.Data.BindingMode.TwoWay) {
                        updateTwoWay = !existing.IsUpdating && !propd.IsCustom;
                    } else if (!existing.IsUpdating || binding.Mode === Fayde.Data.BindingMode.OneTime) {
                        this._RemoveExpression(propd);
                    }
                } else if (!existing.IsUpdating) {
                    this._RemoveExpression(propd);
                }
            }
            var storage = Fayde.Providers.GetStorage(this, propd);
            try  {
                propd.Store.SetLocalValue(storage, value);
                if (updateTwoWay)
                    (existing)._TryUpdateSourceObject(value);
            } catch (err) {
                if (!addingExpression)
                    throw err;
                propd.Store.SetLocalValue(storage, propd.DefaultValue);
                if (updateTwoWay)
                    (existing)._TryUpdateSourceObject(value);
            }
        };
        DependencyObject.prototype.SetStoreValue = function (propd, value) {
            var storage = Fayde.Providers.GetStorage(this, propd);
            propd.Store.SetLocalValue(storage, value);
        };
        DependencyObject.prototype.ClearValue = function (propd) {
            if (!propd)
                throw new ArgumentException("No dependency property.");
            if (propd.IsReadOnly && !propd.IsCustom)
                throw new ArgumentException("This property is readonly.");
            this._RemoveExpression(propd);
            var storage = Fayde.Providers.GetStorage(this, propd);
            var anims = storage.Animations;
            if (anims && anims.length > 0)
                return;
            propd.Store.ClearValue(storage);
        };
        DependencyObject.prototype.ReadLocalValue = function (propd) {
            if (!propd)
                throw new ArgumentException("No property specified.");
            var expr = this._Expressions[propd._ID];
            if (expr)
                return expr.GetValue(propd);
            var val = this.ReadLocalValueInternal(propd);
            if (val === undefined)
                return Fayde.UnsetValue;
            return val;
        };
        DependencyObject.prototype.ReadLocalValueInternal = function (propd) {
            var storage = Fayde.Providers.GetStorage(this, propd);
            return storage.Local;
        };
        DependencyObject.prototype._AddExpression = function (propd, expr) {
            this._Expressions[propd._ID] = expr;
            expr.OnAttached(this);
        };
        DependencyObject.prototype._RemoveExpression = function (propd) {
            var expr = this._Expressions[propd._ID];
            if (expr) {
                this._Expressions[propd._ID] = undefined;
                expr.OnDetached(this);
            }
        };
        DependencyObject.prototype._HasDeferredValueExpression = function (propd) {
            var expr = this._Expressions[propd._ID];
            return expr instanceof Fayde.DeferredValueExpression;
        };
        DependencyObject.prototype.GetBindingExpression = function (propd) {
            var expr = this._Expressions[propd._ID];
            if (expr instanceof Fayde.Data.BindingExpressionBase)
                return expr;
        };
        DependencyObject.prototype.SetBinding = function (propd, binding) {
            if (!propd)
                throw new ArgumentException("propd");
            if (!binding)
                throw new ArgumentException("binding");
            var e = new Fayde.Data.BindingExpression(binding, this, propd);
            this.SetValueInternal(propd, e);
            return e;
        };
        DependencyObject.prototype.CloneCore = function (source) {
            var sarr = source._PropertyStorage;
            var darr = this._PropertyStorage;
            if (!darr)
                darr = this._PropertyStorage = [];
            for (var id in sarr) {
                var storage = sarr[id];
                darr[id] = storage.Property.Store.Clone(this, storage);
            }
        };
        DependencyObject.DataContextProperty = DependencyProperty.Register("DataContext", function () {
            return Object;
        }, DependencyObject);
        return DependencyObject;
    })(Fayde.XamlObject);
    Fayde.DependencyObject = DependencyObject;
    Fayde.RegisterType(DependencyObject, {
        Name: "DependencyObject",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    DependencyObject.DataContextProperty.Store = Fayde.Providers.DataContextStore.Instance;
})(Fayde || (Fayde = {}));

var DependencyPropertyChangedEventArgs = (function (_super) {
    __extends(DependencyPropertyChangedEventArgs, _super);
    function DependencyPropertyChangedEventArgs() {
        _super.apply(this, arguments);
    }
    return DependencyPropertyChangedEventArgs;
})(EventArgs);

var Fayde;
(function (Fayde) {
    var InheritableOwner = (function () {
        function InheritableOwner() {
        }
        InheritableOwner._UseLayoutRoundingPropertyChanged = function (dobj, args) {
            var uie = dobj;
            var lu = uie.XamlNode.LayoutUpdater;
            lu.InvalidateMeasure();
            lu.InvalidateArrange();
        };

        InheritableOwner._FlowDirectionPropertyChanged = function (dobj, args) {
            var feNode = (dobj).XamlNode;
            if (feNode._FlowDirectionChanged)
                feNode._FlowDirectionChanged(args);
        };

        InheritableOwner._FontFamilyPropertyChanged = function (dobj, args) {
            if ((dobj).FontChanged)
                (dobj).FontChanged(args);
        };

        InheritableOwner._FontSizePropertyChanged = function (dobj, args) {
            if ((dobj).FontChanged)
                (dobj).FontChanged(args);
        };

        InheritableOwner._FontStretchPropertyChanged = function (dobj, args) {
            if ((dobj).FontChanged)
                (dobj).FontChanged(args);
        };

        InheritableOwner._FontStylePropertyChanged = function (dobj, args) {
            if ((dobj).FontChanged)
                (dobj).FontChanged(args);
        };

        InheritableOwner._FontWeightPropertyChanged = function (dobj, args) {
            if ((dobj).FontChanged)
                (dobj).FontChanged(args);
        };

        InheritableOwner._ForegroundPropertyChanged = function (dobj, args) {
            if ((dobj).FontChanged)
                (dobj).FontChanged(args);
        };

        InheritableOwner._TextDecorationsPropertyChanged = function (dobj, args) {
            if ((dobj).FontChanged)
                (dobj).FontChanged(args);
        };

        InheritableOwner._LanguagePropertyChanged = function (dobj, args) {
            if ((dobj).FontChanged)
                (dobj).FontChanged(args);
        };
        InheritableOwner.UseLayoutRoundingProperty = DependencyProperty.RegisterInheritable("UseLayoutRounding", function () {
            return Boolean;
        }, InheritableOwner, true, InheritableOwner._UseLayoutRoundingPropertyChanged);

        InheritableOwner.FlowDirectionProperty = DependencyProperty.RegisterInheritable("FlowDirection", function () {
            return new Enum(Fayde.FlowDirection);
        }, InheritableOwner, Fayde.FlowDirection.LeftToRight, InheritableOwner._FlowDirectionPropertyChanged);

        InheritableOwner.FontFamilyProperty = DependencyProperty.RegisterInheritable("FontFamily", function () {
            return String;
        }, InheritableOwner, Font.DEFAULT_FAMILY, InheritableOwner._FontFamilyPropertyChanged);

        InheritableOwner.FontSizeProperty = DependencyProperty.RegisterInheritable("FontSize", function () {
            return Number;
        }, InheritableOwner, Font.DEFAULT_SIZE, InheritableOwner._FontSizePropertyChanged);

        InheritableOwner.FontStretchProperty = DependencyProperty.RegisterInheritable("FontStretch", function () {
            return String;
        }, InheritableOwner, Font.DEFAULT_STRETCH, InheritableOwner._FontStretchPropertyChanged);

        InheritableOwner.FontStyleProperty = DependencyProperty.RegisterInheritable("FontStyle", function () {
            return String;
        }, InheritableOwner, Font.DEFAULT_STYLE, InheritableOwner._FontStylePropertyChanged);

        InheritableOwner.FontWeightProperty = DependencyProperty.RegisterInheritable("FontWeight", function () {
            return new Enum(Fayde.FontWeight);
        }, InheritableOwner, Font.DEFAULT_WEIGHT, InheritableOwner._FontWeightPropertyChanged);

        InheritableOwner.ForegroundProperty = DependencyProperty.RegisterInheritable("Foreground", function () {
            return Fayde.Media.Brush;
        }, InheritableOwner, undefined, InheritableOwner._ForegroundPropertyChanged);

        InheritableOwner.TextDecorationsProperty = DependencyProperty.RegisterInheritable("TextDecorations", function () {
            return new Enum(Fayde.TextDecorations);
        }, InheritableOwner, Fayde.TextDecorations.None, InheritableOwner._TextDecorationsPropertyChanged);

        InheritableOwner.LanguageProperty = DependencyProperty.RegisterInheritable("Language", function () {
            return String;
        }, InheritableOwner, undefined, InheritableOwner._LanguagePropertyChanged);
        return InheritableOwner;
    })();
    Fayde.InheritableOwner = InheritableOwner;
    InheritableOwner.AllInheritedProperties = [
        InheritableOwner.ForegroundProperty,
        InheritableOwner.FontFamilyProperty,
        InheritableOwner.FontStretchProperty,
        InheritableOwner.FontStyleProperty,
        InheritableOwner.FontWeightProperty,
        InheritableOwner.FontSizeProperty,
        InheritableOwner.LanguageProperty,
        InheritableOwner.FlowDirectionProperty,
        InheritableOwner.UseLayoutRoundingProperty,
        InheritableOwner.TextDecorationsProperty
    ];
    Fayde.RegisterType(InheritableOwner, {
        Name: "InheritableOwner",
        Namespace: "Fayde"
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var PropertyChangedEventArgs = (function (_super) {
        __extends(PropertyChangedEventArgs, _super);
        function PropertyChangedEventArgs(propertyName) {
            _super.call(this);
            Object.defineProperty(this, "PropertyName", { value: propertyName, writable: false });
        }
        return PropertyChangedEventArgs;
    })(EventArgs);
    Fayde.PropertyChangedEventArgs = PropertyChangedEventArgs;
    Fayde.RegisterType(PropertyChangedEventArgs, {
        Name: "PropertyChangedEventArgs",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });

    Fayde.INotifyPropertyChanged_ = Fayde.RegisterInterface("INotifyPropertyChanged");
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var ResourceDictionaryCollection = (function (_super) {
        __extends(ResourceDictionaryCollection, _super);
        function ResourceDictionaryCollection() {
            _super.apply(this, arguments);
        }
        ResourceDictionaryCollection.prototype.Get = function (key) {
            var enumerator = this.GetEnumerator();
            var cur;
            while (enumerator.MoveNext()) {
                cur = enumerator.Current.Get(key);
                if (cur !== undefined)
                    return cur;
            }
            return undefined;
        };
        ResourceDictionaryCollection.prototype.AddingToCollection = function (value, error) {
            if (!_super.prototype.AddingToCollection.call(this, value, error))
                return false;
            return this._AssertNoCycles(value, value.XamlNode.ParentNode, error);
        };
        ResourceDictionaryCollection.prototype._AssertNoCycles = function (subtreeRoot, firstAncestorNode, error) {
            var curNode = firstAncestorNode;
            while (curNode) {
                var rd = curNode.XObject;
                if (rd instanceof ResourceDictionary) {
                    var cycleFound = false;
                    if (rd === subtreeRoot)
                        cycleFound = true;
else if (rd.Source && Uri.Equals(rd.Source, subtreeRoot.Source))
                        cycleFound = true;
                    if (cycleFound) {
                        error.Message = "Cycle found in resource dictionaries.";
                        error.Number = BError.InvalidOperation;
                        return false;
                    }
                }
                curNode = curNode.ParentNode;
            }
            var enumerator = subtreeRoot.MergedDictionaries.GetEnumerator();
            while (enumerator.MoveNext()) {
                if (!this._AssertNoCycles(enumerator.Current, firstAncestorNode, error))
                    return false;
            }
            return true;
        };
        return ResourceDictionaryCollection;
    })(Fayde.XamlObjectCollection);
    Fayde.ResourceDictionaryCollection = ResourceDictionaryCollection;
    Fayde.RegisterType(ResourceDictionaryCollection, {
        Name: "ResourceDictionaryCollection",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    var ResourceDictionary = (function (_super) {
        __extends(ResourceDictionary, _super);
        function ResourceDictionary() {
            _super.apply(this, arguments);
            this._Keys = [];
            this._Values = [];
            this._IsSourceLoaded = false;
        }
        Object.defineProperty(ResourceDictionary.prototype, "MergedDictionaries", {
            get: function () {
                var md = this._MergedDictionaries;
                if (!md) {
                    md = this._MergedDictionaries = new ResourceDictionaryCollection();
                    md.AttachTo(this);
                }
                return md;
            },
            enumerable: true,
            configurable: true
        });

        Object.defineProperty(ResourceDictionary.prototype, "Count", {
            get: function () {
                return this._Values.length;
            },
            enumerable: true,
            configurable: true
        });
        ResourceDictionary.prototype.AttachTo = function (xobj) {
            var error = new BError();
            if (!this.XamlNode.AttachTo(xobj.XamlNode, error))
                error.ThrowException();
        };
        ResourceDictionary.prototype.Contains = function (key) {
            return this._Keys.indexOf(key) > -1;
        };
        ResourceDictionary.prototype.Get = function (key) {
            var index = this._Keys.indexOf(key);
            if (index > -1)
                return this._Values[index];
            return this.MergedDictionaries.Get(key);
        };
        ResourceDictionary.prototype.Set = function (key, value) {
            if (key === undefined)
                return false;
            if (value === undefined)
                return this.Remove(key);
            var index = this._Keys.indexOf(key);
            var error = new BError();
            if (value instanceof Fayde.XamlObject && !(value).XamlNode.AttachTo(this.XamlNode, error)) {
                if (error.Message)
                    throw new Exception(error.Message);
                return false;
            }
            if (index < 0) {
                this._Keys.push(key);
                this._Values.push(value);
            } else {
                var oldValue = this._Values[index];
                this._Keys[index] = key;
                this._Values[index] = value;
                if (oldValue instanceof Fayde.XamlObject)
                    (oldValue).XamlNode.Detach();
            }
            return true;
        };
        ResourceDictionary.prototype.Remove = function (key) {
            var index = this._Keys.indexOf(key);
            if (index < 0)
                return false;
            this._Keys.splice(index, 1);
            var oldvalue = this._Values.splice(index, 1)[0];
            if (oldvalue instanceof Fayde.XamlObject)
                (oldvalue).XamlNode.Detach();
        };
        ResourceDictionary.prototype.GetEnumerator = function (reverse) {
            return Fayde.ArrayEx.GetEnumerator(this._Values, reverse);
        };
        ResourceDictionary.prototype.GetNodeEnumerator = function (reverse) {
            return Fayde.ArrayEx.GetNodeEnumerator(this._Values, reverse);
        };
        return ResourceDictionary;
    })(Fayde.XamlObject);
    Fayde.ResourceDictionary = ResourceDictionary;
    Fayde.RegisterType(ResourceDictionary, {
        Name: "ResourceDictionary",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS,
        Interfaces: [Fayde.IEnumerable_]
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var RoutedEvent = (function (_super) {
        __extends(RoutedEvent, _super);
        function RoutedEvent() {
            _super.apply(this, arguments);
        }
        return RoutedEvent;
    })(MulticastEvent);
    Fayde.RoutedEvent = RoutedEvent;
    Fayde.RegisterType(RoutedEvent, {
        Name: "RoutedEvent",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var RoutedEventArgs = (function (_super) {
        __extends(RoutedEventArgs, _super);
        function RoutedEventArgs() {
            _super.apply(this, arguments);
            this.Handled = false;
            this.Source = null;
            this.OriginalSource = null;
        }
        return RoutedEventArgs;
    })(EventArgs);
    Fayde.RoutedEventArgs = RoutedEventArgs;
    Fayde.RegisterType(RoutedEventArgs, {
        Name: "RoutedEventArgs",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var RoutedPropertyChangedEvent = (function (_super) {
        __extends(RoutedPropertyChangedEvent, _super);
        function RoutedPropertyChangedEvent() {
            _super.apply(this, arguments);
        }
        return RoutedPropertyChangedEvent;
    })(Fayde.RoutedEvent);
    Fayde.RoutedPropertyChangedEvent = RoutedPropertyChangedEvent;
    Fayde.RegisterType(RoutedPropertyChangedEvent, {
        Name: "RoutedPropertyChangedEvent",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    var RoutedPropertyChangedEventArgs = (function (_super) {
        __extends(RoutedPropertyChangedEventArgs, _super);
        function RoutedPropertyChangedEventArgs(oldValue, newValue) {
            _super.call(this);
            Object.defineProperty(this, "OldValue", { value: oldValue, writable: false });
            Object.defineProperty(this, "NewValue", { value: newValue, writable: false });
        }
        return RoutedPropertyChangedEventArgs;
    })(Fayde.RoutedEventArgs);
    Fayde.RoutedPropertyChangedEventArgs = RoutedPropertyChangedEventArgs;
    Fayde.RegisterType(RoutedPropertyChangedEventArgs, {
        Name: "RoutedPropertyChangedEventArgs",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var SetterCollection = (function (_super) {
        __extends(SetterCollection, _super);
        function SetterCollection() {
            _super.apply(this, arguments);
            this._IsSealed = false;
        }
        SetterCollection.prototype._Seal = function (targetType) {
            if (this._IsSealed)
                return;
            var enumerator = this.GetEnumerator();
            while (enumerator.MoveNext()) {
                (enumerator.Current)._Seal(targetType);
            }
            this._IsSealed = true;
        };
        SetterCollection.prototype.AddingToCollection = function (value, error) {
            if (!value || !this._ValidateSetter(value, error))
                return false;
            return _super.prototype.AddingToCollection.call(this, value, error);
        };
        SetterCollection.prototype._ValidateSetter = function (setter, error) {
            if (setter.Property === undefined) {
                error.Message = "Cannot have a null PropertyProperty value";
                return false;
            }
            if (setter.Value === undefined) {
                if (!setter._HasDeferredValueExpression(Setter.ValueProperty)) {
                    error.Message = "Cannot have a null ValueProperty value";
                    return false;
                }
            }
            if (this._IsSealed) {
                error.Message = "Cannot add a setter to a sealed style";
                return false;
            }
            return true;
        };
        return SetterCollection;
    })(Fayde.XamlObjectCollection);
    Fayde.SetterCollection = SetterCollection;
    Fayde.RegisterType(SetterCollection, {
        Name: "SetterCollection",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    var Setter = (function (_super) {
        __extends(Setter, _super);
        function Setter() {
            _super.apply(this, arguments);
            this._IsSealed = false;
        }
        Setter.prototype._Seal = function (targetType) {
            var propd = this.Property;
            var val = this.Value;
            var propTargetType = propd.GetTargetType();
            try  {
                this.ConvertedValue = Fayde.ConvertAnyToType(val, propTargetType);
            } catch (err) {
                throw new XamlParseException(err.message);
            }
            this._IsSealed = true;
        };
        Setter.PropertyProperty = DependencyProperty.Register("Property", function () {
            return DependencyProperty;
        }, Setter);
        Setter.ValueProperty = DependencyProperty.Register("Value", function () {
            return Object;
        }, Setter);
        return Setter;
    })(Fayde.DependencyObject);
    Fayde.Setter = Setter;
    Fayde.RegisterType(Setter, {
        Name: "Setter",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var SizeChangedEventArgs = (function (_super) {
        __extends(SizeChangedEventArgs, _super);
        function SizeChangedEventArgs(previousSize, newSize) {
            _super.call(this);
            Object.defineProperty(this, "PreviousSize", { value: size.copyTo(previousSize), writable: false });
            Object.defineProperty(this, "NewSize", { value: size.copyTo(newSize), writable: false });
        }
        return SizeChangedEventArgs;
    })(Fayde.RoutedEventArgs);
    Fayde.SizeChangedEventArgs = SizeChangedEventArgs;
    Fayde.RegisterType(SizeChangedEventArgs, {
        Name: "SizeChangedEventArgs",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var Style = (function (_super) {
        __extends(Style, _super);
        function Style() {
            _super.call(this);
            this._IsSealed = false;
            var coll = Style.SettersProperty.Initialize(this);
            coll.AttachTo(this);
        }
        Style.prototype.Seal = function () {
            if (this._IsSealed)
                return;
            this.Setters._Seal(this.TargetType);
            this._IsSealed = true;
            var base = this.BasedOn;
            if (base)
                base.Seal();
        };
        Style.prototype.Validate = function (instance, error) {
            var parentType = (instance).constructor;
            if (this._IsSealed) {
                if (!(instance instanceof this.TargetType)) {
                    error.Number = BError.XamlParse;
                    error.Message = "Style.TargetType (" + (this.TargetType)._TypeName + ") is not a subclass of (" + (parentType)._TypeName + ")";
                    return false;
                }
                return true;
            }
            var cycles = [];
            var root = this;
            while (root) {
                if (cycles.indexOf(root) > -1) {
                    error.Number = BError.InvalidOperation;
                    error.Message = "Circular reference in Style.BasedOn";
                    return false;
                }
                cycles.push(root);
                root = root.BasedOn;
            }
            cycles = null;
            root = this;
            var targetType;
            while (root) {
                targetType = root.TargetType;
                if (root === this) {
                    if (!targetType) {
                        error.Number = BError.InvalidOperation;
                        error.Message = "TargetType cannot be null";
                        return false;
                    } else if (!Nullstone.DoesInheritFrom(parentType, targetType)) {
                        error.Number = BError.XamlParse;
                        error.Message = "Style.TargetType (" + (targetType)._TypeName + ") is not a subclass of (" + (parentType)._TypeName + ")";
                        return false;
                    }
                } else if (!targetType || !Nullstone.DoesInheritFrom(parentType, targetType)) {
                    error.Number = BError.InvalidOperation;
                    error.Message = "Style.TargetType (" + (targetType ? (targetType)._TypeName : "<Not Specified>") + ") is not a subclass of (" + (parentType)._TypeName + ")";
                    return false;
                }
                parentType = targetType;
                root = root.BasedOn;
            }
            this.Seal();
            return true;
        };
        Style.SettersProperty = DependencyProperty.RegisterImmutable("Setters", function () {
            return Fayde.SetterCollection;
        }, Style);
        Style.BasedOnProperty = DependencyProperty.Register("BasedOn", function () {
            return Style;
        }, Style);
        Style.TargetTypeProperty = DependencyProperty.Register("TargetType", function () {
            return Function;
        }, Style);

        Style.Annotations = { ContentProperty: Style.SettersProperty };
        return Style;
    })(Fayde.DependencyObject);
    Fayde.Style = Style;
    Fayde.RegisterType(Style, {
        Name: "Style",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var TriggerAction = (function (_super) {
        __extends(TriggerAction, _super);
        function TriggerAction() {
            _super.apply(this, arguments);
        }
        TriggerAction.prototype.Fire = function () {
        };
        return TriggerAction;
    })(Fayde.DependencyObject);
    Fayde.TriggerAction = TriggerAction;
    Fayde.RegisterType(TriggerAction, {
        Name: "TriggerAction",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    var TriggerActionCollection = (function (_super) {
        __extends(TriggerActionCollection, _super);
        function TriggerActionCollection() {
            _super.apply(this, arguments);
        }
        return TriggerActionCollection;
    })(Fayde.XamlObjectCollection);
    Fayde.TriggerActionCollection = TriggerActionCollection;
    Fayde.RegisterType(TriggerActionCollection, {
        Name: "TriggerActionCollection",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    var TriggerBase = (function (_super) {
        __extends(TriggerBase, _super);
        function TriggerBase() {
            _super.apply(this, arguments);
        }
        TriggerBase.prototype.Attach = function (target) {
        };
        TriggerBase.prototype.Detach = function (target) {
        };
        return TriggerBase;
    })(Fayde.DependencyObject);
    Fayde.TriggerBase = TriggerBase;
    Fayde.RegisterType(TriggerBase, {
        Name: "TriggerBase",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    var EventTrigger = (function (_super) {
        __extends(EventTrigger, _super);
        function EventTrigger() {
            _super.apply(this, arguments);
            this._IsAttached = false;
        }
        EventTrigger.prototype.Attach = function (target) {
            if (this._IsAttached)
                return;
            var evt = this._ParseEventName(target);
            if (evt) {
                this._IsAttached = true;
                evt.Subscribe(this._FireActions, this);
                return;
            }
            Warn("Could not attach to RoutedEvent: " + this.RoutedEvent);
        };
        EventTrigger.prototype.Detach = function (target) {
            var evt = this._ParseEventName(target);
            if (evt)
                evt.Unsubscribe(this._FireActions, this);
            this._IsAttached = false;
        };
        EventTrigger.prototype._FireActions = function (sender, e) {
            var actions = this.Actions;
            if (!actions)
                return;
            var enumerator = actions.GetEnumerator();
            while (enumerator.MoveNext()) {
                (enumerator.Current);
            }
        };
        EventTrigger.prototype._ParseEventName = function (target) {
            var routedEventName = this.RoutedEvent;
            var tokens = routedEventName.split(".");
            if (tokens.length === 1)
                routedEventName = tokens[0];
else if (tokens.length === 2)
                routedEventName = tokens[1];
else
                return undefined;
            var evt = target[routedEventName];
            if (evt instanceof Fayde.RoutedEvent)
                return evt;
            return undefined;
        };
        EventTrigger.ActionsProperty = DependencyProperty.Register("Actions", function () {
            return TriggerActionCollection;
        }, EventTrigger);
        EventTrigger.RoutedEventProperty = DependencyProperty.Register("RoutedEvent", function () {
            return String;
        }, EventTrigger);

        EventTrigger.Annotations = { ContentProperty: EventTrigger.ActionsProperty };
        return EventTrigger;
    })(TriggerBase);
    Fayde.EventTrigger = EventTrigger;
    Fayde.RegisterType(EventTrigger, {
        Name: "EventTrigger",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    var TriggerCollection = (function (_super) {
        __extends(TriggerCollection, _super);
        function TriggerCollection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(TriggerCollection.prototype, "ParentXamlObject", {
            get: function () {
                var parentNode = this.XamlNode.ParentNode;
                if (!parentNode)
                    return undefined;
                return parentNode.XObject;
            },
            enumerable: true,
            configurable: true
        });
        TriggerCollection.prototype.AddingToCollection = function (value, error) {
            if (!_super.prototype.AddingToCollection.call(this, value, error))
                return false;
            var parent = this.ParentXamlObject;
            if (parent)
                value.Attach(parent);
            return true;
        };
        TriggerCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
            _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
            var parent = this.ParentXamlObject;
            if (parent)
                value.Detach(parent);
        };
        TriggerCollection.prototype.AttachTarget = function (target) {
            var enumerator = this.GetEnumerator();
            while (enumerator.MoveNext()) {
                (enumerator.Current).Attach(target);
            }
        };
        TriggerCollection.prototype.DetachTarget = function (target) {
            var enumerator = this.GetEnumerator();
            while (enumerator.MoveNext()) {
                (enumerator.Current).Detach(target);
            }
        };
        return TriggerCollection;
    })(Fayde.XamlObjectCollection);
    Fayde.TriggerCollection = TriggerCollection;
    Fayde.RegisterType(TriggerCollection, {
        Name: "TriggerCollection",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Data) {
        var BindingExpression = (function (_super) {
            __extends(BindingExpression, _super);
            function BindingExpression(binding, target, propd) {
                _super.call(this, binding, target, propd);
            }
            return BindingExpression;
        })(Data.BindingExpressionBase);
        Data.BindingExpression = BindingExpression;
        Fayde.RegisterType(BindingExpression, {
            Name: "BindingExpression",
            Namespace: "Fayde.Data"
        });
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Data) {
        var CollectionViewSource = (function (_super) {
            __extends(CollectionViewSource, _super);
            function CollectionViewSource() {
                _super.apply(this, arguments);
            }
            CollectionViewSource.SourceProperty = DependencyProperty.Register("Source", function () {
                return Object;
            }, CollectionViewSource);
            CollectionViewSource.ViewProperty = DependencyProperty.Register("View", function () {
                return Data.ICollectionView_;
            }, CollectionViewSource);
            return CollectionViewSource;
        })(Fayde.DependencyObject);
        Data.CollectionViewSource = CollectionViewSource;
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Documents) {
        var TextElementNode = (function (_super) {
            __extends(TextElementNode, _super);
            function TextElementNode(xobj, inheritedWalkProperty) {
                _super.call(this, xobj);
                this.InheritedWalkProperty = inheritedWalkProperty;
            }
            TextElementNode.prototype.GetInheritedEnumerator = function () {
                if (!this.InheritedWalkProperty)
                    return Fayde.ArrayEx.EmptyEnumerator;
                var coll = this.XObject[this.InheritedWalkProperty];
                if (coll)
                    return coll.GetNodeEnumerator();
            };
            return TextElementNode;
        })(Fayde.DONode);
        Documents.TextElementNode = TextElementNode;
        Fayde.RegisterType(TextElementNode, {
            Name: "TextElementNode",
            Namespace: "Fayde.Documents"
        });
        var TextElement = (function (_super) {
            __extends(TextElement, _super);
            function TextElement() {
                _super.call(this);
                this._Font = new Font();
                this._UpdateFont(true);
            }
            TextElement.prototype.CreateNode = function () {
                return new TextElementNode(this, null);
            };

            TextElement.prototype.IsInheritable = function (propd) {
                return TextElementInheritedProps.indexOf(propd) > -1;
            };

            TextElement.prototype._SerializeText = function () {
                return undefined;
            };
            TextElement.prototype._UpdateFont = function (force) {
                var f = this._Font;
                f.Family = this.FontFamily;
                f.Stretch = this.FontStretch;
                f.Style = this.FontStyle;
                f.Weight = this.FontWeight;
                f.Size = this.FontSize;
                return f.IsChanged || force;
            };
            Object.defineProperty(TextElement.prototype, "Background", {
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextElement.prototype, "SelectionBackground", {
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextElement.prototype, "SelectionForeground", {
                get: function () {
                    return this.Foreground;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextElement.prototype, "Font", {
                get: function () {
                    return this._Font;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextElement.prototype, "Direction", {
                get: function () {
                    return Fayde.FlowDirection.LeftToRight;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextElement.prototype, "IsUnderlined", {
                get: function () {
                    return (this.TextDecorations & Fayde.TextDecorations.Underline) > 0;
                },
                enumerable: true,
                configurable: true
            });

            TextElement.prototype.Equals = function (te) {
                if (this.FontFamily !== te.FontFamily)
                    return false;
                if (this.FontSize !== te.FontSize)
                    return false;
                if (this.FontStyle !== te.FontStyle)
                    return false;
                if (this.FontWeight !== te.FontWeight)
                    return false;
                if (this.FontStretch !== te.FontStretch)
                    return false;
                if (this.TextDecorations !== te.TextDecorations)
                    return false;
                if (!Nullstone.Equals(this.Foreground, te.Foreground))
                    return false;
                return true;
            };
            TextElement.prototype.FontChanged = function (args) {
                this._UpdateFont(false);
            };
            TextElement.FontFamilyProperty = Fayde.InheritableOwner.FontFamilyProperty.ExtendTo(TextElement);
            TextElement.FontSizeProperty = Fayde.InheritableOwner.FontSizeProperty.ExtendTo(TextElement);
            TextElement.FontStretchProperty = Fayde.InheritableOwner.FontStretchProperty.ExtendTo(TextElement);
            TextElement.FontStyleProperty = Fayde.InheritableOwner.FontStyleProperty.ExtendTo(TextElement);
            TextElement.FontWeightProperty = Fayde.InheritableOwner.FontWeightProperty.ExtendTo(TextElement);
            TextElement.ForegroundProperty = Fayde.InheritableOwner.ForegroundProperty.ExtendTo(TextElement);
            TextElement.TextDecorationsProperty = Fayde.InheritableOwner.TextDecorationsProperty.ExtendTo(TextElement);
            TextElement.LanguageProperty = Fayde.InheritableOwner.LanguageProperty.ExtendTo(TextElement);
            return TextElement;
        })(Fayde.DependencyObject);
        Documents.TextElement = TextElement;
        Fayde.RegisterType(TextElement, {
            Name: "TextElement",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
        var TextElementInheritedProps = [
            TextElement.FontFamilyProperty,
            TextElement.FontSizeProperty,
            TextElement.FontStretchProperty,
            TextElement.FontStyleProperty,
            TextElement.FontWeightProperty,
            TextElement.ForegroundProperty,
            TextElement.TextDecorationsProperty,
            TextElement.LanguageProperty
        ];
    })(Fayde.Documents || (Fayde.Documents = {}));
    var Documents = Fayde.Documents;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var Application = (function (_super) {
        __extends(Application, _super);
        function Application() {
            _super.call(this);
            this.Loaded = new MulticastEvent();
            this.Address = null;
            this._IsRunning = false;
            this._Storyboards = [];
            this._ClockTimer = new Fayde.ClockTimer();
            this.XamlNode.NameScope = new Fayde.NameScope(true);
            var rd = Application.ResourcesProperty.Initialize(this);
            this.MainSurface = new Fayde.Surface(this);
            this.DebugInterop = new Fayde.DebugInterop(this);
            this.Address = new Uri(document.URL);
            Application.SourcesProperty.Initialize(this);
        }
        Object.defineProperty(Application.prototype, "RootVisual", {
            get: function () {
                return this.MainSurface._RootLayer;
            },
            enumerable: true,
            configurable: true
        });
        Application.prototype.Start = function () {
            this._ClockTimer.RegisterTimer(this);
            this.Loaded.RaiseAsync(this, EventArgs.Empty);
        };
        Application.prototype.OnTicked = function (lastTime, nowTime) {
            this.DebugInterop.NumFrames++;
            this.ProcessStoryboards(lastTime, nowTime);
            this.Update();
            this.Render();
        };
        Application.prototype.StopEngine = function () {
            this._ClockTimer.UnregisterTimer(this);
        };
        Application.prototype.ProcessStoryboards = function (lastTime, nowTime) {
            var sbs = this._Storyboards;
            var len = sbs.length;
            for (var i = 0; i < len; i++) {
                sbs[i].Update(nowTime);
            }
        };
        Application.prototype.Update = function () {
            if (this._IsRunning)
                return;
            this._IsRunning = true;
            var updated = this.MainSurface.ProcessDirtyElements();
            this._IsRunning = false;
        };
        Application.prototype.Render = function () {
            this.MainSurface.Render();
        };
        Application.prototype.RegisterStoryboard = function (storyboard) {
            var sbs = this._Storyboards;
            var index = sbs.indexOf(storyboard);
            if (index === -1)
                sbs.push(storyboard);
        };
        Application.prototype.UnregisterStoryboard = function (storyboard) {
            var sbs = this._Storyboards;
            var index = sbs.indexOf(storyboard);
            if (index !== -1)
                sbs.splice(index, 1);
        };
        Application.prototype.GetImplicitStyle = function (type) {
            var theme = this.Theme;
            if (!theme)
                return undefined;
            var rd = theme.Resources;
            if (!rd)
                return undefined;
            return rd.Get(type);
        };
        Application.prototype.__DebugLayers = function () {
            return this.MainSurface.__DebugLayers();
        };
        Application.prototype.__GetById = function (id) {
            return this.MainSurface.__GetById(id);
        };
        Application.Version = "0.9.6.0";

        Application.ResourcesProperty = DependencyProperty.RegisterImmutable("Resources", function () {
            return Fayde.ResourceDictionary;
        }, Application);

        Application.SourcesProperty = DependencyProperty.RegisterImmutable("Sources", function () {
            return Fayde.XamlObjectCollection;
        }, Application);
        return Application;
    })(Fayde.DependencyObject);
    Fayde.Application = Application;
    Fayde.RegisterType(Application, {
        Name: "Application",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    var isReady = false;
    function doOnReady(onReady) {
        if (document.addEventListener) {
            document.addEventListener("DOMContentLoaded", function () {
                (document).removeEventListener("DOMContentLoaded", arguments.callee, false);
                onReady();
            }, false);
        } else if (document.attachEvent) {
            document.attachEvent("onreadystatechange", function () {
                if (document.readyState === "complete") {
                    (document).detachEvent("onreadystatechange", arguments.callee);
                    onReady();
                }
            });
        }
        window.onload = onReady;
    }
    doOnReady(function () {
        if (isReady)
            return;
        isReady = true;
        var url = document.body.getAttribute("faydeapp");
        if (!url)
            return;
        var canvas = document.getElementsByTagName("canvas")[0];
        if (!canvas)
            document.body.appendChild(canvas = document.createElement("canvas"));
        var request = new Fayde.AjaxRequest(function (result) {
            Fayde.Xaml.LoadApplication(result.GetData(), canvas);
        }, function (error) {
            alert("An error occurred retrieving the application.");
            console.log("An error occurred retrieving the application. " + error);
        });
        request.Get(url);
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var DebugInterop = (function () {
        function DebugInterop(app) {
            this.NumFrames = 0;
            this.App = app;
            this.Surface = app.MainSurface;
            this.RegisterHitTestDebugService();
        }
        DebugInterop.prototype.LayoutUpdated = function () {
            this._Cache = null;
        };
        Object.defineProperty(DebugInterop.prototype, "IsCacheInvalidated", {
            get: function () {
                return this._Cache == null;
            },
            enumerable: true,
            configurable: true
        });
        DebugInterop.prototype.InvalidateCache = function () {
            this._Cache = null;
            this._DPCache = null;
        };
        DebugInterop.prototype.GetCache = function () {
            if (!this._Cache)
                this.GenerateCache();
            return JSON.stringify(this._Cache, DebugInterop._StringifyReplacer);
        };
        DebugInterop.prototype.GenerateCache = function () {
            this._Cache = {
                Node: null,
                Visual: null,
                Children: [],
                ID: 0,
                Name: "",
                TypeName: "Surface"
            };
            var surface = this.Surface;
            var layers = (surface)._Layers;
            var layerCount = layers.length;
            var children;
            for (var i = 0; i < layerCount; i++) {
                var cur = layers[i];
                var item = this.CreateDebugInteropCacheItem(cur);
                this._Cache.Children.push(item);
                this.PopulateCacheChildren(item);
            }
        };
        DebugInterop.prototype.PopulateCacheChildren = function (item) {
            var arr = [];
            var enumerator = item.Node.GetVisualTreeEnumerator();
            var cur;
            var children;
            while (enumerator.MoveNext()) {
                cur = enumerator.Current;
                var childItem = this.CreateDebugInteropCacheItem(cur);
                item.Children.push(childItem);
                this.PopulateCacheChildren(childItem);
            }
            return arr;
        };
        DebugInterop.prototype.CreateDebugInteropCacheItem = function (node) {
            var uie = node.XObject;
            return {
                Node: node,
                Visual: uie,
                Children: [],
                ID: (uie)._ID,
                TypeName: (uie).constructor._TypeName,
                Name: uie.Name
            };
        };
        DebugInterop.prototype.GetDPCache = function () {
            if (!this._DPCache)
                this.GenerateDPCache();
            return JSON.stringify(this._DPCache, DebugInterop._StringifyReplacer);
        };
        DebugInterop.prototype.GenerateDPCache = function () {
            var dpCache = [];
            var reg = (DependencyProperty)._IDs;
            for (var id in reg) {
                dpCache.push(reg[id]);
            }
            this._DPCache = dpCache;
        };
        DebugInterop.prototype.GetStorages = function (id) {
            var c = this.GetById(id);
            var uie = c.Visual;
            var storage = (uie)._PropertyStorage;
            var value;
            var arr = [];
            for (var key in storage) {
                value = storage[key];
                if (value == null)
                    continue;
                arr.push(value);
            }
            var arr2 = arr.map(function (s) {
                return {
                    PropertyID: s.Property._ID,
                    Precedence: s.Precedence,
                    Local: s.Local,
                    LocalStyleValue: s.LocalStyleValue,
                    ImplicitStyleValue: s.ImplicitStyleValue,
                    InheritedValue: (s).InheritedValue
                };
            });
            return JSON.stringify(arr2, DebugInterop._StringifyReplacer);
        };
        DebugInterop.prototype.GetLayoutMetrics = function (id) {
            var c = this.GetById(id);
            var uie = c.Visual;
            var lu = uie.XamlNode.LayoutUpdater;
            var metrics = {
                ActualHeight: lu.ActualHeight,
                ActualWidth: lu.ActualWidth,
                LayoutSlot: lu.LayoutSlot,
                VisualOffset: lu.VisualOffset,
                LayoutClip: lu.LayoutClip,
                HiddenDesire: lu.HiddenDesire,
                DesiredSize: lu.DesiredSize,
                RenderSize: lu.RenderSize,
                AbsoluteXform: Array.prototype.slice.call(lu.AbsoluteXform),
                LayoutXform: Array.prototype.slice.call(lu.LayoutXform),
                LocalXform: Array.prototype.slice.call(lu.LocalXform),
                RenderXform: Array.prototype.slice.call(lu.RenderXform),
                TotalOpacity: lu.TotalOpacity,
                TotalIsRenderVisible: lu.TotalIsRenderVisible,
                TotalIsHitTestVisible: lu.TotalIsHitTestVisible,
                TotalRenderProjection: lu.TotalRenderProjection
            };
            return JSON.stringify(metrics);
        };
        DebugInterop.prototype.GetById = function (id, cur) {
            var children = cur ? cur.Children : this._Cache.Children;
            var len = children.length;
            var found;
            var child;
            for (var i = 0; i < len; i++) {
                child = children[i];
                if ((child.Visual)._ID === id)
                    return child;
                found = this.GetById(id, child);
                if (found)
                    return found;
            }
            return undefined;
        };
        DebugInterop.prototype.GetResetPerfInfo = function () {
            var numFrames = this.NumFrames;
            this.NumFrames = 0;
            var oldFrameTime = this.LastFrameTime || new Date();
            this.LastFrameTime = new Date();
            var diff = this.LastFrameTime.getTime() - oldFrameTime.getTime();
            return numFrames.toString() + ";" + diff.toString();
        };
        DebugInterop.prototype.RegisterHitTestDebugService = function () {
            var _this = this;
            this.Surface.HitTestCallback = function (inputList) {
                return _this._CachedHitTest = inputList;
            };
        };
        DebugInterop.prototype.GetVisualIDsInHitTest = function () {
            if (!this._CachedHitTest)
                return "[]";
            var mapped = this._CachedHitTest.map(function (uin) {
                return (uin.XObject)._ID;
            });
            return JSON.stringify(mapped);
        };
        DebugInterop._StringifyReplacer = function (key, value) {
            if (value instanceof Fayde.Media.SolidColorBrush) {
                var color = (value).Color;
                return {
                    Color: color.toString()
                };
            }
            if (value instanceof Fayde.XamlNode || value instanceof Fayde.XamlObject)
                return undefined;
            if (value instanceof DependencyProperty) {
                var propd = value;
                var ownerType = propd.OwnerType;
                var targetType = propd.GetTargetType();
                var targetTypeName;
                if (targetType instanceof Enum) {
                    targetType = (targetType).Object;
                    targetTypeName = "Enum";
                } else {
                    targetTypeName = targetType ? targetType._TypeName : null;
                }
                return {
                    ID: propd._ID,
                    Name: propd.Name,
                    OwnerTypeName: ownerType ? ownerType._TypeName : null,
                    TargetTypeName: targetTypeName,
                    IsReadOnly: propd.IsReadOnly === true,
                    IsAttached: propd.IsAttached === true
                };
            }
            return value;
        };
        return DebugInterop;
    })();
    Fayde.DebugInterop = DebugInterop;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Input) {
        var KeyboardNavigation = (function () {
            function KeyboardNavigation() {
            }
            KeyboardNavigation.GetAcceptsReturn = function (d) {
                return d.GetValue(KeyboardNavigation.AcceptsReturnProperty);
            };
            KeyboardNavigation.SetAcceptsReturn = function (d, value) {
                d.SetValue(KeyboardNavigation.AcceptsReturnProperty, value);
            };

            KeyboardNavigation.GetControlTabNavigation = function (d) {
                return d.GetValue(KeyboardNavigation.ControlTabNavigationProperty);
            };
            KeyboardNavigation.SetControlTabNavigation = function (d, value) {
                d.SetValue(KeyboardNavigation.ControlTabNavigationProperty, value);
            };

            KeyboardNavigation.GetDirectionalNavigation = function (d) {
                return d.GetValue(KeyboardNavigation.DirectionalNavigationProperty);
            };
            KeyboardNavigation.SetDirectionalNavigation = function (d, value) {
                d.SetValue(KeyboardNavigation.DirectionalNavigationProperty, value);
            };

            KeyboardNavigation.GetIsTabStop = function (d) {
                return d.GetValue(KeyboardNavigation.IsTabStopProperty);
            };
            KeyboardNavigation.SetIsTabStop = function (d, value) {
                d.SetValue(KeyboardNavigation.IsTabStopProperty, value);
            };

            KeyboardNavigation.GetTabIndex = function (d) {
                return d.GetValue(KeyboardNavigation.TabIndexProperty);
            };
            KeyboardNavigation.SetTabIndex = function (d, value) {
                d.SetValue(KeyboardNavigation.TabIndexProperty, value);
            };

            KeyboardNavigation.GetTabNavigation = function (d) {
                return d.GetValue(KeyboardNavigation.TabNavigationProperty);
            };
            KeyboardNavigation.SetTabNavigation = function (d, value) {
                d.SetValue(KeyboardNavigation.TabNavigationProperty, value);
            };
            KeyboardNavigation.AcceptsReturnProperty = DependencyProperty.RegisterAttached("AcceptsReturn", function () {
                return Boolean;
            }, KeyboardNavigation);

            KeyboardNavigation.ControlTabNavigationProperty = DependencyProperty.RegisterAttached("ControlTabNavigation", function () {
                return new Enum(Input.KeyboardNavigationMode);
            }, KeyboardNavigation);

            KeyboardNavigation.DirectionalNavigationProperty = DependencyProperty.RegisterAttached("DirectionalNavigation", function () {
                return new Enum(Input.KeyboardNavigationMode);
            }, KeyboardNavigation);

            KeyboardNavigation.IsTabStopProperty = DependencyProperty.RegisterAttached("IsTabStop", function () {
                return Boolean;
            }, KeyboardNavigation);

            KeyboardNavigation.TabIndexProperty = DependencyProperty.RegisterAttached("TabIndex", function () {
                return Number;
            }, KeyboardNavigation);

            KeyboardNavigation.TabNavigationProperty = DependencyProperty.RegisterAttached("TabNavigation", function () {
                return new Enum(Input.KeyboardNavigationMode);
            }, KeyboardNavigation);
            return KeyboardNavigation;
        })();
        Input.KeyboardNavigation = KeyboardNavigation;
        Fayde.RegisterType(KeyboardNavigation, {
            Name: "KeyboardNavigation",
            Namespace: "Fayde.Input",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Input || (Fayde.Input = {}));
    var Input = Fayde.Input;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Input) {
        (function (Key) {
            Key[Key["None"] = 0] = "None";
            Key[Key["Back"] = 1] = "Back";
            Key[Key["Tab"] = 2] = "Tab";
            Key[Key["Enter"] = 3] = "Enter";
            Key[Key["Shift"] = 4] = "Shift";
            Key[Key["Ctrl"] = 5] = "Ctrl";
            Key[Key["Alt"] = 6] = "Alt";
            Key[Key["CapsLock"] = 7] = "CapsLock";
            Key[Key["Escape"] = 8] = "Escape";
            Key[Key["Space"] = 9] = "Space";
            Key[Key["PageUp"] = 10] = "PageUp";
            Key[Key["PageDown"] = 11] = "PageDown";
            Key[Key["End"] = 12] = "End";
            Key[Key["Home"] = 13] = "Home";
            Key[Key["Left"] = 14] = "Left";
            Key[Key["Up"] = 15] = "Up";
            Key[Key["Right"] = 16] = "Right";
            Key[Key["Down"] = 17] = "Down";
            Key[Key["Insert"] = 18] = "Insert";
            Key[Key["Delete"] = 19] = "Delete";
            Key[Key["D0"] = 20] = "D0";
            Key[Key["D1"] = 21] = "D1";
            Key[Key["D2"] = 22] = "D2";
            Key[Key["D3"] = 23] = "D3";
            Key[Key["D4"] = 24] = "D4";
            Key[Key["D5"] = 25] = "D5";
            Key[Key["D6"] = 26] = "D6";
            Key[Key["D7"] = 27] = "D7";
            Key[Key["D8"] = 28] = "D8";
            Key[Key["D9"] = 29] = "D9";
            Key[Key["A"] = 30] = "A";
            Key[Key["B"] = 31] = "B";
            Key[Key["C"] = 32] = "C";
            Key[Key["D"] = 33] = "D";
            Key[Key["E"] = 34] = "E";
            Key[Key["F"] = 35] = "F";
            Key[Key["G"] = 36] = "G";
            Key[Key["H"] = 37] = "H";
            Key[Key["I"] = 38] = "I";
            Key[Key["J"] = 39] = "J";
            Key[Key["K"] = 40] = "K";
            Key[Key["L"] = 41] = "L";
            Key[Key["M"] = 42] = "M";
            Key[Key["N"] = 43] = "N";
            Key[Key["O"] = 44] = "O";
            Key[Key["P"] = 45] = "P";
            Key[Key["Q"] = 46] = "Q";
            Key[Key["R"] = 47] = "R";
            Key[Key["S"] = 48] = "S";
            Key[Key["T"] = 49] = "T";
            Key[Key["U"] = 50] = "U";
            Key[Key["V"] = 51] = "V";
            Key[Key["W"] = 52] = "W";
            Key[Key["X"] = 53] = "X";
            Key[Key["Y"] = 54] = "Y";
            Key[Key["Z"] = 55] = "Z";
            Key[Key["F1"] = 56] = "F1";
            Key[Key["F2"] = 57] = "F2";
            Key[Key["F3"] = 58] = "F3";
            Key[Key["F4"] = 59] = "F4";
            Key[Key["F5"] = 60] = "F5";
            Key[Key["F6"] = 61] = "F6";
            Key[Key["F7"] = 62] = "F7";
            Key[Key["F8"] = 63] = "F8";
            Key[Key["F9"] = 64] = "F9";
            Key[Key["F10"] = 65] = "F10";
            Key[Key["F11"] = 66] = "F11";
            Key[Key["F12"] = 67] = "F12";
            Key[Key["NumPad0"] = 68] = "NumPad0";
            Key[Key["NumPad1"] = 69] = "NumPad1";
            Key[Key["NumPad2"] = 70] = "NumPad2";
            Key[Key["NumPad3"] = 71] = "NumPad3";
            Key[Key["NumPad4"] = 72] = "NumPad4";
            Key[Key["NumPad5"] = 73] = "NumPad5";
            Key[Key["NumPad6"] = 74] = "NumPad6";
            Key[Key["NumPad7"] = 75] = "NumPad7";
            Key[Key["NumPad8"] = 76] = "NumPad8";
            Key[Key["NumPad9"] = 77] = "NumPad9";
            Key[Key["Multiply"] = 78] = "Multiply";
            Key[Key["Add"] = 79] = "Add";
            Key[Key["Subtract"] = 80] = "Subtract";
            Key[Key["Decimal"] = 81] = "Decimal";
            Key[Key["Divide"] = 82] = "Divide";
            Key[Key["Unknown"] = 255] = "Unknown";
        })(Input.Key || (Input.Key = {}));
        var Key = Input.Key;
        var KeyboardEventArgs = (function (_super) {
            __extends(KeyboardEventArgs, _super);
            function KeyboardEventArgs() {
                _super.apply(this, arguments);
            }
            return KeyboardEventArgs;
        })(Fayde.RoutedEventArgs);
        Input.KeyboardEventArgs = KeyboardEventArgs;
        Fayde.RegisterType(KeyboardEventArgs, {
            Name: "KeyboardEventArgs",
            Namespace: "Fayde.Input",
            XmlNamespace: Fayde.XMLNS
        });
        var KeyEventArgs = (function (_super) {
            __extends(KeyEventArgs, _super);
            function KeyEventArgs(modifiers, keyCode, key, c) {
                _super.call(this);
                this.Modifiers = modifiers;
                this.PlatformKeyCode = keyCode;
                this.Key = key;
                if (this.Key == null)
                    this.Key = Key.Unknown;
                this.Char = c;
            }
            return KeyEventArgs;
        })(KeyboardEventArgs);
        Input.KeyEventArgs = KeyEventArgs;
        Fayde.RegisterType(KeyEventArgs, {
            Name: "KeyEventArgs",
            Namespace: "Fayde.Input",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Input || (Fayde.Input = {}));
    var Input = Fayde.Input;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Input) {
        var keyFromKeyCode = [];
        keyFromKeyCode[8] = Input.Key.Back;
        keyFromKeyCode[9] = Input.Key.Tab;
        keyFromKeyCode[13] = Input.Key.Enter;
        keyFromKeyCode[16] = Input.Key.Shift;
        keyFromKeyCode[17] = Input.Key.Ctrl;
        keyFromKeyCode[18] = Input.Key.Alt;
        keyFromKeyCode[20] = Input.Key.CapsLock;
        keyFromKeyCode[27] = Input.Key.Escape;
        keyFromKeyCode[32] = Input.Key.Space;
        keyFromKeyCode[33] = Input.Key.PageUp;
        keyFromKeyCode[34] = Input.Key.PageDown;
        keyFromKeyCode[35] = Input.Key.End;
        keyFromKeyCode[36] = Input.Key.Home;
        keyFromKeyCode[37] = Input.Key.Left;
        keyFromKeyCode[38] = Input.Key.Up;
        keyFromKeyCode[39] = Input.Key.Right;
        keyFromKeyCode[40] = Input.Key.Down;
        keyFromKeyCode[45] = Input.Key.Insert;
        keyFromKeyCode[46] = Input.Key.Delete;
        keyFromKeyCode[48] = Input.Key.D0;
        keyFromKeyCode[49] = Input.Key.D1;
        keyFromKeyCode[50] = Input.Key.D2;
        keyFromKeyCode[51] = Input.Key.D3;
        keyFromKeyCode[52] = Input.Key.D4;
        keyFromKeyCode[53] = Input.Key.D5;
        keyFromKeyCode[54] = Input.Key.D6;
        keyFromKeyCode[55] = Input.Key.D7;
        keyFromKeyCode[56] = Input.Key.D8;
        keyFromKeyCode[57] = Input.Key.D9;
        keyFromKeyCode[65] = Input.Key.A;
        keyFromKeyCode[66] = Input.Key.B;
        keyFromKeyCode[67] = Input.Key.C;
        keyFromKeyCode[68] = Input.Key.D;
        keyFromKeyCode[69] = Input.Key.E;
        keyFromKeyCode[70] = Input.Key.F;
        keyFromKeyCode[71] = Input.Key.G;
        keyFromKeyCode[72] = Input.Key.H;
        keyFromKeyCode[73] = Input.Key.I;
        keyFromKeyCode[74] = Input.Key.J;
        keyFromKeyCode[75] = Input.Key.K;
        keyFromKeyCode[76] = Input.Key.L;
        keyFromKeyCode[77] = Input.Key.M;
        keyFromKeyCode[78] = Input.Key.N;
        keyFromKeyCode[79] = Input.Key.O;
        keyFromKeyCode[80] = Input.Key.P;
        keyFromKeyCode[81] = Input.Key.Q;
        keyFromKeyCode[82] = Input.Key.R;
        keyFromKeyCode[83] = Input.Key.S;
        keyFromKeyCode[84] = Input.Key.T;
        keyFromKeyCode[85] = Input.Key.U;
        keyFromKeyCode[86] = Input.Key.V;
        keyFromKeyCode[87] = Input.Key.W;
        keyFromKeyCode[88] = Input.Key.X;
        keyFromKeyCode[89] = Input.Key.Y;
        keyFromKeyCode[90] = Input.Key.Z;
        keyFromKeyCode[96] = Input.Key.NumPad0;
        keyFromKeyCode[97] = Input.Key.NumPad1;
        keyFromKeyCode[98] = Input.Key.NumPad2;
        keyFromKeyCode[99] = Input.Key.NumPad3;
        keyFromKeyCode[100] = Input.Key.NumPad4;
        keyFromKeyCode[101] = Input.Key.NumPad5;
        keyFromKeyCode[102] = Input.Key.NumPad6;
        keyFromKeyCode[103] = Input.Key.NumPad7;
        keyFromKeyCode[104] = Input.Key.NumPad8;
        keyFromKeyCode[105] = Input.Key.NumPad9;
        keyFromKeyCode[106] = Input.Key.Multiply;
        keyFromKeyCode[107] = Input.Key.Add;
        keyFromKeyCode[109] = Input.Key.Subtract;
        keyFromKeyCode[110] = Input.Key.Decimal;
        keyFromKeyCode[111] = Input.Key.Divide;
        keyFromKeyCode[112] = Input.Key.F1;
        keyFromKeyCode[113] = Input.Key.F2;
        keyFromKeyCode[114] = Input.Key.F3;
        keyFromKeyCode[115] = Input.Key.F4;
        keyFromKeyCode[116] = Input.Key.F5;
        keyFromKeyCode[117] = Input.Key.F6;
        keyFromKeyCode[118] = Input.Key.F7;
        keyFromKeyCode[119] = Input.Key.F8;
        keyFromKeyCode[120] = Input.Key.F9;
        keyFromKeyCode[121] = Input.Key.F10;
        keyFromKeyCode[122] = Input.Key.F11;
        keyFromKeyCode[123] = Input.Key.F12;
        var KeyInterop = (function () {
            function KeyInterop(Surface) {
                this.Surface = Surface;
            }
            KeyInterop.prototype.RegisterEvents = function () {
                var _this = this;
                document.onkeypress = function (e) {
                    var args = _this.CreateArgsPress(e);
                    if (args) {
                        _this.Surface._HandleKeyDown(args);
                        if (args.Handled) {
                            e.preventDefault();
                            return false;
                        }
                    }
                };
                document.onkeydown = function (e) {
                    var args = _this.CreateArgsDown(e);
                    if (args) {
                        _this.Surface._HandleKeyDown(args);
                        if (args.Handled) {
                            e.preventDefault();
                            return false;
                        }
                    }
                };
            };
            KeyInterop.prototype.CreateArgsPress = function (e) {
                return undefined;
            };
            KeyInterop.prototype.CreateArgsDown = function (e) {
                return undefined;
            };
            KeyInterop.CreateInterop = function (surface) {
                if (navigator.appName === "Microsoft Internet Explorer")
                    return new IEKeyInterop(surface);
else if (navigator.appName === "Netscape")
                    return new NetscapeKeyInterop(surface);
                return new KeyInterop(surface);
            };
            return KeyInterop;
        })();
        Input.KeyInterop = KeyInterop;
        Fayde.RegisterType(KeyInterop, {
            Name: "KeyInterop",
            Namespace: "Fayde.Input",
            XmlNamespace: Fayde.XMLNS
        });
        var udkie = [];
        udkie[41] = 48;
        udkie[33] = 49;
        udkie[64] = 50;
        udkie[35] = 51;
        udkie[36] = 52;
        udkie[37] = 53;
        udkie[94] = 54;
        udkie[38] = 55;
        udkie[42] = 56;
        udkie[34] = Input.Key.Unknown;
        var IEKeyInterop = (function (_super) {
            __extends(IEKeyInterop, _super);
            function IEKeyInterop(surface) {
                _super.call(this, surface);
            }
            IEKeyInterop.prototype.CreateArgsPress = function (e) {
                if (!e["char"])
                    return;
                var modifiers = {
                    Shift: e.shiftKey,
                    Ctrl: e.ctrlKey,
                    Alt: e.altKey
                };
                var keyCode = e.keyCode;
                var unshifted = udkie[keyCode];
                if (unshifted)
                    keyCode = unshifted;
                var args = new Fayde.Input.KeyEventArgs(modifiers, keyCode, keyFromKeyCode[keyCode], e["char"]);
                if (args.Key === Input.Key.Unknown && e.key) {
                    args.Char = e.key;
                    var code = args.Char.toUpperCase().charCodeAt(0);
                    args.Key = keyFromKeyCode[code];
                    if (args.Key == null)
                        args.Key = Input.Key.Unknown;
                }
                return args;
            };
            IEKeyInterop.prototype.CreateArgsDown = function (e) {
                if (e["char"] && e.keyCode !== 8)
                    return;
                var modifiers = {
                    Shift: e.shiftKey,
                    Ctrl: e.ctrlKey,
                    Alt: e.altKey
                };
                return new Fayde.Input.KeyEventArgs(modifiers, e.keyCode, keyFromKeyCode[e.keyCode]);
            };
            return IEKeyInterop;
        })(KeyInterop);
        Input.IEKeyInterop = IEKeyInterop;
        Fayde.RegisterType(IEKeyInterop, {
            Name: "IEKeyInterop",
            Namespace: "Fayde.Input",
            XmlNamespace: Fayde.XMLNS
        });
        var sknet = [];
        sknet[8] = Input.Key.Back;
        sknet[9] = Input.Key.Tab;
        sknet[20] = Input.Key.CapsLock;
        sknet[27] = Input.Key.Escape;
        sknet[33] = Input.Key.PageUp;
        sknet[34] = Input.Key.PageDown;
        sknet[35] = Input.Key.End;
        sknet[36] = Input.Key.Home;
        sknet[37] = Input.Key.Left;
        sknet[38] = Input.Key.Up;
        sknet[39] = Input.Key.Right;
        sknet[40] = Input.Key.Down;
        sknet[45] = Input.Key.Insert;
        sknet[46] = Input.Key.Delete;
        var udknet = [];
        udknet[41] = 48;
        udknet[33] = 49;
        udknet[64] = 50;
        udknet[35] = 51;
        udknet[36] = 52;
        udknet[37] = 53;
        udknet[94] = 54;
        udknet[38] = 55;
        udknet[42] = 56;
        udknet[34] = Input.Key.Unknown;
        var NetscapeKeyInterop = (function (_super) {
            __extends(NetscapeKeyInterop, _super);
            function NetscapeKeyInterop(surface) {
                _super.call(this, surface);
            }
            NetscapeKeyInterop.prototype.CreateArgsPress = function (e) {
                var modifiers = {
                    Shift: e.shiftKey,
                    Ctrl: e.ctrlKey,
                    Alt: e.altKey
                };
                var keyCode = e.keyCode;
                var unshifted = udknet[keyCode];
                if (unshifted)
                    keyCode = unshifted;
                return new Fayde.Input.KeyEventArgs(modifiers, keyCode, keyFromKeyCode[keyCode], String.fromCharCode(e.which || e.keyCode));
            };
            NetscapeKeyInterop.prototype.CreateArgsDown = function (e) {
                if (sknet[e.keyCode] === undefined)
                    return null;
                var modifiers = {
                    Shift: e.shiftKey,
                    Ctrl: e.ctrlKey,
                    Alt: e.altKey
                };
                return new Fayde.Input.KeyEventArgs(modifiers, e.keyCode, keyFromKeyCode[e.keyCode]);
            };
            return NetscapeKeyInterop;
        })(KeyInterop);
        Input.NetscapeKeyInterop = NetscapeKeyInterop;
        Fayde.RegisterType(NetscapeKeyInterop, {
            Name: "NetscapeKeyInterop",
            Namespace: "Fayde.Input",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Input || (Fayde.Input = {}));
    var Input = Fayde.Input;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Input) {
        var MouseEventArgs = (function (_super) {
            __extends(MouseEventArgs, _super);
            function MouseEventArgs(absolutePos) {
                _super.call(this);
                Object.defineProperty(this, "AbsolutePos", { value: absolutePos, writable: false });
            }
            MouseEventArgs.prototype.GetPosition = function (relativeTo) {
                var p = this.AbsolutePos.Clone();
                if (!relativeTo)
                    return p;
                if (!(relativeTo instanceof Fayde.UIElement))
                    throw new ArgumentException("Specified relative object must be a UIElement.");
                relativeTo.XamlNode.LayoutUpdater.TransformPoint(p);
                return p;
            };
            return MouseEventArgs;
        })(Fayde.RoutedEventArgs);
        Input.MouseEventArgs = MouseEventArgs;
        Fayde.RegisterType(MouseEventArgs, {
            Name: "MouseEventArgs",
            Namespace: "Fayde.Input",
            XmlNamespace: Fayde.XMLNS
        });
        var MouseButtonEventArgs = (function (_super) {
            __extends(MouseButtonEventArgs, _super);
            function MouseButtonEventArgs(absolutePos) {
                _super.call(this, absolutePos);
            }
            return MouseButtonEventArgs;
        })(MouseEventArgs);
        Input.MouseButtonEventArgs = MouseButtonEventArgs;
        Fayde.RegisterType(MouseButtonEventArgs, {
            Name: "MouseButtonEventArgs",
            Namespace: "Fayde.Input",
            XmlNamespace: Fayde.XMLNS
        });
        var MouseWheelEventArgs = (function (_super) {
            __extends(MouseWheelEventArgs, _super);
            function MouseWheelEventArgs(absolutePos, delta) {
                _super.call(this, absolutePos);
                Object.defineProperty(this, "Delta", { value: delta, writable: false });
            }
            return MouseWheelEventArgs;
        })(MouseEventArgs);
        Input.MouseWheelEventArgs = MouseWheelEventArgs;
        Fayde.RegisterType(MouseWheelEventArgs, {
            Name: "MouseWheelEventArgs",
            Namespace: "Fayde.Input",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Input || (Fayde.Input = {}));
    var Input = Fayde.Input;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var GeneralTransform = (function (_super) {
            __extends(GeneralTransform, _super);
            function GeneralTransform() {
                _super.apply(this, arguments);
            }
            GeneralTransform.prototype.Transform = function (p) {
                return p;
            };
            GeneralTransform.prototype.TransformBounds = function (r) {
                return r;
            };
            GeneralTransform.prototype.TryTransform = function (inPoint, outPoint) {
                return false;
            };
            return GeneralTransform;
        })(Fayde.DependencyObject);
        Media.GeneralTransform = GeneralTransform;
        Fayde.RegisterType(GeneralTransform, {
            Name: "GeneralTransform",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var InternalTransform = (function (_super) {
            __extends(InternalTransform, _super);
            function InternalTransform(raw) {
                _super.call(this);
                this._Raw = raw;
            }
            Object.defineProperty(InternalTransform.prototype, "Inverse", {
                get: function () {
                    return new InternalTransform(mat4.inverse(this._Raw, mat4.create()));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(InternalTransform.prototype, "Value", {
                get: function () {
                    return Media.Matrix3D.FromRaw(this._Raw);
                },
                enumerable: true,
                configurable: true
            });
            InternalTransform.prototype.Transform = function (p) {
                var pi = vec4.createFrom(p.X, p.Y, 0.0, 1.0);
                var po = vec4.create();
                mat4.transformVec4(this._Raw, pi, po);
                if (po[3] !== 0.0) {
                    var w = 1.0 / po[3];
                    return new Point(po[0] * w, p[1] * w);
                }
                return new Point(NaN, NaN);
            };
            InternalTransform.prototype.TransformBounds = function (r) {
                if (r)
                    return rect.transform4(rect.copyTo(r), this._Raw);
                return undefined;
            };
            InternalTransform.prototype.CreateMatrix3DProjection = function () {
                var projection = new Media.Matrix3DProjection();
                projection.ProjectionMatrix = this.Inverse.Value;
                return projection;
            };
            return InternalTransform;
        })(GeneralTransform);
        Media.InternalTransform = InternalTransform;
        Fayde.RegisterType(InternalTransform, {
            Name: "InternalTransform",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var Geometry = (function (_super) {
            __extends(Geometry, _super);
            function Geometry() {
                _super.call(this);
                this._Path = null;
                this._LocalBounds = new rect();
                this._Listener = null;
                this._LocalBounds.Width = Number.NEGATIVE_INFINITY;
                this._LocalBounds.Height = Number.NEGATIVE_INFINITY;
            }
            Geometry.prototype.GetBounds = function (thickness) {
                var compute = rect.isEmpty(this._LocalBounds);
                if (!this._Path) {
                    this._Path = this._Build();
                    compute = true;
                }
                if (compute)
                    rect.copyTo(this.ComputePathBounds(thickness), this._LocalBounds);
                var bounds = rect.copyTo(this._LocalBounds);
                var transform = this.Transform;
                if (transform != null)
                    bounds = transform.TransformBounds(bounds);
                return bounds;
            };
            Geometry.prototype.Draw = function (ctx) {
                if (!this._Path)
                    return;
                var transform = this.Transform;
                if (transform != null) {
                    ctx.Save();
                    ctx.Transform(transform);
                }
                this._Path.DrawRenderCtx(ctx);
                if (transform != null)
                    ctx.Restore();
            };
            Geometry.prototype.ComputePathBounds = function (thickness) {
                if (!this._Path)
                    this._Path = this._Build();
                if (!this._Path)
                    return new rect();
                return this._Path.CalculateBounds(thickness);
            };
            Geometry.prototype._InvalidateGeometry = function () {
                this._Path = null;
                rect.set(this._LocalBounds, 0, 0, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
                var listener = this._Listener;
                if (listener)
                    listener.GeometryChanged(this);
            };
            Geometry.prototype._Build = function () {
                return undefined;
            };
            Geometry.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            Geometry.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };

            Geometry.prototype._TransformChanged = function (args) {
                var _this = this;
                if (this._TransformListener) {
                    this._TransformListener.Detach();
                    this._TransformListener = null;
                }
                var newt = args.NewValue;
                if (newt)
                    this._TransformListener = newt.Listen(function (source) {
                        return _this._InvalidateGeometry();
                    });
                this._InvalidateGeometry();
            };
            Geometry.prototype.Serialize = function () {
                var path = this._Path;
                if (!path)
                    return;
                return path.Serialize();
            };
            Geometry.TransformProperty = DependencyProperty.Register("Transform", function () {
                return Media.Transform;
            }, Geometry, undefined, function (d, args) {
                return (d)._TransformChanged(args);
            });
            return Geometry;
        })(Fayde.DependencyObject);
        Media.Geometry = Geometry;
        Fayde.RegisterType(Geometry, {
            Name: "Geometry",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var GeometryCollection = (function (_super) {
            __extends(GeometryCollection, _super);
            function GeometryCollection() {
                _super.apply(this, arguments);
            }
            GeometryCollection.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            GeometryCollection.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            GeometryCollection.prototype.AddingToCollection = function (value, error) {
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                value.Listen(this);
                var listener = this._Listener;
                if (listener)
                    listener.GeometryChanged(value);
                return true;
            };
            GeometryCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                value.Unlisten(this);
                var listener = this._Listener;
                if (listener)
                    listener.GeometryChanged(value);
            };
            GeometryCollection.prototype.GeometryChanged = function (newGeometry) {
                var listener = this._Listener;
                if (listener)
                    listener.GeometryChanged(newGeometry);
            };
            return GeometryCollection;
        })(Fayde.XamlObjectCollection);
        Media.GeometryCollection = GeometryCollection;
        Fayde.RegisterType(GeometryCollection, {
            Name: "GeometryCollection",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var GeometryGroup = (function (_super) {
            __extends(GeometryGroup, _super);
            function GeometryGroup() {
                _super.call(this);
                var coll = GeometryGroup.ChildrenProperty.Initialize(this);
                coll.AttachTo(this);
                coll.Listen(this);
            }
            GeometryGroup.prototype.ComputePathBounds = function (thickness) {
                var bounds = new rect();
                var enumerator = this.Children.GetEnumerator();
                while (enumerator.MoveNext()) {
                    rect.unionLogical(bounds, (enumerator.Current).GetBounds(thickness));
                }
                return bounds;
            };
            GeometryGroup.prototype.Draw = function (ctx) {
                var transform = this.Transform;
                if (transform != null) {
                    ctx.Save();
                    ctx.Transform(transform);
                }
                var enumerator = this.Children.GetEnumerator();
                while (enumerator.MoveNext()) {
                    (enumerator.Current).Draw(ctx);
                }
                if (transform != null)
                    ctx.Restore();
            };
            GeometryGroup.prototype.GeometryChanged = function (newGeometry) {
                this._InvalidateGeometry();
            };
            GeometryGroup.FillRulleProperty = DependencyProperty.Register("FillRule", function () {
                return new Enum(Fayde.Shapes.FillRule);
            }, GeometryGroup, Fayde.Shapes.FillRule.EvenOdd);
            GeometryGroup.ChildrenProperty = DependencyProperty.RegisterImmutable("Children", function () {
                return Media.GeometryCollection;
            }, GeometryGroup);
            return GeometryGroup;
        })(Media.Geometry);
        Media.GeometryGroup = GeometryGroup;
        Fayde.RegisterType(GeometryGroup, {
            Name: "GeometryGroup",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var GradientStop = (function (_super) {
            __extends(GradientStop, _super);
            function GradientStop() {
                _super.apply(this, arguments);
            }
            GradientStop.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            GradientStop.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            GradientStop.prototype._GradientStopChanged = function () {
                var listener = this._Listener;
                if (listener)
                    listener.GradientStopChanged(this);
            };
            GradientStop.prototype.toString = function () {
                return this.Color.toString() + " @ " + this.Offset.toString();
            };
            GradientStop.ColorProperty = DependencyProperty.Register("Color", function () {
                return Color;
            }, GradientStop, undefined, function (d, args) {
                return (d)._GradientStopChanged();
            });
            GradientStop.OffsetProperty = DependencyProperty.Register("Offset", function () {
                return Number;
            }, GradientStop, 0.0, function (d, args) {
                return (d)._GradientStopChanged();
            });
            return GradientStop;
        })(Fayde.DependencyObject);
        Media.GradientStop = GradientStop;
        Fayde.RegisterType(GradientStop, {
            Name: "GradientStop",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });

        var GradientStopCollection = (function (_super) {
            __extends(GradientStopCollection, _super);
            function GradientStopCollection() {
                _super.apply(this, arguments);
            }
            GradientStopCollection.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            GradientStopCollection.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            GradientStopCollection.prototype.AddingToCollection = function (value, error) {
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                value.Listen(this);
                var listener = this._Listener;
                if (listener)
                    listener.GradientStopsChanged(this);
                return true;
            };
            GradientStopCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                if (!_super.prototype.RemovedFromCollection.call(this, value, isValueSafe))
                    return false;
                value.Unlisten(this);
                var listener = this._Listener;
                if (listener)
                    listener.GradientStopsChanged(this);
            };
            GradientStopCollection.prototype.GradientStopChanged = function (newGradientStop) {
                var listener = this._Listener;
                if (listener)
                    listener.GradientStopsChanged(this);
            };
            return GradientStopCollection;
        })(Fayde.XamlObjectCollection);
        Media.GradientStopCollection = GradientStopCollection;
        Fayde.RegisterType(GradientStopCollection, {
            Name: "GradientStopCollection",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var LineGeometry = (function (_super) {
            __extends(LineGeometry, _super);
            function LineGeometry() {
                _super.apply(this, arguments);
            }
            LineGeometry.prototype._Build = function () {
                var p1 = this.StartPoint;
                var p2 = this.EndPoint;
                var p = new Fayde.Shapes.RawPath();
                p.Move(p1.X, p1.Y);
                p.Line(p2.X, p2.Y);
                return p;
            };
            LineGeometry.StartPointProperty = DependencyProperty.Register("StartPoint", function () {
                return Point;
            }, LineGeometry, undefined, function (d, args) {
                return (d)._InvalidateGeometry();
            });
            LineGeometry.EndPointProperty = DependencyProperty.Register("EndPoint", function () {
                return Point;
            }, LineGeometry, undefined, function (d, args) {
                return (d)._InvalidateGeometry();
            });
            return LineGeometry;
        })(Media.Geometry);
        Media.LineGeometry = LineGeometry;
        Fayde.RegisterType(LineGeometry, {
            Name: "LineGeometry",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        function ParseGeometry(val) {
            return (new MediaParser(val)).ParseGeometryImpl();
        }
        Media.ParseGeometry = ParseGeometry;
        function ParseShapePoints(val) {
            return (new MediaParser(val)).ParseShapePoints();
        }
        Media.ParseShapePoints = ParseShapePoints;
        var MediaParser = (function () {
            function MediaParser(str) {
                this.index = 0;
                this.str = str;
                this.len = str.length;
            }
            MediaParser.prototype.ParseGeometryImpl = function () {
                var cp = new Point();
                var cp1, cp2, cp3;
                var start = new Point();
                var fillRule = Fayde.Shapes.FillRule.EvenOdd;
                var cbz = false;
                var qbz = false;
                var cbzp = new Point();
                var qbzp = new Point();
                var path = new Fayde.Shapes.RawPath();
                while (this.index < this.len) {
                    var c;
                    while (this.index < this.len && (c = this.str.charAt(this.index)) === ' ') {
                        this.index++;
                    }
                    this.index++;
                    var relative = false;
                    switch (c) {
                        case 'f':
                        case 'F':
                            c = this.str.charAt(this.index);
                            if (c === '0')
                                fillRule = Fayde.Shapes.FillRule.EvenOdd;
else if (c === '1')
                                fillRule = Fayde.Shapes.FillRule.NonZero;
else
                                return null;
                            this.index++;
                            c = this.str.charAt(this.index);
                            break;
                        case 'm':
                            relative = true;
                        case 'M':
                            cp1 = this.ParsePoint();
                            if (cp1 == null)
                                break;
                            if (relative) {
                                cp1.X += cp.X;
                                cp1.Y += cp.Y;
                            }
                            path.Move(cp1.X, cp1.Y);
                            start.X = cp.X = cp1.X;
                            start.Y = cp.Y = cp1.Y;
                            this.Advance();
                            while (this.MorePointsAvailable()) {
                                if ((cp1 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp1.X += cp.X;
                                    cp1.Y += cp.Y;
                                }
                                path.Line(cp1.X, cp1.Y);
                            }
                            cp.X = cp1.X;
                            cp.Y = cp1.Y;
                            cbz = qbz = false;
                            break;
                        case 'l':
                            relative = true;
                        case 'L':
                            while (this.MorePointsAvailable()) {
                                if ((cp1 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp1.X += cp.X;
                                    cp1.Y += cp.Y;
                                }
                                path.Line(cp1.X, cp1.Y);
                                cp.X = cp1.X;
                                cp.Y = cp1.Y;
                                this.Advance();
                            }
                            cbz = qbz = false;
                            break;
                        case 'h':
                            relative = true;
                        case 'H':
                            var x = this.ParseDouble();
                            if (x == null)
                                break;
                            if (relative)
                                x += cp.X;
                            cp = new Point(x, cp.Y);
                            path.Line(cp.X, cp.Y);
                            cbz = qbz = false;
                            break;
                        case 'v':
                            relative = true;
                        case 'V':
                            var y = this.ParseDouble();
                            if (y == null)
                                break;
                            if (relative)
                                y += cp.Y;
                            cp = new Point(cp.X, y);
                            path.Line(cp.X, cp.Y);
                            cbz = qbz = false;
                            break;
                        case 'c':
                            relative = true;
                        case 'C':
                            while (this.MorePointsAvailable()) {
                                if ((cp1 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp1.X += cp.X;
                                    cp1.Y += cp.Y;
                                }
                                this.Advance();
                                if ((cp2 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp2.X += cp.X;
                                    cp2.Y += cp.Y;
                                }
                                this.Advance();
                                if ((cp3 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp3.X += cp.X;
                                    cp3.Y += cp.Y;
                                }
                                this.Advance();
                                path.Bezier(cp1.X, cp1.Y, cp2.X, cp2.Y, cp3.X, cp3.Y);
                                cp1.X = cp3.X;
                                cp1.Y = cp3.Y;
                            }
                            cp.X = cp3.X;
                            cp.Y = cp3.Y;
                            cbz = true;
                            cbzp.X = cp2.X;
                            cbzp.Y = cp2.Y;
                            qbz = false;
                            break;
                        case 's':
                            relative = true;
                        case 'S':
                            while (this.MorePointsAvailable()) {
                                if ((cp2 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp2.X += cp.X;
                                    cp2.Y += cp.Y;
                                }
                                this.Advance();
                                if ((cp3 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp3.X += cp.X;
                                    cp3.Y += cp.Y;
                                }
                                if (cbz) {
                                    cp1.X = 2 * cp.X - cbzp.X;
                                    cp1.Y = 2 * cp.Y - cbzp.Y;
                                } else
                                    cp1 = cp;
                                path.Bezier(cp1.X, cp1.Y, cp2.X, cp2.Y, cp3.X, cp3.Y);
                                cbz = true;
                                cbzp.X = cp2.X;
                                cbzp.Y = cp2.Y;
                                cp.X = cp3.X;
                                cp.Y = cp3.Y;
                                this.Advance();
                            }
                            qbz = false;
                            break;
                        case 'q':
                            relative = true;
                        case 'Q':
                            while (this.MorePointsAvailable()) {
                                if ((cp1 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp1.X += cp.X;
                                    cp1.Y += cp.Y;
                                }
                                this.Advance();
                                if ((cp2 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp2.X += cp.X;
                                    cp2.Y += cp.Y;
                                }
                                this.Advance();
                                path.Quadratic(cp1.X, cp1.Y, cp2.X, cp2.Y);
                                cp.X = cp2.X;
                                cp.Y = cp2.Y;
                            }
                            qbz = true;
                            qbzp.X = cp1.X;
                            qbzp.Y = cp1.Y;
                            cbz = false;
                            break;
                        case 't':
                            relative = true;
                        case 'T':
                            while (this.MorePointsAvailable()) {
                                if ((cp2 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp2.X += cp.X;
                                    cp2.Y += cp.Y;
                                }
                                if (qbz) {
                                    cp1.X = 2 * cp.X - qbzp.X;
                                    cp1.Y = 2 * cp.Y - qbzp.Y;
                                } else
                                    cp1 = cp;
                                path.Quadratic(cp1.X, cp1.Y, cp2.X, cp2.Y);
                                qbz = true;
                                qbzp.X = cp1.X;
                                qbzp.Y = cp1.Y;
                                cp.X = cp2.X;
                                cp.Y = cp2.Y;
                                this.Advance();
                            }
                            cbz = false;
                            break;
                        case 'a':
                            relative = true;
                        case 'A':
                            while (this.MorePointsAvailable()) {
                                if ((cp1 = this.ParsePoint()) == null)
                                    break;
                                var angle = this.ParseDouble();
                                var is_large = this.ParseDouble() !== 0;
                                var sweep = Fayde.Shapes.SweepDirection.Counterclockwise;
                                if (this.ParseDouble() !== 0)
                                    sweep = Fayde.Shapes.SweepDirection.Clockwise;
                                if ((cp2 = this.ParsePoint()) == null)
                                    break;
                                if (relative) {
                                    cp2.X += cp.X;
                                    cp2.Y += cp.Y;
                                }
                                path.EllipticalArc(cp1.X, cp1.Y, angle, is_large, sweep, cp2.X, cp2.Y);
                                cp.X = cp2.X;
                                cp.Y = cp2.Y;
                                this.Advance();
                            }
                            cbz = qbz = false;
                            break;
                        case 'z':
                        case 'Z':
                            path.Close();
                            cp.X = start.X;
                            cp.Y = start.Y;
                            cbz = qbz = false;
                            break;
                        default:
                            break;
                    }
                }
                var pg = new Media.PathGeometry();
                pg.OverridePath(path);
                pg.FillRule = fillRule;
                return pg;
            };
            MediaParser.prototype.ParseShapePoints = function () {
                var points = [];
                var p;
                while (this.MorePointsAvailable() && (p = this.ParsePoint()) != null) {
                    points.push(p);
                }
                return points;
            };
            MediaParser.prototype.ParsePoint = function () {
                var x = this.ParseDouble();
                if (x == null)
                    return null;
                var c;
                while (this.index < this.len && ((c = this.str.charAt(this.index)) === ' ' || c === ',')) {
                    this.index++;
                }
                if (this.index >= this.len)
                    return null;
                var y = this.ParseDouble();
                if (y == null)
                    return null;
                return new Point(x, y);
            };
            MediaParser.prototype.ParseDouble = function () {
                this.Advance();
                var isNegative = false;
                if (this.Match('-')) {
                    isNegative = true;
                    this.index++;
                } else if (this.Match('+')) {
                    this.index++;
                }
                if (this.Match('Infinity')) {
                    this.index += 8;
                    return isNegative ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
                }
                if (this.Match('NaN'))
                    return NaN;
                var temp = '';
                while (this.index < this.len) {
                    var code = this.str.charCodeAt(this.index);
                    var c = String.fromCharCode(code);
                    if (code >= 48 && code <= 57)
                        temp += c;
else if (code === 46)
                        temp += c;
else if (c === 'E' || c === 'e')
                        temp += c;
else
                        break;
                    this.index++;
                }
                if (temp.length === 0)
                    return null;
                var f = parseFloat(temp);
                return isNegative ? -f : f;
            };
            MediaParser.prototype.Match = function (matchStr) {
                var c1;
                var c2;
                for (var i = 0; i < matchStr.length && (this.index + i) < this.len; i++) {
                    c1 = matchStr.charAt(i);
                    c2 = this.str.charAt(this.index + i);
                    if (c1 !== c2)
                        return false;
                }
                return true;
            };
            MediaParser.prototype.Advance = function () {
                var code;
                var c;
                while (this.index < this.len) {
                    code = this.str.charCodeAt(this.index);
                    if ((code >= 65 && code <= 90) || (code >= 97 && code <= 122) || (code >= 48 && code <= 57))
                        break;
                    c = String.fromCharCode(code);
                    if (c === '.')
                        break;
                    if (c === '-')
                        break;
                    if (c === '+')
                        break;
                    this.index++;
                }
            };
            MediaParser.prototype.MorePointsAvailable = function () {
                var c;
                while (this.index < this.len && ((c = this.str.charAt(this.index)) === ',' || c === ' ')) {
                    this.index++;
                }
                if (this.index >= this.len)
                    return false;
                if (c === '.' || c === '-' || c === '+')
                    return true;
                var code = this.str.charCodeAt(this.index);
                return code >= 48 && code <= 57;
            };
            return MediaParser;
        })();
        Fayde.RegisterTypeConverter(Media.Geometry, ParseGeometry);
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var PathFigure = (function (_super) {
            __extends(PathFigure, _super);
            function PathFigure() {
                _super.call(this);
                this._Path = null;
                var coll = PathFigure.SegmentsProperty.Initialize(this);
                coll.AttachTo(this);
                coll.Listen(this);
            }
            PathFigure.prototype._Build = function () {
                var p = new Fayde.Shapes.RawPath();
                var start = this.StartPoint;
                p.Move(start.X, start.Y);
                var enumerator = this.Segments.GetEnumerator();
                while (enumerator.MoveNext()) {
                    (enumerator.Current)._Append(p);
                }
                if (this.IsClosed)
                    p.Close();
                return p;
            };
            PathFigure.prototype.PathSegmentChanged = function (newPathSegment) {
                this._Path = null;
                var listener = this._Listener;
                if (listener)
                    listener.PathFigureChanged(this);
            };
            PathFigure.prototype.InvalidatePathFigure = function () {
                this._Path = null;
                var listener = this._Listener;
                if (listener)
                    listener.PathFigureChanged(this);
            };
            PathFigure.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            PathFigure.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            PathFigure.prototype.MergeInto = function (rp) {
                if (!this._Path)
                    this._Path = this._Build();
                Fayde.Shapes.RawPath.Merge(rp, this._Path);
            };
            PathFigure.Annotations = { ContentProperty: PathFigure.SegmentsProperty };
            PathFigure.IsClosedProperty = DependencyProperty.RegisterCore("IsClosed", function () {
                return Boolean;
            }, PathFigure, false, function (d, args) {
                return (d).InvalidatePathFigure();
            });
            PathFigure.StartPointProperty = DependencyProperty.RegisterCore("StartPoint", function () {
                return Point;
            }, PathFigure, undefined, function (d, args) {
                return (d).InvalidatePathFigure();
            });
            PathFigure.IsFilledProperty = DependencyProperty.RegisterCore("IsFilled", function () {
                return Boolean;
            }, PathFigure, true, function (d, args) {
                return (d).InvalidatePathFigure();
            });
            PathFigure.SegmentsProperty = DependencyProperty.RegisterImmutable("Segments", function () {
                return Media.PathSegmentCollection;
            }, PathFigure);
            return PathFigure;
        })(Fayde.DependencyObject);
        Media.PathFigure = PathFigure;
        Fayde.RegisterType(PathFigure, {
            Name: "PathFigure",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var PathFigureCollection = (function (_super) {
            __extends(PathFigureCollection, _super);
            function PathFigureCollection() {
                _super.apply(this, arguments);
            }
            PathFigureCollection.prototype.AddingToCollection = function (value, error) {
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                value.Listen(this);
                var listener = this._Listener;
                if (listener)
                    listener.PathFigureChanged(value);
                return true;
            };
            PathFigureCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                value.Unlisten(this);
                var listener = this._Listener;
                if (listener)
                    listener.PathFigureChanged(value);
            };
            PathFigureCollection.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            PathFigureCollection.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            PathFigureCollection.prototype.PathFigureChanged = function (newPathFigure) {
                var listener = this._Listener;
                if (listener)
                    listener.PathFigureChanged(newPathFigure);
            };
            return PathFigureCollection;
        })(Fayde.XamlObjectCollection);
        Media.PathFigureCollection = PathFigureCollection;
        Fayde.RegisterType(PathFigureCollection, {
            Name: "PathFigureCollection",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var PathGeometry = (function (_super) {
            __extends(PathGeometry, _super);
            function PathGeometry() {
                _super.call(this);
                this._OverridePath = null;
                var coll = PathGeometry.FiguresProperty.Initialize(this);
                coll.AttachTo(this);
                coll.Listen(this);
            }
            PathGeometry.prototype.OverridePath = function (path) {
                this._OverridePath = path;
            };
            PathGeometry.prototype._Build = function () {
                if (this._OverridePath)
                    return this._OverridePath;
                var p = new Fayde.Shapes.RawPath();
                var figures = this.Figures;
                if (!figures)
                    return;
                var enumerator = figures.GetEnumerator();
                while (enumerator.MoveNext()) {
                    (enumerator.Current).MergeInto(p);
                }
                return p;
            };
            PathGeometry.prototype.PathFigureChanged = function (newPathFigure) {
                this._OverridePath = null;
                this._InvalidateGeometry();
            };
            PathGeometry.Annotations = { ContentProperty: PathGeometry.FiguresProperty };
            PathGeometry.FillRuleProperty = DependencyProperty.Register("FillRule", function () {
                return new Enum(Fayde.Shapes.FillRule);
            }, PathGeometry, Fayde.Shapes.FillRule.EvenOdd, function (d, args) {
                return (d)._InvalidateGeometry();
            });
            PathGeometry.FiguresProperty = DependencyProperty.RegisterImmutable("Figures", function () {
                return Media.PathFigureCollection;
            }, PathGeometry);
            return PathGeometry;
        })(Media.Geometry);
        Media.PathGeometry = PathGeometry;
        Fayde.RegisterType(PathGeometry, {
            Name: "PathGeometry",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var PathSegment = (function (_super) {
            __extends(PathSegment, _super);
            function PathSegment() {
                _super.apply(this, arguments);
            }
            PathSegment.prototype._Append = function (path) {
            };
            PathSegment.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            PathSegment.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            return PathSegment;
        })(Fayde.DependencyObject);
        Media.PathSegment = PathSegment;
        Fayde.RegisterType(PathSegment, {
            Name: "PathSegment",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var PathSegmentCollection = (function (_super) {
            __extends(PathSegmentCollection, _super);
            function PathSegmentCollection() {
                _super.apply(this, arguments);
            }
            PathSegmentCollection.prototype.AddingToCollection = function (value, error) {
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                value.Listen(this);
                var listener = this._Listener;
                if (listener)
                    listener.PathSegmentChanged(value);
                return true;
            };
            PathSegmentCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                value.Unlisten(this);
                var listener = this._Listener;
                if (listener)
                    listener.PathSegmentChanged(value);
            };
            PathSegmentCollection.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            PathSegmentCollection.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            PathSegmentCollection.prototype.PathSegmentChanged = function (newPathSegment) {
                var listener = this._Listener;
                if (listener)
                    listener.PathSegmentChanged(newPathSegment);
            };
            return PathSegmentCollection;
        })(Fayde.XamlObjectCollection);
        Media.PathSegmentCollection = PathSegmentCollection;
        Fayde.RegisterType(PathSegmentCollection, {
            Name: "PathSegmentCollection",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var ArcSegment = (function (_super) {
            __extends(ArcSegment, _super);
            function ArcSegment() {
                _super.apply(this, arguments);
            }
            ArcSegment.prototype._Append = function (path) {
                var size = this.Size;
                var width = size ? size.Width : 0.0;
                var height = size ? size.Height : 0.0;
                var endpt = this.Point;
                var ex = endpt ? endpt.X : 0.0;
                var ey = endpt ? endpt.Y : 0.0;
                path.EllipticalArc(width, height, this.RotationAngle, this.IsLargeArc, this.SweepDirection, ex, ey);
            };
            ArcSegment.IsLargeArcProperty = DependencyProperty.RegisterCore("IsLargeArc", function () {
                return Boolean;
            }, ArcSegment, false);
            ArcSegment.PointProperty = DependencyProperty.Register("Point", function () {
                return Point;
            }, ArcSegment);
            ArcSegment.RotationAngleProperty = DependencyProperty.Register("RotationAngle", function () {
                return Number;
            }, ArcSegment, 0.0);
            ArcSegment.SizeProperty = DependencyProperty.Register("Size", function () {
                return size;
            }, ArcSegment);
            ArcSegment.SweepDirectionProperty = DependencyProperty.Register("SweepDirection", function () {
                return new Enum(Fayde.Shapes.SweepDirection);
            }, ArcSegment, Fayde.Shapes.SweepDirection.Counterclockwise);
            return ArcSegment;
        })(Media.PathSegment);
        Media.ArcSegment = ArcSegment;
        Fayde.RegisterType(ArcSegment, {
            Name: "ArcSegment",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var BezierSegment = (function (_super) {
            __extends(BezierSegment, _super);
            function BezierSegment() {
                _super.apply(this, arguments);
            }
            BezierSegment.prototype._Append = function (path) {
                var p1 = this.Point1;
                var p2 = this.Point2;
                var p3 = this.Point3;
                var x1 = p1 ? p1.X : 0.0;
                var y1 = p1 ? p1.Y : 0.0;
                var x2 = p2 ? p2.X : 0.0;
                var y2 = p2 ? p2.Y : 0.0;
                var x3 = p3 ? p3.X : 0.0;
                var y3 = p3 ? p3.Y : 0.0;
                path.Bezier(x1, y1, x2, y2, x3, y3);
            };
            BezierSegment.Point1Property = DependencyProperty.Register("Point1", function () {
                return Point;
            }, BezierSegment);
            BezierSegment.Point2Property = DependencyProperty.Register("Point2", function () {
                return Point;
            }, BezierSegment);
            BezierSegment.Point3Property = DependencyProperty.Register("Point3", function () {
                return Point;
            }, BezierSegment);
            return BezierSegment;
        })(Media.PathSegment);
        Media.BezierSegment = BezierSegment;
        Fayde.RegisterType(BezierSegment, {
            Name: "BezierSegment",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var LineSegment = (function (_super) {
            __extends(LineSegment, _super);
            function LineSegment() {
                _super.apply(this, arguments);
            }
            LineSegment.prototype._Append = function (path) {
                var p = this.Point;
                var x = p ? p.X : 0.0;
                var y = p ? p.Y : 0.0;
                path.Line(x, y);
            };
            LineSegment.PointProperty = DependencyProperty.Register("Point", function () {
                return Point;
            }, LineSegment);
            return LineSegment;
        })(Media.PathSegment);
        Media.LineSegment = LineSegment;
        Fayde.RegisterType(LineSegment, {
            Name: "LineSegment",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var PolyBezierSegment = (function (_super) {
            __extends(PolyBezierSegment, _super);
            function PolyBezierSegment() {
                _super.call(this);
                PolyBezierSegment.PointsProperty.Initialize(this);
            }
            PolyBezierSegment.prototype._Append = function (path) {
                var points = this.Points;
                if (!points || (points.Count % 3) !== 0)
                    return;
                var p1;
                var p2;
                var p3;
                var enumerator = points.GetEnumerator();
                while (enumerator.MoveNext()) {
                    p1 = enumerator.Current;
                    enumerator.MoveNext();
                    p2 = enumerator.Current;
                    enumerator.MoveNext();
                    p3 = enumerator.Current;
                    path.Bezier(p1.X, p1.Y, p2.X, p2.Y, p3.X, p3.Y);
                }
            };
            PolyBezierSegment.PointsProperty = DependencyProperty.RegisterImmutable("Points", function () {
                return Fayde.Shapes.PointCollection;
            }, PolyBezierSegment);
            PolyBezierSegment.Annotations = { ContentProperty: PolyBezierSegment.PointsProperty };
            return PolyBezierSegment;
        })(Media.PathSegment);
        Media.PolyBezierSegment = PolyBezierSegment;
        Fayde.RegisterType(PolyBezierSegment, {
            Name: "PolyBezierSegment",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var PolyLineSegment = (function (_super) {
            __extends(PolyLineSegment, _super);
            function PolyLineSegment() {
                _super.call(this);
                PolyLineSegment.PointsProperty.Initialize(this);
            }
            PolyLineSegment.prototype._Append = function (path) {
                var p;
                var enumerator = this.Points.GetEnumerator();
                while (enumerator.MoveNext()) {
                    p = enumerator.Current;
                    path.Line(p.X, p.Y);
                }
                NotImplemented("PolyLineSegment._Append");
            };
            PolyLineSegment.PointsProperty = DependencyProperty.RegisterImmutable("Points", function () {
                return Fayde.Shapes.PointCollection;
            }, PolyLineSegment);
            PolyLineSegment.Annotations = { ContentProperty: PolyLineSegment.PointsProperty };
            return PolyLineSegment;
        })(Media.PathSegment);
        Media.PolyLineSegment = PolyLineSegment;
        Fayde.RegisterType(PolyLineSegment, {
            Name: "PolyLineSegment",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var PolyQuadraticBezierSegment = (function (_super) {
            __extends(PolyQuadraticBezierSegment, _super);
            function PolyQuadraticBezierSegment() {
                _super.call(this);
                PolyQuadraticBezierSegment.PointsProperty.Initialize(this);
            }
            PolyQuadraticBezierSegment.prototype._Append = function (path) {
                var points = this.Points;
                if (!points || (points.Count % 2) !== 0)
                    return;
                var x0 = path.EndX;
                var y0 = path.EndY;
                var x1;
                var y1;
                var x2;
                var y2;
                var x3;
                var y3;
                var enumerator = points.GetEnumerator();
                while (enumerator.MoveNext()) {
                    x1 = enumerator.Current.X;
                    y1 = enumerator.Current.Y;
                    enumerator.MoveNext();
                    x2 = enumerator.Current.X;
                    y2 = enumerator.Current.Y;
                    x3 = x2;
                    y3 = y2;
                    x2 = x1 + (x2 - x1) / 3;
                    y2 = y1 + (y2 - y1) / 3;
                    x1 = x0 + 2 * (x1 - x0) / 3;
                    y1 = y0 + 2 * (y1 - y0) / 3;
                    path.Bezier(x1, y1, x2, y2, x3, y3);
                    x0 = x3;
                    y0 = y3;
                }
            };
            PolyQuadraticBezierSegment.PointsProperty = DependencyProperty.RegisterImmutable("Points", function () {
                return Fayde.Shapes.PointCollection;
            }, PolyQuadraticBezierSegment);
            PolyQuadraticBezierSegment.Annotations = { ContentProperty: PolyQuadraticBezierSegment.PointsProperty };
            return PolyQuadraticBezierSegment;
        })(Media.PathSegment);
        Media.PolyQuadraticBezierSegment = PolyQuadraticBezierSegment;
        Fayde.RegisterType(PolyQuadraticBezierSegment, {
            Name: "PolyQuadraticBezierSegment",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var QuadraticBezierSegment = (function (_super) {
            __extends(QuadraticBezierSegment, _super);
            function QuadraticBezierSegment() {
                _super.apply(this, arguments);
            }
            QuadraticBezierSegment.prototype._Append = function (path) {
                var p1 = this.Point1;
                var p2 = this.Point2;
                var x1 = p1 ? p1.X : 0.0;
                var y1 = p1 ? p1.Y : 0.0;
                var x2 = p2 ? p2.X : 0.0;
                var y2 = p2 ? p2.Y : 0.0;
                path.Quadratic(x1, y1, x2, y2);
            };
            QuadraticBezierSegment.Point1Property = DependencyProperty.Register("Point1", function () {
                return Point;
            }, QuadraticBezierSegment);
            QuadraticBezierSegment.Point2Property = DependencyProperty.Register("Point2", function () {
                return Point;
            }, QuadraticBezierSegment);
            return QuadraticBezierSegment;
        })(Media.PathSegment);
        Media.QuadraticBezierSegment = QuadraticBezierSegment;
        Fayde.RegisterType(QuadraticBezierSegment, {
            Name: "QuadraticBezierSegment",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var Projection = (function (_super) {
            __extends(Projection, _super);
            function Projection() {
                _super.apply(this, arguments);
                this._ProjectionMatrix = null;
                this._ObjectWidth = 1.0;
                this._ObjectHeight = 1.0;
                this._Listeners = [];
            }
            Projection.prototype.SetObjectSize = function (size) {
                var w = Math.max(size.Width, 1.0);
                var h = Math.max(size.Height, 1.0);
                if (w !== this._ObjectWidth && h !== this._ObjectHeight) {
                    this._ObjectWidth = w;
                    this._ObjectHeight = h;
                    this._ProjectionMatrix = null;
                }
            };
            Projection.prototype.GetDistanceFromXYPlane = function () {
                return NaN;
            };
            Projection.prototype.GetTransform = function () {
                var m3 = this._ProjectionMatrix;
                if (!m3)
                    m3 = this._ProjectionMatrix = this.CreateProjectionMatrix();
                if (m3)
                    return mat4.clone(m3._Raw);
                return mat4.identity();
            };
            Projection.prototype.CreateProjectionMatrix = function () {
                return null;
            };

            Projection.prototype.Listen = function (func) {
                var listeners = this._Listeners;
                var listener = {
                    Callback: func,
                    Detach: function () {
                        var index = listeners.indexOf(listener);
                        if (index > -1)
                            listeners.splice(index, 1);
                    }
                };
                listeners.push(listener);
                return listener;
            };
            Projection.prototype._InvalidateProjection = function () {
                this._ProjectionMatrix = null;
                var listeners = this._Listeners;
                var len = listeners.length;
                for (var i = 0; i < len; i++) {
                    listeners[i].Callback(this);
                }
            };
            return Projection;
        })(Fayde.DependencyObject);
        Media.Projection = Projection;
        Fayde.RegisterType(Projection, {
            Name: "Projection",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var RectangleGeometry = (function (_super) {
            __extends(RectangleGeometry, _super);
            function RectangleGeometry() {
                _super.apply(this, arguments);
            }
            RectangleGeometry.prototype._Build = function () {
                var irect = this.Rect;
                if (!irect)
                    return;
                var radiusX = this.RadiusX;
                var radiusY = this.RadiusY;
                var p = new Fayde.Shapes.RawPath();
                p.RoundedRect(irect.X, irect.Y, irect.Width, irect.Height, radiusX, radiusY);
                return p;
            };
            RectangleGeometry.RectProperty = DependencyProperty.RegisterCore("Rect", function () {
                return rect;
            }, RectangleGeometry, undefined, function (d, args) {
                return (d)._InvalidateGeometry();
            });
            RectangleGeometry.RadiusXProperty = DependencyProperty.RegisterCore("RadiusX", function () {
                return Number;
            }, RectangleGeometry, 0, function (d, args) {
                return (d)._InvalidateGeometry();
            });
            RectangleGeometry.RadiusYProperty = DependencyProperty.RegisterCore("RadiusY", function () {
                return Number;
            }, RectangleGeometry, 0, function (d, args) {
                return (d)._InvalidateGeometry();
            });
            return RectangleGeometry;
        })(Media.Geometry);
        Media.RectangleGeometry = RectangleGeometry;
        Fayde.RegisterType(RectangleGeometry, {
            Name: "RectangleGeometry",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var TextOptions = (function () {
            function TextOptions() {
            }
            TextOptions.GetTextHintingMode = function (d) {
                return d.GetValue(TextOptions.TextHintingModeProperty);
            };
            TextOptions.SetTextHintingMode = function (d, value) {
                d.SetValue(TextOptions.TextHintingModeProperty, value);
            };
            TextOptions.TextHintingModeProperty = DependencyProperty.RegisterAttached("TextHintingMode", function () {
                return new Enum(Media.TextHintingMode);
            }, TextOptions);
            return TextOptions;
        })();
        Media.TextOptions = TextOptions;
        Fayde.RegisterType(TextOptions, {
            Name: "TextOptions",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var Transform = (function (_super) {
            __extends(Transform, _super);
            function Transform() {
                _super.call(this);
                this._Listeners = [];
                Fayde.XamlNode.SetShareable(this.XamlNode);
            }
            Object.defineProperty(Transform.prototype, "Value", {
                get: function () {
                    var val = this._Value;
                    if (!val) {
                        this._Value = val = new Media.Matrix();
                        val._Raw = this._BuildValue();
                    }
                    return val;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Transform.prototype, "Inverse", {
                get: function () {
                    var inverse = this.Value.Inverse;
                    if (!inverse)
                        return;
                    var mt = new MatrixTransform();
                    mt.Matrix = inverse;
                    return mt;
                },
                enumerable: true,
                configurable: true
            });
            Transform.prototype.Transform = function (p) {
                var val = this.Value;
                var v;
                if (!val || !(v = val._Raw))
                    return new Point(p.X, p.Y);
                v = mat3.transformVec2(v, vec2.createFrom(p.X, p.Y));
                return new Point(v[0], v[1]);
            };
            Transform.prototype.TransformBounds = function (r) {
                if (!r)
                    return undefined;
                var v = this.Value;
                if (!v || !v._Raw)
                    return rect.copyTo(r);
                return rect.transform(rect.copyTo(r), v._Raw);
            };
            Transform.prototype.TryTransform = function (inPoint, outPoint) {
                return false;
            };

            Transform.prototype.Listen = function (func) {
                var listeners = this._Listeners;
                var listener = {
                    Callback: func,
                    Detach: function () {
                        var index = listeners.indexOf(listener);
                        if (index > -1)
                            listeners.splice(index, 1);
                    }
                };
                listeners.push(listener);
                return listener;
            };
            Transform.prototype._InvalidateValue = function () {
                if (this._Value !== undefined)
                    this._Value = undefined;
                var listeners = this._Listeners;
                var len = listeners.length;
                for (var i = 0; i < len; i++) {
                    listeners[i].Callback(this);
                }
            };
            Transform.prototype._BuildValue = function () {
                return undefined;
            };
            return Transform;
        })(Media.GeneralTransform);
        Media.Transform = Transform;
        Fayde.RegisterType(Transform, {
            Name: "Transform",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var MatrixTransform = (function (_super) {
            __extends(MatrixTransform, _super);
            function MatrixTransform() {
                _super.apply(this, arguments);
                this._MatrixListener = null;
            }
            MatrixTransform.prototype._BuildValue = function () {
                var m = this.Matrix;
                if (m)
                    return m._Raw;
                return mat3.identity();
            };

            MatrixTransform.prototype._MatrixChanged = function (args) {
                var _this = this;
                if (this._MatrixListener) {
                    this._MatrixListener.Detach();
                    this._MatrixListener = null;
                }
                var newv = args.NewValue;
                if (newv)
                    this._MatrixListener = newv.Listen(function (newMatrix) {
                        return _this._InvalidateValue();
                    });
                this._InvalidateValue();
            };
            MatrixTransform.MatrixProperty = DependencyProperty.RegisterFull("Matrix", function () {
                return Media.Matrix;
            }, MatrixTransform, undefined, function (d, args) {
                return (d)._MatrixChanged(args);
            });
            return MatrixTransform;
        })(Transform);
        Media.MatrixTransform = MatrixTransform;
        Fayde.RegisterType(MatrixTransform, {
            Name: "MatrixTransform",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var RotateTransform = (function (_super) {
            __extends(RotateTransform, _super);
            function RotateTransform() {
                _super.apply(this, arguments);
            }
            RotateTransform.prototype._BuildValue = function () {
                var cx = this.CenterX;
                var cy = this.CenterY;
                var angleRad = Math.PI / 180 * this.Angle;
                var m = mat3.createRotate(angleRad);
                if (cx === 0 && cy === 0)
                    return m;
                mat3.multiply(mat3.createTranslate(-cx, -cy), m, m);
                mat3.translate(m, cx, cy);
                return m;
            };
            RotateTransform.AngleProperty = DependencyProperty.Register("Angle", function () {
                return Number;
            }, RotateTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            RotateTransform.CenterXProperty = DependencyProperty.Register("CenterX", function () {
                return Number;
            }, RotateTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            RotateTransform.CenterYProperty = DependencyProperty.Register("CenterY", function () {
                return Number;
            }, RotateTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            return RotateTransform;
        })(Media.Transform);
        Media.RotateTransform = RotateTransform;
        Fayde.RegisterType(RotateTransform, {
            Name: "RotateTransform",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var ScaleTransform = (function (_super) {
            __extends(ScaleTransform, _super);
            function ScaleTransform() {
                _super.apply(this, arguments);
            }
            ScaleTransform.prototype._BuildValue = function () {
                var cx = this.CenterX;
                var cy = this.CenterY;
                var m = mat3.createScale(this.ScaleX, this.ScaleY);
                if (cx === 0 && cy === 0)
                    return m;
                mat3.multiply(mat3.createTranslate(-cx, -cy), m, m);
                mat3.translate(m, cx, cy);
                return m;
            };
            ScaleTransform.CenterXProperty = DependencyProperty.Register("CenterX", function () {
                return Number;
            }, ScaleTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            ScaleTransform.CenterYProperty = DependencyProperty.Register("CenterY", function () {
                return Number;
            }, ScaleTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            ScaleTransform.ScaleXProperty = DependencyProperty.Register("ScaleX", function () {
                return Number;
            }, ScaleTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            ScaleTransform.ScaleYProperty = DependencyProperty.Register("ScaleY", function () {
                return Number;
            }, ScaleTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            return ScaleTransform;
        })(Media.Transform);
        Media.ScaleTransform = ScaleTransform;
        Fayde.RegisterType(ScaleTransform, {
            Name: "ScaleTransform",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var SkewTransform = (function (_super) {
            __extends(SkewTransform, _super);
            function SkewTransform() {
                _super.apply(this, arguments);
            }
            SkewTransform.prototype._BuildValue = function () {
                var cx = this.CenterX;
                var cy = this.CenterY;
                var angleXRad = Math.PI / 180 * this.AngleX;
                var angleYRad = Math.PI / 180 * this.AngleY;
                var m = mat3.createSkew(angleXRad, angleYRad);
                if (cx === 0 && cy === 0)
                    return m;
                mat3.multiply(mat3.createTranslate(-cx, -cy), m, m);
                mat3.translate(m, cx, cy);
                return m;
            };
            SkewTransform.AngleXProperty = DependencyProperty.Register("AngleX", function () {
                return Number;
            }, SkewTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            SkewTransform.AngleYProperty = DependencyProperty.Register("AngleY", function () {
                return Number;
            }, SkewTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            SkewTransform.CenterXProperty = DependencyProperty.Register("CenterX", function () {
                return Number;
            }, SkewTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            SkewTransform.CenterYProperty = DependencyProperty.Register("CenterY", function () {
                return Number;
            }, SkewTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            return SkewTransform;
        })(Media.Transform);
        Media.SkewTransform = SkewTransform;
        Fayde.RegisterType(SkewTransform, {
            Name: "SkewTransform",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var TranslateTransform = (function (_super) {
            __extends(TranslateTransform, _super);
            function TranslateTransform() {
                _super.apply(this, arguments);
            }
            TranslateTransform.prototype._BuildValue = function () {
                return mat3.createTranslate(this.X, this.Y);
            };
            TranslateTransform.XProperty = DependencyProperty.Register("X", function () {
                return Number;
            }, TranslateTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            TranslateTransform.YProperty = DependencyProperty.Register("Y", function () {
                return Number;
            }, TranslateTransform, 0, function (d, args) {
                return (d)._InvalidateValue();
            });
            return TranslateTransform;
        })(Media.Transform);
        Media.TranslateTransform = TranslateTransform;
        Fayde.RegisterType(TranslateTransform, {
            Name: "TranslateTransform",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });

        var TransformCollection = (function (_super) {
            __extends(TransformCollection, _super);
            function TransformCollection() {
                _super.apply(this, arguments);
                this._Relayer = function () {
                };
                this._ChildTransformListeners = [];
            }
            TransformCollection.prototype.AddingToCollection = function (value, error) {
                var _this = this;
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                var listener = value.Listen(function () {
                    return _this._Relayer();
                });
                listener.Child = value;
                this._ChildTransformListeners.push(listener);
                this._Relayer();
            };
            TransformCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                if (!_super.prototype.RemovedFromCollection.call(this, value, isValueSafe))
                    return false;
                var listeners = this._ChildTransformListeners;
                var len = listeners.length;
                for (var i = 0; i < len; i++) {
                    if (listeners[i].Child === value) {
                        listeners.splice(i, 1)[0].Detach();
                        break;
                    }
                }
                this._Relayer();
            };
            TransformCollection.prototype.RelayChanges = function (func) {
                this._Relayer = func;
            };
            return TransformCollection;
        })(Fayde.XamlObjectCollection);
        Media.TransformCollection = TransformCollection;
        Fayde.RegisterType(TransformCollection, {
            Name: "TransformCollection",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        var TransformGroup = (function (_super) {
            __extends(TransformGroup, _super);
            function TransformGroup() {
                var _this = this;
                _super.call(this);
                var coll = TransformGroup.ChildrenProperty.Initialize(this);
                coll.AttachTo(this);
                coll.RelayChanges(function () {
                    return _this._InvalidateValue();
                });
            }
            TransformGroup.prototype._BuildValue = function () {
                var enumerator = this.Children.GetEnumerator(true);
                var cur = mat3.identity();
                while (enumerator.MoveNext()) {
                    mat3.multiply((enumerator.Current).Value._Raw, cur, cur);
                }
                return cur;
            };
            TransformGroup.ChildrenProperty = DependencyProperty.RegisterImmutable("Children", function () {
                return TransformCollection;
            }, TransformGroup);

            TransformGroup.Annotations = { ContentProperty: TransformGroup.ChildrenProperty };
            return TransformGroup;
        })(Media.Transform);
        Media.TransformGroup = TransformGroup;
        Fayde.RegisterType(TransformGroup, {
            Name: "TransformGroup",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var BeginStoryboard = (function (_super) {
                __extends(BeginStoryboard, _super);
                function BeginStoryboard() {
                    _super.apply(this, arguments);
                }
                BeginStoryboard.prototype.Fire = function () {
                    var sb = this.Storyboard;
                    if (sb)
                        sb.Begin();
                };
                BeginStoryboard.StoryboardProperty = DependencyProperty.Register("Storyboard", function () {
                    return Media.Animation.Storyboard;
                }, BeginStoryboard);

                BeginStoryboard.Annotations = { ContentProperty: BeginStoryboard.StoryboardProperty };
                return BeginStoryboard;
            })(Fayde.TriggerAction);
            Animation.BeginStoryboard = BeginStoryboard;
            Fayde.RegisterType(BeginStoryboard, {
                Name: "BeginStoryboard",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var EasingFunctionBase = (function (_super) {
                __extends(EasingFunctionBase, _super);
                function EasingFunctionBase() {
                    _super.apply(this, arguments);
                }
                EasingFunctionBase.prototype.Ease = function (normalizedTime) {
                    var easingMode = this.EasingMode;
                    switch (easingMode) {
                        case Animation.EasingMode.EaseIn:
                            return this.EaseInCore(normalizedTime);
                        case Animation.EasingMode.EaseOut:
                            return this.EaseInCore(1.0 - normalizedTime);
                        case Animation.EasingMode.EaseInOut:
                            return normalizedTime <= 0.5 ? this.EaseInCore(normalizedTime * 2) * 0.5 : 1.0 - this.EaseInCore(((1.0 - normalizedTime) * 2) * 0.5);
                        default:
                            return 0.0;
                    }
                };
                EasingFunctionBase.prototype.EaseInCore = function (t) {
                    return t;
                };
                EasingFunctionBase.EasingModeProperty = DependencyProperty.Register("EasingMode", function () {
                    return new Enum(Animation.EasingMode);
                }, EasingFunctionBase);
                return EasingFunctionBase;
            })(Fayde.DependencyObject);
            Animation.EasingFunctionBase = EasingFunctionBase;
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var BackEase = (function (_super) {
                __extends(BackEase, _super);
                function BackEase() {
                    _super.apply(this, arguments);
                }
                BackEase.prototype.EaseInCore = function (t) {
                    var a = this.Amplitude;
                    return (t * t * t) - (t * a * Math.sin(t * Math.PI));
                };
                BackEase.AmplitudeProperty = DependencyProperty.Register("Amplitude", function () {
                    return Number;
                }, BackEase);
                return BackEase;
            })(Animation.EasingFunctionBase);
            Animation.BackEase = BackEase;
            Fayde.RegisterType(BackEase, {
                Name: "BackEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var BounceEase = (function (_super) {
                __extends(BounceEase, _super);
                function BounceEase() {
                    _super.apply(this, arguments);
                }
                BounceEase.prototype.EaseInCore = function (t) {
                    t = 1 - t;
                    var bounces = this.Bounces;
                    var bounciness = this.Bounciness;
                    var r = -1;
                    var period = 2;
                    for (var i = 0; i <= bounces; i++) {
                        r += (period * Math.pow(1 + (bounciness / 2), -i));
                    }
                    var x1 = -1.0;
                    var x2 = 0;
                    var r_sq = r * r;
                    var val = 100;
                    var p = 0;
                    while (val > 0.0) {
                        x2 = x1 + period * Math.pow(1 + (bounciness / 2), -p++);
                        val = r_sq * (t - x1 / r) * (t - x2 / r);
                        x1 = x2;
                    }
                    return -val;
                };
                BounceEase.BouncesProperty = DependencyProperty.Register("Bounces", function () {
                    return Number;
                }, BounceEase, 3);
                BounceEase.BouncinessProperty = DependencyProperty.Register("Bounciness", function () {
                    return Number;
                }, BounceEase, 2);
                return BounceEase;
            })(Animation.EasingFunctionBase);
            Animation.BounceEase = BounceEase;
            Fayde.RegisterType(BounceEase, {
                Name: "BounceEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var CircleEase = (function (_super) {
                __extends(CircleEase, _super);
                function CircleEase() {
                    _super.apply(this, arguments);
                }
                CircleEase.prototype.EaseInCore = function (t) {
                    return 1 - Math.sqrt(1 - (t * t));
                };
                return CircleEase;
            })(Animation.EasingFunctionBase);
            Animation.CircleEase = CircleEase;
            Fayde.RegisterType(CircleEase, {
                Name: "CircleEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var CubicEase = (function (_super) {
                __extends(CubicEase, _super);
                function CubicEase() {
                    _super.apply(this, arguments);
                }
                CubicEase.prototype.EaseInCore = function (t) {
                    return t * t * t;
                };
                return CubicEase;
            })(Animation.EasingFunctionBase);
            Animation.CubicEase = CubicEase;
            Fayde.RegisterType(CubicEase, {
                Name: "CubicEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var ElasticEase = (function (_super) {
                __extends(ElasticEase, _super);
                function ElasticEase() {
                    _super.apply(this, arguments);
                }
                ElasticEase.prototype.EaseInCore = function (t) {
                    var period = 1.0 / (this.Oscillations + .25);
                    var offset = period / 4;
                    t = t - 1;
                    return t * -Math.pow(2.0, this.Springiness * t) * Math.sin(((t - offset) * Math.PI * 2) / period);
                };
                ElasticEase.OscillationsProperty = DependencyProperty.Register("Oscillations", function () {
                    return Number;
                }, ElasticEase);
                ElasticEase.SpringinessProperty = DependencyProperty.Register("Springiness", function () {
                    return Number;
                }, ElasticEase);
                return ElasticEase;
            })(Animation.EasingFunctionBase);
            Animation.ElasticEase = ElasticEase;
            Fayde.RegisterType(ElasticEase, {
                Name: "ElasticEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var ExponentialEase = (function (_super) {
                __extends(ExponentialEase, _super);
                function ExponentialEase() {
                    _super.apply(this, arguments);
                }
                ExponentialEase.prototype.EaseInCore = function (t) {
                    var e = this.Exponent;
                    return (Math.exp(e * t) - 1) / (Math.exp(e) - 1);
                };
                ExponentialEase.ExponentProperty = DependencyProperty.Register("Exponent", function () {
                    return Number;
                }, ExponentialEase);
                return ExponentialEase;
            })(Animation.EasingFunctionBase);
            Animation.ExponentialEase = ExponentialEase;
            Fayde.RegisterType(ExponentialEase, {
                Name: "ExponentialEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var PowerEase = (function (_super) {
                __extends(PowerEase, _super);
                function PowerEase() {
                    _super.apply(this, arguments);
                }
                PowerEase.prototype.EaseInCore = function (t) {
                    return Math.pow(t, this.Power);
                };
                PowerEase.PowerProperty = DependencyProperty.Register("Power", function () {
                    return Number;
                }, PowerEase);
                return PowerEase;
            })(Animation.EasingFunctionBase);
            Animation.PowerEase = PowerEase;
            Fayde.RegisterType(PowerEase, {
                Name: "PowerEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var QuadraticEase = (function (_super) {
                __extends(QuadraticEase, _super);
                function QuadraticEase() {
                    _super.apply(this, arguments);
                }
                QuadraticEase.prototype.EaseInCore = function (t) {
                    return t * t;
                };
                return QuadraticEase;
            })(Animation.EasingFunctionBase);
            Animation.QuadraticEase = QuadraticEase;
            Fayde.RegisterType(QuadraticEase, {
                Name: "QuadraticEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var QuarticEase = (function (_super) {
                __extends(QuarticEase, _super);
                function QuarticEase() {
                    _super.apply(this, arguments);
                }
                QuarticEase.prototype.EaseInCore = function (t) {
                    return t * t * t * t;
                };
                return QuarticEase;
            })(Animation.EasingFunctionBase);
            Animation.QuarticEase = QuarticEase;
            Fayde.RegisterType(QuarticEase, {
                Name: "QuarticEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var QuinticEase = (function (_super) {
                __extends(QuinticEase, _super);
                function QuinticEase() {
                    _super.apply(this, arguments);
                }
                QuinticEase.prototype.EaseInCore = function (t) {
                    return t * t * t * t * t;
                };
                return QuinticEase;
            })(Animation.EasingFunctionBase);
            Animation.QuinticEase = QuinticEase;
            Fayde.RegisterType(QuinticEase, {
                Name: "QuinticEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var SineEase = (function (_super) {
                __extends(SineEase, _super);
                function SineEase() {
                    _super.apply(this, arguments);
                }
                SineEase.prototype.EaseInCore = function (t) {
                    return 1 - (Math.sin(1 - t) * (Math.PI / 2));
                };
                return SineEase;
            })(Animation.EasingFunctionBase);
            Animation.SineEase = SineEase;
            Fayde.RegisterType(SineEase, {
                Name: "SineEase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var KeyFrame = (function (_super) {
                __extends(KeyFrame, _super);
                function KeyFrame() {
                    _super.apply(this, arguments);
                    this._ResolvedKeyTime = null;
                    this._Resolved = false;
                }
                KeyFrame.prototype.CoerceKeyTime = function (dobj, propd, value, coerced, error) {
                    if (!value)
                        coerced.Value = this.KeyTime;
else
                        coerced.Value = value;
                    return true;
                };
                KeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    return undefined;
                };
                KeyFrame.prototype.CompareToTimeSpan = function (otherTs) {
                    return this._ResolvedKeyTime.CompareTo(otherTs);
                };
                KeyFrame.prototype.Listen = function (listener) {
                    this._Listener = listener;
                };
                KeyFrame.prototype.Unlisten = function (listener) {
                    if (this._Listener === listener)
                        this._Listener = null;
                };
                KeyFrame.prototype.InvalidateKeyFrame = function () {
                    var listener = this._Listener;
                    if (listener)
                        listener.KeyFrameChanged(this);
                };
                KeyFrame.Comparer = function (kf1, kf2) {
                    var ts1 = kf1._ResolvedKeyTime;
                    var ts2 = kf2._ResolvedKeyTime;
                    return ts1.CompareTo(ts2);
                };
                KeyFrame.ResolveKeyFrames = function (animation, arr) {
                    var totalInterpolationTime;
                    var hasTimeSpanKeyFrame = false;
                    var highestKeyTimeTimeSpan = new TimeSpan();
                    var keyFrame;
                    var len = arr.length;
                    var i;
                    for (i = 0; i < len; i++) {
                        keyFrame = arr[i];
                        keyFrame._ResolvedKeyTime = new TimeSpan();
                        keyFrame._Resolved = false;
                    }
                    var keyTime;
                    for (i = 0; i < len; i++) {
                        keyFrame = arr[i];
                        keyTime = keyFrame.KeyTime;
                        if (keyTime.HasTimeSpan) {
                            hasTimeSpanKeyFrame = true;
                            var ts = keyTime.TimeSpan;
                            if (ts.CompareTo(highestKeyTimeTimeSpan) > 0)
                                highestKeyTimeTimeSpan = ts;
                            keyFrame._ResolvedKeyTime = ts;
                            keyFrame._Resolved = true;
                        }
                    }
                    var dur = animation.Duration;
                    if (dur && dur.HasTimeSpan) {
                        totalInterpolationTime = dur.TimeSpan;
                    } else if (hasTimeSpanKeyFrame) {
                        totalInterpolationTime = highestKeyTimeTimeSpan;
                    } else {
                        totalInterpolationTime = TimeSpan.FromTicks(TimeSpan._TicksPerSecond);
                    }
                    for (i = 0; i < len; i++) {
                        keyFrame = arr[i];
                        keyTime = keyFrame.KeyTime;
                        if (keyTime.HasPercent) {
                            keyFrame._ResolvedKeyTime = totalInterpolationTime.Multiply(keyTime.Percent);
                            keyFrame._Resolved = true;
                        }
                    }
                    if (len > 0) {
                        keyFrame = arr[len - 1];
                        keyTime = keyFrame.KeyTime;
                        if (keyTime.IsPaced || keyTime.IsUniform) {
                            keyFrame._ResolvedKeyTime = totalInterpolationTime;
                            keyFrame._Resolved = true;
                        }
                    }

                    if (len > 0) {
                        keyFrame = arr[len - 1];
                        keyTime = keyFrame.KeyTime;
                        if (!keyFrame._Resolved && keyTime.IsPaced) {
                            keyFrame._ResolvedKeyTime = new TimeSpan();
                            keyFrame._Resolved = true;
                        }
                    }
                    return arr;
                };
                KeyFrame.KeyTimeProperty = DependencyProperty.Register("KeyTime", function () {
                    return KeyTime;
                }, KeyFrame, undefined, function (d, args) {
                    return (d).InvalidateKeyFrame();
                });
                return KeyFrame;
            })(Fayde.DependencyObject);
            Animation.KeyFrame = KeyFrame;
            Fayde.RegisterType(KeyFrame, {
                Name: "KeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var KeyFrameCollection = (function (_super) {
                __extends(KeyFrameCollection, _super);
                function KeyFrameCollection() {
                    _super.apply(this, arguments);
                    this._Resolved = false;
                    this._SortedList = [];
                }
                KeyFrameCollection.prototype.GetKeyFrameForTime = function (t, prevFrameRef) {
                    var currentKeyFrame = null;
                    var previousKeyFrame = null;
                    var i;
                    var sortedList = this._SortedList;
                    if (sortedList.length == 0) {
                        prevFrameRef.Value = null;
                        return null;
                    }
                    var keyFrame;
                    var valuePropd;
                    for (i = 0; i < sortedList.length; i++) {
                        keyFrame = sortedList[i];
                        if (keyFrame.CompareToTimeSpan(t) >= 0 || (i + 1) >= sortedList.length)
                            break;
                    }
                    for (; i >= 0; i--) {
                        keyFrame = sortedList[i];
                        valuePropd = DependencyProperty.GetDependencyProperty((keyFrame).constructor, "Value");
                        if (keyFrame.GetValue(valuePropd) !== undefined) {
                            currentKeyFrame = keyFrame;
                            break;
                        }
                    }
                    for (i--; i >= 0; i--) {
                        keyFrame = sortedList[i];
                        valuePropd = DependencyProperty.GetDependencyProperty((keyFrame).constructor, "Value");
                        if (keyFrame.GetValue(valuePropd) !== undefined) {
                            previousKeyFrame = keyFrame;
                            break;
                        }
                    }
                    prevFrameRef.Value = previousKeyFrame;
                    return currentKeyFrame;
                };
                KeyFrameCollection.prototype.Clear = function () {
                    this._Resolved = false;
                    this._SortedList = [];
                    return _super.prototype.Clear.call(this);
                };
                KeyFrameCollection.prototype.AddingToCollection = function (value, error) {
                    if (!_super.prototype.AddingToCollection.call(this, value, error))
                        return false;
                    this._Resolved = false;
                    value.Listen(this);
                    return true;
                };
                KeyFrameCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                    _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                    this._Resolved = false;
                    value.Unlisten(this);
                };
                KeyFrameCollection.prototype.KeyFrameChanged = function (source) {
                    this._Resolved = false;
                };
                KeyFrameCollection.ResolveKeyFrames = function (animation, coll) {
                    if (coll._Resolved)
                        return coll._SortedList;
                    coll._SortedList = KeyFrame.ResolveKeyFrames(animation, coll._ht).slice(0);
                    coll._SortedList.sort(KeyFrame.Comparer);
                    coll._Resolved = true;
                    return coll._SortedList;
                };
                return KeyFrameCollection;
            })(Fayde.XamlObjectCollection);
            Animation.KeyFrameCollection = KeyFrameCollection;
            Fayde.RegisterType(KeyFrameCollection, {
                Name: "KeyFrameCollection",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var KeySpline = (function (_super) {
                __extends(KeySpline, _super);
                function KeySpline() {
                    _super.apply(this, arguments);
                    this._QuadraticsArray = null;
                }
                KeySpline.prototype.GetSplineProgress = function (linearProgress) {
                    if (linearProgress >= 1.0)
                        return 1.0;
                    if (linearProgress <= 0.0)
                        return 0.0;
                    if (!this._QuadraticsArray)
                        this._RegenerateQuadratics();
                    return Animation.Curves.QuadraticArrayYForX(this._QuadraticsArray, linearProgress, KeySpline.TOTAL_COUNT);
                };
                KeySpline.prototype.InvalidateControlPoints = function () {
                    this._QuadraticsArray = null;
                };
                KeySpline.prototype._RegenerateQuadratics = function () {
                    var c1 = this.ControlPoint1;
                    var c2 = this.ControlPoint2;
                    var src = {
                        c0: { x: 0.0, y: 0.0 },
                        c1: { x: c1.X, y: c1.Y },
                        c2: { x: c2.X, y: c2.Y },
                        c3: { x: 1.0, y: 1.0 }
                    };
                    var carr = [];
                    Animation.Curves.SubdivideCubicAtLevel(carr, KeySpline.PRECISION_LEVEL, src);
                    this._QuadraticsArray = Animation.Curves.ConvertCubicsToQuadratics(carr, KeySpline.TOTAL_COUNT);
                };
                KeySpline.PRECISION_LEVEL = 4;
                KeySpline.TOTAL_COUNT = Math.pow(2, KeySpline.PRECISION_LEVEL);
                KeySpline.ControlPoint1Property = DependencyProperty.RegisterCore("ControlPoint1", function () {
                    return Point;
                }, KeySpline, new Point(0, 0), function (d, args) {
                    return (d).InvalidateControlPoints();
                });
                KeySpline.ControlPoint2Property = DependencyProperty.RegisterCore("ControlPoint2", function () {
                    return Point;
                }, KeySpline, new Point(1.0, 1.0), function (d, args) {
                    return (d).InvalidateControlPoints();
                });
                return KeySpline;
            })(Fayde.DependencyObject);
            Animation.KeySpline = KeySpline;
            Fayde.RegisterType(KeySpline, {
                Name: "KeySpline",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var ObjectKeyFrame = (function (_super) {
                __extends(ObjectKeyFrame, _super);
                function ObjectKeyFrame() {
                    _super.apply(this, arguments);
                    this.ConvertedValue = undefined;
                }
                ObjectKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () {
                    return Object;
                }, ObjectKeyFrame);
                return ObjectKeyFrame;
            })(Animation.KeyFrame);
            Animation.ObjectKeyFrame = ObjectKeyFrame;
            Fayde.RegisterType(ObjectKeyFrame, {
                Name: "ObjectKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var DiscreteObjectKeyFrame = (function (_super) {
                __extends(DiscreteObjectKeyFrame, _super);
                function DiscreteObjectKeyFrame() {
                    _super.apply(this, arguments);
                }
                DiscreteObjectKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.ConvertedValue;
                    return baseValue;
                };
                return DiscreteObjectKeyFrame;
            })(ObjectKeyFrame);
            Animation.DiscreteObjectKeyFrame = DiscreteObjectKeyFrame;
            Fayde.RegisterType(DiscreteObjectKeyFrame, {
                Name: "DiscreteObjectKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var PointKeyFrame = (function (_super) {
                __extends(PointKeyFrame, _super);
                function PointKeyFrame() {
                    _super.apply(this, arguments);
                }
                PointKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () {
                    return Point;
                }, PointKeyFrame);
                return PointKeyFrame;
            })(Animation.KeyFrame);
            Animation.PointKeyFrame = PointKeyFrame;
            Fayde.RegisterType(PointKeyFrame, {
                Name: "PointKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var DiscretePointKeyFrame = (function (_super) {
                __extends(DiscretePointKeyFrame, _super);
                function DiscretePointKeyFrame() {
                    _super.apply(this, arguments);
                }
                DiscretePointKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    return baseValue;
                };
                return DiscretePointKeyFrame;
            })(PointKeyFrame);
            Animation.DiscretePointKeyFrame = DiscretePointKeyFrame;
            Fayde.RegisterType(DiscretePointKeyFrame, {
                Name: "DiscretePointKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var EasingPointKeyFrame = (function (_super) {
                __extends(EasingPointKeyFrame, _super);
                function EasingPointKeyFrame() {
                    _super.apply(this, arguments);
                }
                EasingPointKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var easingFunction = this.EasingFunction;
                    if (easingFunction)
                        keyFrameProgress = easingFunction.Ease(keyFrameProgress);
                    return Point.LERP(start, end, keyFrameProgress);
                };
                EasingPointKeyFrame.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () {
                    return Animation.EasingFunctionBase;
                }, EasingPointKeyFrame);
                return EasingPointKeyFrame;
            })(PointKeyFrame);
            Animation.EasingPointKeyFrame = EasingPointKeyFrame;
            Fayde.RegisterType(EasingPointKeyFrame, {
                Name: "EasingPointKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var LinearPointKeyFrame = (function (_super) {
                __extends(LinearPointKeyFrame, _super);
                function LinearPointKeyFrame() {
                    _super.apply(this, arguments);
                }
                LinearPointKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    return Point.LERP(baseValue, this.Value, keyFrameProgress);
                };
                return LinearPointKeyFrame;
            })(PointKeyFrame);
            Animation.LinearPointKeyFrame = LinearPointKeyFrame;
            Fayde.RegisterType(LinearPointKeyFrame, {
                Name: "LinearPointKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var SplinePointKeyFrame = (function (_super) {
                __extends(SplinePointKeyFrame, _super);
                function SplinePointKeyFrame() {
                    _super.apply(this, arguments);
                }
                SplinePointKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var splineProgress = keyFrameProgress;
                    var keySpline = this.KeySpline;
                    if (keySpline)
                        splineProgress = keySpline.GetSplineProgress(keyFrameProgress);
                    if (isNaN(start.X))
                        start.X = 0;
                    if (isNaN(start.Y))
                        start.Y = 0;
                    if (isNaN(end.X))
                        end.X = 0;
                    if (isNaN(end.Y))
                        end.Y = 0;
                    return Point.LERP(start, end, splineProgress);
                };
                SplinePointKeyFrame.KeySplineProperty = DependencyProperty.Register("KeySpline", function () {
                    return Animation.KeySpline;
                }, SplinePointKeyFrame);
                return SplinePointKeyFrame;
            })(PointKeyFrame);
            Animation.SplinePointKeyFrame = SplinePointKeyFrame;
            Fayde.RegisterType(SplinePointKeyFrame, {
                Name: "SplinePointKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var Timeline = (function (_super) {
                __extends(Timeline, _super);
                function Timeline() {
                    _super.apply(this, arguments);
                    this.Completed = new MulticastEvent();
                    this._IsPaused = false;
                    this._BeginPauseTime = 0;
                    this._TicksPaused = 0;
                    this._IsFirstUpdate = true;
                    this._HasBegun = false;
                    this._BeginTicks = undefined;
                    this._InitialStep = undefined;
                    this._HasCompleted = false;
                    this.ManualTarget = undefined;
                }
                Object.defineProperty(Timeline.prototype, "HasManualTarget", {
                    get: function () {
                        return this.ManualTarget !== undefined;
                    },
                    enumerable: true,
                    configurable: true
                });
                Timeline.prototype.Reset = function () {
                    this._TicksPaused = 0;
                    this._IsFirstUpdate = true;
                    this._BeginTicks = undefined;
                    this._HasBegun = false;
                    this._HasCompleted = false;
                };
                Timeline.prototype.Pause = function () {
                    if (this._IsPaused)
                        return;
                    this._BeginPauseTime = new Date().getTime();
                    this._IsPaused = true;
                };
                Timeline.prototype.Resume = function () {
                    if (!this._IsPaused)
                        return;
                    this._IsPaused = false;
                    var nowTime = new Date().getTime();
                    this._TicksPaused = nowTime - this._BeginPauseTime;
                };
                Timeline.prototype.Stop = function () {
                    this.Reset();
                };
                Timeline.prototype.OnCompleted = function () {
                    this._HasCompleted = true;
                    var fill = this.FillBehavior;
                    switch (fill) {
                        case Animation.FillBehavior.HoldEnd:
                            this.HoldEnd();
                            break;
                        case Animation.FillBehavior.Stop:
                            this.Stop();
                            break;
                    }
                    this.Completed.Raise(this, EventArgs.Empty);
                };
                Timeline.prototype.Update = function (nowTime) {
                    var clockData = this.CreateClockData(nowTime);
                    if (!clockData || this._IsPaused || this._HasCompleted)
                        return;
                    this.UpdateInternal(clockData);
                    if (clockData.Completed)
                        this.OnCompleted();
                };
                Timeline.prototype.UpdateInternal = function (clockData) {
                };
                Timeline.prototype.HoldEnd = function () {
                };
                Timeline.prototype.CreateClockData = function (nowTime) {
                    if (this._IsFirstUpdate) {
                        this._InitialStep = nowTime;
                        this._HasBegun = false;
                        this._IsFirstUpdate = false;
                    }
                    if (!this._HasBegun) {
                        if (!this.IsAfterBeginTime(nowTime))
                            return;
                        this._BeginTicks = nowTime;
                        this._HasBegun = true;
                    }
                    var elapsedTicks = nowTime - this._BeginTicks - this._TicksPaused;
                    var currentTimeTicks = elapsedTicks;
                    var progress = 0.0;
                    var completed = false;
                    var duration = this.GetNaturalDuration();
                    if (duration.IsAutomatic) {
                        progress = 1.0;
                        completed = true;
                    } else if (duration.HasTimeSpan) {
                        var d = duration.TimeSpan.Ticks;
                        if (d === 0) {
                            progress = 1.0;
                        } else if (this.AutoReverse === true) {
                            d = d / 2;
                            progress = 1 - (Math.abs((elapsedTicks % (d + d)) - d) / d);
                        } else {
                            progress = (elapsedTicks / d) - Math.floor(elapsedTicks / d);
                        }
                        var repeat = this.RepeatBehavior || Timeline.DEFAULT_REPEAT_BEHAVIOR;
                        if (repeat.IsForever) {
                        } else if (repeat.HasCount) {
                            if ((d === 0) || (Math.floor(elapsedTicks / d) >= repeat.Count)) {
                                progress = 1.0;
                                completed = true;
                            }
                        } else if (repeat.HasDuration) {
                            if (elapsedTicks >= repeat.Duration.TimeSpan.Ticks) {
                                progress = 1.0;
                                completed = true;
                            }
                        }
                        if (d !== 0)
                            currentTimeTicks = progress * d;
                    }
                    return {
                        CurrentTime: TimeSpan.FromTicks(currentTimeTicks),
                        Progress: progress,
                        Completed: completed
                    };
                };
                Timeline.prototype.IsAfterBeginTime = function (nowTime) {
                    var beginTime = this.BeginTime;
                    if (beginTime == null)
                        return true;
                    var beginTicks = beginTime.Ticks;
                    if (beginTicks <= 0)
                        return true;
                    var elapsedTicks = nowTime - this._InitialStep;
                    if (elapsedTicks < beginTicks)
                        return false;
                    return true;
                };
                Timeline.prototype.GetNaturalDuration = function () {
                    var d = this.Duration;
                    if (!d || d.IsAutomatic)
                        return this.GetNaturalDurationCore();
                    return d;
                };
                Timeline.prototype.GetNaturalDurationCore = function () {
                    return Duration.Automatic;
                };
                Timeline.DEFAULT_REPEAT_BEHAVIOR = Animation.RepeatBehavior.FromIterationCount(1);
                Timeline.AutoReverseProperty = DependencyProperty.Register("AutoReverse", function () {
                    return Boolean;
                }, Timeline, false);
                Timeline.BeginTimeProperty = DependencyProperty.Register("BeginTime", function () {
                    return TimeSpan;
                }, Timeline);
                Timeline.DurationProperty = DependencyProperty.Register("Duration", function () {
                    return Duration;
                }, Timeline);
                Timeline.RepeatBehaviorProperty = DependencyProperty.Register("RepeatBehavior", function () {
                    return Animation.RepeatBehavior;
                }, Timeline);
                Timeline.SpeedRatioProperty = DependencyProperty.Register("SpeedRatio", function () {
                    return Number;
                }, Timeline, 1.0);
                Timeline.FillBehaviorProperty = DependencyProperty.Register("FillBehavior", function () {
                    return new Enum(Animation.FillBehavior);
                }, Timeline, Animation.FillBehavior.HoldEnd);
                return Timeline;
            })(Fayde.DependencyObject);
            Animation.Timeline = Timeline;
            Fayde.RegisterType(Timeline, {
                Name: "Timeline",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var TimelineCollection = (function (_super) {
                __extends(TimelineCollection, _super);
                function TimelineCollection() {
                    _super.apply(this, arguments);
                }
                return TimelineCollection;
            })(Fayde.XamlObjectCollection);
            Animation.TimelineCollection = TimelineCollection;
            Fayde.RegisterType(TimelineCollection, {
                Name: "TimelineCollection",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Effects) {
            var Effect = (function (_super) {
                __extends(Effect, _super);
                function Effect() {
                    _super.apply(this, arguments);
                }
                Effect.prototype.Padding = function () {
                    return new Thickness();
                };
                Effect.prototype.GetPadding = function (thickness) {
                    return false;
                };
                Effect.prototype.PreRender = function (ctx) {
                };
                Effect.prototype.Listen = function (listener) {
                    this._Listener = listener;
                };
                Effect.prototype.Unlisten = function (listener) {
                    if (this._Listener === listener)
                        this._Listener = null;
                };
                Effect.prototype._EffectChanged = function (args) {
                    var listener = this._Listener;
                    if (listener)
                        listener.EffectChanged(this);
                };
                Effect.EffectMappingProperty = DependencyProperty.Register("EffectMapping", function () {
                    return Media.GeneralTransform;
                }, Effect, undefined, function (d, args) {
                    return (d)._EffectChanged(args);
                });
                return Effect;
            })(Fayde.DependencyObject);
            Effects.Effect = Effect;
            Fayde.RegisterType(Effect, {
                Name: "Effect",
                Namespace: "Fayde.Media.Effects",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Effects || (Media.Effects = {}));
        var Effects = Media.Effects;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Imaging) {
            var ImageSource = (function (_super) {
                __extends(ImageSource, _super);
                function ImageSource() {
                    _super.apply(this, arguments);
                    this.PixelWidth = 0;
                    this.PixelHeight = 0;
                }
                ImageSource.prototype.Lock = function () {
                };
                ImageSource.prototype.Unlock = function () {
                };
                Object.defineProperty(ImageSource.prototype, "Image", {
                    get: function () {
                        return undefined;
                    },
                    enumerable: true,
                    configurable: true
                });
                return ImageSource;
            })(Fayde.DependencyObject);
            Imaging.ImageSource = ImageSource;
            Fayde.RegisterType(ImageSource, {
                Name: "ImageSource",
                Namespace: "Fayde.Media.Imaging",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Imaging || (Media.Imaging = {}));
        var Imaging = Media.Imaging;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (VSM) {
            var VisualState = (function (_super) {
                __extends(VisualState, _super);
                function VisualState() {
                    _super.apply(this, arguments);
                }
                VisualState.StoryboardProperty = DependencyProperty.Register("Storyboard", function () {
                    return Media.Animation.Storyboard;
                }, VisualState);

                VisualState.Annotations = { ContentProperty: VisualState.StoryboardProperty };
                return VisualState;
            })(Fayde.DependencyObject);
            VSM.VisualState = VisualState;
            Fayde.RegisterType(VisualState, {
                Name: "VisualState",
                Namespace: "Fayde.Media.VSM",
                XmlNamespace: Fayde.XMLNS
            });
            var VisualStateCollection = (function (_super) {
                __extends(VisualStateCollection, _super);
                function VisualStateCollection() {
                    _super.apply(this, arguments);
                }
                return VisualStateCollection;
            })(Fayde.XamlObjectCollection);
            VSM.VisualStateCollection = VisualStateCollection;
            Fayde.RegisterType(VisualStateCollection, {
                Name: "VisualStateCollection",
                Namespace: "Fayde.Media.VSM",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.VSM || (Media.VSM = {}));
        var VSM = Media.VSM;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (VSM) {
            var VisualStateChangedEventArgs = (function (_super) {
                __extends(VisualStateChangedEventArgs, _super);
                function VisualStateChangedEventArgs(oldState, newState, control) {
                    _super.call(this);
                    Object.defineProperty(this, "OldState", { value: oldState, writable: false });
                    Object.defineProperty(this, "NewState", { value: newState, writable: false });
                    Object.defineProperty(this, "Control", { value: control, writable: false });
                }
                return VisualStateChangedEventArgs;
            })(EventArgs);
            VSM.VisualStateChangedEventArgs = VisualStateChangedEventArgs;
            var VisualStateGroup = (function (_super) {
                __extends(VisualStateGroup, _super);
                function VisualStateGroup() {
                    _super.call(this);
                    this._CurrentStoryboards = [];
                    this._Transitions = null;
                    this.CurrentStateChanging = new MulticastEvent();
                    this.CurrentStateChanged = new MulticastEvent();
                    this.CurrentState = null;
                    VisualStateGroup.StatesProperty.Initialize(this);
                    Object.defineProperty(this, "Transitions", {
                        get: function () {
                            if (!this._Transitions)
                                this._Transitions = [];
                            return this._Transitions;
                        }
                    });
                }
                VisualStateGroup.prototype.GetState = function (stateName) {
                    var enumerator = this.States.GetEnumerator();
                    var state;
                    while (enumerator.MoveNext()) {
                        state = enumerator.Current;
                        if (state.Name === stateName)
                            return state;
                    }
                    return null;
                };
                VisualStateGroup.prototype.StartNewThenStopOld = function (element, newStoryboards) {
                    var i;
                    var storyboard;
                    var res = element.Resources;
                    for (i = 0; i < newStoryboards.length; i++) {
                        storyboard = newStoryboards[i];
                        if (storyboard == null)
                            continue;
                        res.Set((storyboard)._ID, storyboard);
                        try  {
                            storyboard.Begin();
                        } catch (err) {
                            for (var j = 0; j <= i; j++) {
                                if (newStoryboards[j] != null)
                                    res.Set((newStoryboards[j])._ID, undefined);
                            }
                            throw err;
                        }
                    }
                    this.StopCurrentStoryboards(element);
                    var curStoryboards = this._CurrentStoryboards;
                    for (i = 0; i < newStoryboards.length; i++) {
                        if (newStoryboards[i] == null)
                            continue;
                        curStoryboards.push(newStoryboards[i]);
                    }
                };
                VisualStateGroup.prototype.StopCurrentStoryboards = function (element) {
                    var curStoryboards = this._CurrentStoryboards;
                    var enumerator = Fayde.ArrayEx.GetEnumerator(curStoryboards);
                    var storyboard;
                    while (enumerator.MoveNext()) {
                        storyboard = enumerator.Current;
                        if (!storyboard)
                            continue;
                        element.Resources.Set((storyboard)._ID, undefined);
                        storyboard.Stop();
                    }
                    this._CurrentStoryboards = [];
                };
                VisualStateGroup.prototype.RaiseCurrentStateChanging = function (element, oldState, newState, control) {
                    this.CurrentStateChanging.Raise(this, new VisualStateChangedEventArgs(oldState, newState, control));
                };
                VisualStateGroup.prototype.RaiseCurrentStateChanged = function (element, oldState, newState, control) {
                    this.CurrentStateChanged.Raise(this, new VisualStateChangedEventArgs(oldState, newState, control));
                };
                VisualStateGroup.StatesProperty = DependencyProperty.RegisterImmutable("States", function () {
                    return VSM.VisualStateCollection;
                }, VisualStateGroup);
                VisualStateGroup.Annotations = { ContentProperty: VisualStateGroup.StatesProperty };
                return VisualStateGroup;
            })(Fayde.DependencyObject);
            VSM.VisualStateGroup = VisualStateGroup;
            Fayde.RegisterType(VisualStateGroup, {
                Name: "VisualStateGroup",
                Namespace: "Fayde.Media.VSM",
                XmlNamespace: Fayde.XMLNS
            });
            var VisualStateGroupCollection = (function (_super) {
                __extends(VisualStateGroupCollection, _super);
                function VisualStateGroupCollection() {
                    _super.apply(this, arguments);
                }
                return VisualStateGroupCollection;
            })(Fayde.XamlObjectCollection);
            VSM.VisualStateGroupCollection = VisualStateGroupCollection;
            Fayde.RegisterType(VisualStateGroupCollection, {
                Name: "VisualStateGroupCollection",
                Namespace: "Fayde.Media.VSM",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.VSM || (Media.VSM = {}));
        var VSM = Media.VSM;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (VSM) {
            var VisualStateManager = (function (_super) {
                __extends(VisualStateManager, _super);
                function VisualStateManager() {
                    _super.apply(this, arguments);
                }
                VisualStateManager.GetVisualStateGroups = function (d) {
                    return d.GetValue(VisualStateManager.VisualStateGroupsProperty);
                };
                VisualStateManager.SetVisualStateGroups = function (d, value) {
                    d.SetValue(VisualStateManager.VisualStateGroupsProperty, value);
                };

                VisualStateManager.GetCustomVisualStateManager = function (d) {
                    return d.GetValue(VisualStateManager.CustomVisualStateManagerProperty);
                };
                VisualStateManager.SetCustomVisualStateManager = function (d, value) {
                    d.SetValue(VisualStateManager.CustomVisualStateManagerProperty, value);
                };
                VisualStateManager.GoToState = function (control, stateName, useTransitions) {
                    if (!control)
                        throw new ArgumentException("control");
                    if (!stateName)
                        throw new ArgumentException("stateName");
                    var root = VisualStateManager._GetTemplateRoot(control);
                    if (!root)
                        return false;
                    var groups = VisualStateManager.GetVisualStateGroups(root);
                    if (!groups)
                        return false;
                    var data = { group: null, state: null };
                    if (!VisualStateManager._TryGetState(groups, stateName, data))
                        return false;
                    var customVsm = VisualStateManager.GetCustomVisualStateManager(root);
                    if (customVsm) {
                        return customVsm.GoToStateCore(control, root, stateName, data.group, data.state, useTransitions);
                    } else if (data.state != null) {
                        return VisualStateManager.GoToStateInternal(control, root, data.group, data.state, useTransitions);
                    }
                    return false;
                };
                VisualStateManager.prototype.GoToStateCore = function (control, element, stateName, group, state, useTransitions) {
                    return VisualStateManager.GoToStateInternal(control, element, group, state, useTransitions);
                };
                VisualStateManager.GoToStateInternal = function (control, element, group, state, useTransitions) {
                    var lastState = group.CurrentState;
                    if (lastState === state)
                        return true;
                    if (Media.VSM.Debug && window.console) {
                        console.log("VSM:GoToState:[" + (control)._ID + "]" + (lastState ? lastState.Name : "()") + "-->" + state.Name);
                    }
                    var transition = useTransitions ? VisualStateManager._GetTransition(element, group, lastState, state) : null;
                    var storyboard;
                    if (transition == null || (transition.GeneratedDuration.IsZero && ((storyboard = transition.Storyboard) == null || storyboard.Duration.IsZero))) {
                        if (transition != null && storyboard != null) {
                            group.StartNewThenStopOld(element, [storyboard, state.Storyboard]);
                        } else {
                            group.StartNewThenStopOld(element, [state.Storyboard]);
                        }
                        group.RaiseCurrentStateChanging(element, lastState, state, control);
                        group.RaiseCurrentStateChanged(element, lastState, state, control);
                    } else {
                        var dynamicTransition = VisualStateManager._GenerateDynamicTransitionAnimations(element, group, state, transition);
                        transition.DynamicStoryboardCompleted = false;
                        var dynamicCompleted = function (sender, e) {
                            if (transition.Storyboard == null || transition.ExplicitStoryboardCompleted === true) {
                                group.StartNewThenStopOld(element, [state.Storyboard]);
                                group.RaiseCurrentStateChanged(element, lastState, state, control);
                            }
                            transition.DynamicStoryboardCompleted = true;
                        };
                        var eventClosure = {};
                        dynamicTransition.Completed.Subscribe(dynamicCompleted, eventClosure);
                        if (transition.Storyboard != null && transition.ExplicitStoryboardCompleted === true) {
                            var transitionCompleted = function (sender, e) {
                                if (transition.DynamicStoryboardCompleted === true) {
                                    group.StartNewThenStopOld(element, [state.Storyboard]);
                                    group.RaiseCurrentStateChanged(element, lastState, state, control);
                                }
                                transition.Storyboard.Completed.Unsubscribe(transitionCompleted, eventClosure);
                                transition.ExplicitStoryboardCompleted = true;
                            };
                            transition.ExplicitStoryboardCompleted = false;
                            transition.Storyboard.Completed.Subscribe(transitionCompleted, eventClosure);
                        }
                        group.StartNewThenStopOld(element, [transition.Storyboard, dynamicTransition]);
                        group.RaiseCurrentStateChanging(element, lastState, state, control);
                    }
                    group.CurrentState = state;
                    return true;
                };
                VisualStateManager.DestroyStoryboards = function (control, root) {
                    if (!root)
                        return false;
                    var groups = VisualStateManager.GetVisualStateGroups(root);
                    if (!groups)
                        return false;
                    var enumerator = groups.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        (enumerator.Current).StopCurrentStoryboards(root);
                    }
                };
                VisualStateManager._GetTemplateRoot = function (control) {
                    if (control instanceof Fayde.Controls.UserControl)
                        return (control).XamlNode.TemplateRoot;
                    var enumerator = control.XamlNode.GetVisualTreeEnumerator();
                    var node = null;
                    if (enumerator.MoveNext()) {
                        node = enumerator.Current;
                        if (!(node instanceof Fayde.FENode))
                            node = null;
                    }
                    return (node) ? node.XObject : null;
                };
                VisualStateManager._TryGetState = function (groups, stateName, data) {
                    var enumerator = groups.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        data.group = enumerator.Current;
                        data.state = data.group.GetState(stateName);
                        if (data.state)
                            return true;
                    }
                    data.group = null;
                    data.state = null;
                    return false;
                };
                VisualStateManager._GetTransition = function (element, group, from, to) {
                    if (!element)
                        throw new ArgumentException("element");
                    if (!group)
                        throw new ArgumentException("group");
                    if (!to)
                        throw new ArgumentException("to");
                    var best = null;
                    var defaultTransition = null;
                    var bestScore = -1;
                    var transitions = group.Transitions;
                    if (transitions) {
                        var enumerator = Fayde.ArrayEx.GetEnumerator(transitions);
                        var transition;
                        while (enumerator.MoveNext()) {
                            transition = enumerator.Current;
                            if (!defaultTransition && transition.IsDefault) {
                                defaultTransition = transition;
                                continue;
                            }
                            var score = -1;
                            var transFromState = group.GetState(transition.From);
                            var transToState = group.GetState(transition.To);
                            if (from === transFromState)
                                score += 1;
else if (transFromState != null)
                                continue;
                            if (to === transToState)
                                score += 2;
else if (transToState != null)
                                continue;
                            if (score > bestScore) {
                                bestScore = score;
                                best = transition;
                            }
                        }
                    }
                    if (best != null)
                        return best;
                    return defaultTransition;
                };
                VisualStateManager._GenerateDynamicTransitionAnimations = function (root, group, state, transition) {
                    var dynamic = new Media.Animation.Storyboard();
                    if (transition != null) {
                        dynamic.Duration = transition.GeneratedDuration;
                    } else {
                        dynamic.Duration = new Duration(new TimeSpan());
                    }
                    var currentAnimations;
                    var transitionAnimations;
                    var newStateAnimations;
                    NotImplemented("VisualStateManager._GenerateDynamicTransitionAnimations");
                    return dynamic;
                };
                VisualStateManager.VisualStateGroupsProperty = DependencyProperty.RegisterAttachedCore("VisualStateGroups", function () {
                    return VSM.VisualStateGroupCollection;
                }, VisualStateManager);

                VisualStateManager.CustomVisualStateManagerProperty = DependencyProperty.RegisterAttachedCore("CustomVisualStateManager", function () {
                    return VisualStateManager;
                }, VisualStateManager);
                return VisualStateManager;
            })(Fayde.DependencyObject);
            VSM.VisualStateManager = VisualStateManager;
            Fayde.RegisterType(VisualStateManager, {
                Name: "VisualStateManager",
                Namespace: "Fayde.Media.VSM",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.VSM || (Media.VSM = {}));
        var VSM = Media.VSM;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (VSM) {
            var VisualTransition = (function (_super) {
                __extends(VisualTransition, _super);
                function VisualTransition() {
                    _super.apply(this, arguments);
                    this.From = null;
                    this.To = null;
                    this.DynamicStoryboardCompleted = true;
                    this.ExplicitStoryboardCompleted = true;
                }
                Object.defineProperty(VisualTransition.prototype, "IsDefault", {
                    get: function () {
                        return this.From == null && this.To == null;
                    },
                    enumerable: true,
                    configurable: true
                });
                return VisualTransition;
            })(Fayde.DependencyObject);
            VSM.VisualTransition = VisualTransition;
            Fayde.RegisterType(VisualTransition, {
                Name: "VisualTransition",
                Namespace: "Fayde.Media.VSM",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.VSM || (Media.VSM = {}));
        var VSM = Media.VSM;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (MVVM) {
        function NotifyProperties(type, propNames) {
            var len = propNames.length;
            for (var i = 0; i < len; i++) {
                (function () {
                    var propName = propNames[i];
                    var backingName = "$" + propName + "$";
                    Object.defineProperty(type.prototype, propName, {
                        get: function () {
                            return this[backingName];
                        },
                        set: function (value) {
                            this[backingName] = value;
                            this.OnPropertyChanged(propName);
                        }
                    });
                })();
            }
        }
        MVVM.NotifyProperties = NotifyProperties;
        var ObservableObject = (function () {
            function ObservableObject() {
                this.PropertyChanged = new MulticastEvent();
            }
            ObservableObject.prototype.OnPropertyChanged = function (propertyName) {
                this.PropertyChanged.Raise(this, new Fayde.PropertyChangedEventArgs(propertyName));
            };
            return ObservableObject;
        })();
        MVVM.ObservableObject = ObservableObject;
        Fayde.RegisterType(ObservableObject, {
            Name: "ObservableObject",
            Namespace: "Fayde.MVVM",
            XmlNamespace: Fayde.XMLNS,
            Interfaces: [Fayde.INotifyPropertyChanged_]
        });
    })(Fayde.MVVM || (Fayde.MVVM = {}));
    var MVVM = Fayde.MVVM;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (MVVM) {
        var ViewModelBase = (function (_super) {
            __extends(ViewModelBase, _super);
            function ViewModelBase() {
                _super.apply(this, arguments);
            }
            return ViewModelBase;
        })(MVVM.ObservableObject);
        MVVM.ViewModelBase = ViewModelBase;
        Fayde.RegisterType(ViewModelBase, {
            Name: "ViewModelBase",
            Namespace: "Fayde.MVVM",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.MVVM || (Fayde.MVVM = {}));
    var MVVM = Fayde.MVVM;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Navigation) {
        var UriMapper = (function (_super) {
            __extends(UriMapper, _super);
            function UriMapper() {
                _super.call(this);
                UriMapper.UriMappingsProperty.Initialize(this);
            }
            UriMapper.prototype.MapUri = function (uri) {
                var enumerator = this.UriMappings.GetEnumerator();
                var mapped;
                while (enumerator.MoveNext()) {
                    mapped = enumerator.Current.MapUri(uri);
                    if (mapped)
                        return mapped;
                }
                return uri;
            };
            UriMapper.UriMappingsProperty = DependencyProperty.RegisterImmutable("UriMappings", function () {
                return Fayde.XamlObjectCollection;
            }, UriMapper);

            UriMapper.Annotations = { ContentProperty: UriMapper.UriMappingsProperty };
            return UriMapper;
        })(Fayde.DependencyObject);
        Navigation.UriMapper = UriMapper;
        Fayde.RegisterType(UriMapper, {
            Name: "UriMapper",
            Namespace: "Fayde.Navigation",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Navigation || (Fayde.Navigation = {}));
    var Navigation = Fayde.Navigation;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Navigation) {
        var UriMapping = (function (_super) {
            __extends(UriMapping, _super);
            function UriMapping() {
                _super.apply(this, arguments);
            }
            UriMapping.prototype.MapUri = function (uri) {
                var matcher = createUriMatcher(this.Uri.toString(), this.MappedUri.toString(), uri.toString());
                var result = matcher.Match();
                if (!result)
                    return undefined;
                return new Uri(result);
            };
            UriMapping.MappedUriProperty = DependencyProperty.Register("MappedUri", function () {
                return Uri;
            }, UriMapping);
            UriMapping.UriProperty = DependencyProperty.Register("Uri", function () {
                return Uri;
            }, UriMapping);
            return UriMapping;
        })(Fayde.DependencyObject);
        Navigation.UriMapping = UriMapping;
        Fayde.RegisterType(UriMapping, {
            Name: "UriMapping",
            Namespace: "Fayde.Navigation",
            XmlNamespace: Fayde.XMLNS
        });

        function createUriMatcher(matchTemplate, outputTemplate, actual) {
            var i = 0;
            var j = 0;
            function collectTokenInfo() {
                var tokenInfo = {
                    Identifier: null,
                    Terminator: null,
                    Value: null
                };
                var index = matchTemplate.indexOf('}', i);
                if (index < 0)
                    throw new InvalidOperationException("Invalid Uri format. '{' needs a closing '}'.");
                var len = index - i + 1;
                tokenInfo.Identifier = matchTemplate.substr(i + 1, len - 2);
                if (!tokenInfo.Identifier)
                    throw new InvalidOperationException("Invalid Uri format. '{}' must contain an identifier.");
                i += len;
                tokenInfo.Terminator = (i + 1) < matchTemplate.length ? matchTemplate[i] : '\0';
                return tokenInfo;
            }
            function findTokenValue(tokenInfo) {
                if (tokenInfo.Terminator === '\0') {
                    tokenInfo.Value = actual.substr(j);
                    if (tokenInfo.Value)
                        j += tokenInfo.Value.length;
                    return tokenInfo;
                }
                tokenInfo.Value = "";
                while (j < actual.length) {
                    if (actual[j] == tokenInfo.Terminator)
                        return;
                    tokenInfo.Value += actual[j];
                    j++;
                }
            }
            function buildMappedUri(tokens) {
                var cur = outputTemplate;
                var len = tokens.length;
                var token;
                for (var a = 0; a < len; a++) {
                    token = tokens[a];
                    cur = cur.replace("{" + token.Identifier + "}", token.Value);
                }
                return cur;
            }
            return {
                Match: function () {
                    var tokens = [];
                    if (matchTemplate.length === 0) {
                        if (actual.length === 0)
                            return buildMappedUri(tokens);
                        return null;
                    }
                    while (i < matchTemplate.length && j < actual.length) {
                        if (matchTemplate[i] === "{") {
                            tokens.push(findTokenValue(collectTokenInfo()));
                            continue;
                        }
                        if (matchTemplate[i] !== actual[i])
                            return null;
                        i++;
                        j++;
                    }
                    return buildMappedUri(tokens);
                }
            };
        }
    })(Fayde.Navigation || (Fayde.Navigation = {}));
    var Navigation = Fayde.Navigation;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Xaml) {
        var Namespace = (function (_super) {
            __extends(Namespace, _super);
            function Namespace() {
                _super.call(this);
                Namespace.SourcesProperty.Initialize(this);
            }
            Namespace.prototype.RegisterSource = function () {
                if (this.Source)
                    this._Resource = Fayde.Xaml.RegisterRootResource(this.Source.toString(), this.Name);
                var enumerator = this.Sources.GetEnumerator();
                while (enumerator.MoveNext()) {
                    enumerator.Current.RegisterSource(this.Name);
                }
            };
            Namespace.prototype.LoadAsync = function (onLoaded) {
                var _this = this;
                var loaders = [];
                if (this._Resource)
                    loaders.push(this._Resource);
                var enumerator = this.Sources.GetEnumerator();
                while (enumerator.MoveNext()) {
                    loaders.push(enumerator.Current);
                }
                Fayde.Runtime.LoadBatchAsync(loaders, function () {
                    return onLoaded(_this);
                });
            };
            Namespace.NameProperty = DependencyProperty.Register("Name", function () {
                return String;
            }, Namespace);
            Namespace.SourceProperty = DependencyProperty.Register("Source", function () {
                return Uri;
            }, Namespace);
            Namespace.SourcesProperty = DependencyProperty.RegisterImmutable("Sources", function () {
                return Fayde.XamlObjectCollection;
            }, Namespace);

            Namespace.Annotations = { ContentProperty: Namespace.SourcesProperty };
            return Namespace;
        })(Fayde.DependencyObject);
        Xaml.Namespace = Namespace;
        Fayde.RegisterType(Namespace, {
            Name: "Namespace",
            Namespace: "Fayde.Xaml",
            XmlNamespace: Fayde.XMLNS
        });
        var Source = (function (_super) {
            __extends(Source, _super);
            function Source() {
                _super.apply(this, arguments);
            }
            Source.prototype.RegisterSource = function (namespace) {
                if (this.Source)
                    this._Resource = Fayde.Xaml.RegisterResource(Xaml.ResourceType.Script, this.Source.toString(), namespace, this.Name);
            };
            Source.prototype.LoadAsync = function (onLoaded) {
                var _this = this;
                if (!this._Resource)
                    onLoaded(this);
else
                    this._Resource.LoadAsync(function () {
                        return onLoaded(_this);
                    });
            };
            Source.NameProperty = DependencyProperty.Register("Name", function () {
                return String;
            }, Source);
            Source.SourceProperty = DependencyProperty.Register("Source", function () {
                return Uri;
            }, Source);
            return Source;
        })(Fayde.DependencyObject);
        Xaml.Source = Source;
        Fayde.RegisterType(Source, {
            Name: "Source",
            Namespace: "Fayde.Xaml",
            XmlNamespace: Fayde.XMLNS
        });
        var XamlSource = (function (_super) {
            __extends(XamlSource, _super);
            function XamlSource() {
                _super.call(this);
                XamlSource.CodeSourcesProperty.Initialize(this);
            }
            XamlSource.prototype.RegisterSource = function (namespace) {
                if (this.Source)
                    (this)._Resource = Fayde.Xaml.RegisterResource(Xaml.ResourceType.Xaml, this.Source.toString(), namespace, this.Name);
                var enumerator = this.CodeSources.GetEnumerator();
                while (enumerator.MoveNext()) {
                    enumerator.Current.RegisterSource(namespace);
                }
            };
            XamlSource.prototype.LoadAsync = function (onLoaded) {
                var _this = this;
                var loaders = [];
                var res = (this)._Resource;
                if (res)
                    loaders.push(res);
                var enumerator = this.CodeSources.GetEnumerator();
                while (enumerator.MoveNext()) {
                    loaders.push(enumerator.Current);
                }
                Fayde.Runtime.LoadBatchAsync(loaders, function () {
                    return onLoaded(_this);
                });
            };
            XamlSource.CodeSourcesProperty = DependencyProperty.RegisterImmutable("CodeSources", function () {
                return Fayde.XamlObjectCollection;
            }, XamlSource);

            XamlSource.Annotations = { ContentProperty: XamlSource.CodeSourcesProperty };
            return XamlSource;
        })(Source);
        Xaml.XamlSource = XamlSource;
        Fayde.RegisterType(XamlSource, {
            Name: "XamlSource",
            Namespace: "Fayde.Xaml",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Xaml || (Fayde.Xaml = {}));
    var Xaml = Fayde.Xaml;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ColumnDefinition = (function (_super) {
            __extends(ColumnDefinition, _super);
            function ColumnDefinition() {
                _super.apply(this, arguments);
            }
            ColumnDefinition.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            ColumnDefinition.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            ColumnDefinition.prototype._WidthsChanged = function (args) {
                var listener = this._Listener;
                if (listener)
                    listener.ColumnDefinitionChanged(this);
            };
            ColumnDefinition.WidthProperty = DependencyProperty.RegisterCore("Width", function () {
                return Controls.GridLength;
            }, ColumnDefinition, undefined, function (d, args) {
                return (d)._WidthsChanged(args);
            });
            ColumnDefinition.MaxWidthProperty = DependencyProperty.RegisterCore("MaxWidth", function () {
                return Number;
            }, ColumnDefinition, Number.POSITIVE_INFINITY, function (d, args) {
                return (d)._WidthsChanged(args);
            });
            ColumnDefinition.MinWidthProperty = DependencyProperty.RegisterCore("MinWidth", function () {
                return Number;
            }, ColumnDefinition, 0.0, function (d, args) {
                return (d)._WidthsChanged(args);
            });
            ColumnDefinition.ActualWidthProperty = DependencyProperty.RegisterReadOnlyCore("ActualWidth", function () {
                return Number;
            }, ColumnDefinition, 0.0);
            return ColumnDefinition;
        })(Fayde.DependencyObject);
        Controls.ColumnDefinition = ColumnDefinition;
        Fayde.RegisterType(ColumnDefinition, {
            Name: "ColumnDefinition",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });

        var ColumnDefinitionCollection = (function (_super) {
            __extends(ColumnDefinitionCollection, _super);
            function ColumnDefinitionCollection() {
                _super.apply(this, arguments);
            }
            ColumnDefinitionCollection.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            ColumnDefinitionCollection.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            ColumnDefinitionCollection.prototype.ColumnDefinitionChanged = function (colDefinition) {
                var listener = this._Listener;
                if (listener)
                    listener.ColumnDefinitionsChanged(this);
            };
            ColumnDefinitionCollection.prototype.AddingToCollection = function (value, error) {
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                value.Listen(this);
                var listener = this._Listener;
                if (listener)
                    listener.ColumnDefinitionsChanged(this);
                return true;
            };
            ColumnDefinitionCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                value.Unlisten(this);
                var listener = this._Listener;
                if (listener)
                    listener.ColumnDefinitionsChanged(this);
            };
            return ColumnDefinitionCollection;
        })(Fayde.XamlObjectCollection);
        Controls.ColumnDefinitionCollection = ColumnDefinitionCollection;
        Fayde.RegisterType(ColumnDefinitionCollection, {
            Name: "ColumnDefinitionCollection",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ItemCollection = (function (_super) {
            __extends(ItemCollection, _super);
            function ItemCollection() {
                _super.apply(this, arguments);
                this.ItemsChanged = new MulticastEvent();
                this.IsReadOnly = false;
            }
            ItemCollection.prototype.ToArray = function () {
                return this._ht.slice(0);
            };
            Object.defineProperty(ItemCollection.prototype, "Count", {
                get: function () {
                    return this._ht.length;
                },
                enumerable: true,
                configurable: true
            });

            ItemCollection.prototype.GetValueAt = function (index) {
                var ht = this._ht;
                if (index < 0 || index >= ht.length)
                    throw new IndexOutOfRangeException(index);
                return ht[index];
            };
            ItemCollection.prototype.GetRange = function (startIndex, endIndex) {
                return this._ht.slice(startIndex, endIndex);
            };
            ItemCollection.prototype.SetValueAt = function (index, value) {
                this._ValidateReadOnly();
                this.SetValueAtImpl(index, value);
                return true;
            };
            ItemCollection.prototype.SetValueAtImpl = function (index, value) {
                var ht = this._ht;
                if (index < 0 || index >= ht.length)
                    throw new IndexOutOfRangeException(index);
                var oldValue = ht[index];
                ht[index] = value;
                this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Replace(value, oldValue, index));
            };
            ItemCollection.prototype.Add = function (value) {
                this._ValidateReadOnly();
                if (value == null)
                    throw new ArgumentException("value");
                return this.AddImpl(value);
            };
            ItemCollection.prototype.AddImpl = function (value) {
                var index = this._ht.push(value) - 1;
                this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Add(value, index));
                return index;
            };
            ItemCollection.prototype.AddRange = function (values) {
                this._ValidateReadOnly();
                if (!values)
                    return;
                for (var i = 0; i < values.length; i++) {
                    if (values[i] == null)
                        throw new ArgumentException("value");
                }
                this.AddRangeImpl(values);
            };
            ItemCollection.prototype.AddRangeImpl = function (values) {
                var index = this._ht.length;
                this._ht = this._ht.concat(values);
                this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.AddRange(values, index));
            };
            ItemCollection.prototype.Insert = function (index, value) {
                this._ValidateReadOnly();
                if (value == null)
                    throw new ArgumentException("value");
                this.InsertImpl(index, value);
                return true;
            };
            ItemCollection.prototype.InsertImpl = function (index, value) {
                var ht = this._ht;
                if (index < 0 || index > ht.length)
                    throw new IndexOutOfRangeException(index);
                if (index >= ht.length)
                    ht.push(value);
else
                    ht.splice(index, 0, value);
                this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Add(value, index));
            };
            ItemCollection.prototype.IndexOf = function (value) {
                return this._ht.indexOf(value);
            };
            ItemCollection.prototype.Contains = function (value) {
                return this._ht.indexOf(value) > -1;
            };
            ItemCollection.prototype.Remove = function (value) {
                this._ValidateReadOnly();
                this.RemoveImpl(value);
                return true;
            };
            ItemCollection.prototype.RemoveImpl = function (value) {
                var index = this._ht.indexOf(value);
                if (index < 0)
                    return;
                this._ht.splice(index, 1);
                this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Remove(value, index));
            };
            ItemCollection.prototype.RemoveAt = function (index) {
                this._ValidateReadOnly();
                if (index < 0 || index >= this._ht.length)
                    throw new IndexOutOfRangeException(index);
                this.RemoveAtImpl(index);
                return true;
            };
            ItemCollection.prototype.RemoveAtImpl = function (index) {
                var item = this._ht.splice(index, 1)[0];
                this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Remove(item, index));
            };
            ItemCollection.prototype.Clear = function () {
                this._ValidateReadOnly();
                this.ClearImpl();
                return true;
            };
            ItemCollection.prototype.ClearImpl = function () {
                this._ht = [];
                this.ItemsChanged.Raise(this, Fayde.Collections.NotifyCollectionChangedEventArgs.Reset());
            };
            ItemCollection.prototype._ValidateReadOnly = function () {
                if (this.IsReadOnly)
                    throw new InvalidOperationException("The collection is readonly.");
            };
            return ItemCollection;
        })(Fayde.XamlObjectCollection);
        Controls.ItemCollection = ItemCollection;
        Fayde.RegisterType(ItemCollection, {
            Name: "ItemCollection",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var RowDefinition = (function (_super) {
            __extends(RowDefinition, _super);
            function RowDefinition() {
                _super.apply(this, arguments);
            }
            RowDefinition.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            RowDefinition.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            RowDefinition.prototype._HeightsChanged = function (args) {
                var listener = this._Listener;
                if (listener)
                    listener.RowDefinitionChanged(this);
            };
            RowDefinition.HeightProperty = DependencyProperty.RegisterCore("Height", function () {
                return Controls.GridLength;
            }, RowDefinition, undefined, function (d, args) {
                return (d)._HeightsChanged(args);
            });
            RowDefinition.MaxHeightProperty = DependencyProperty.RegisterCore("MaxHeight", function () {
                return Number;
            }, RowDefinition, Number.POSITIVE_INFINITY, function (d, args) {
                return (d)._HeightsChanged(args);
            });
            RowDefinition.MinHeightProperty = DependencyProperty.RegisterCore("MinHeight", function () {
                return Number;
            }, RowDefinition, 0.0, function (d, args) {
                return (d)._HeightsChanged(args);
            });
            RowDefinition.ActualHeightProperty = DependencyProperty.RegisterReadOnlyCore("ActualHeight", function () {
                return Number;
            }, RowDefinition, 0.0);
            return RowDefinition;
        })(Fayde.DependencyObject);
        Controls.RowDefinition = RowDefinition;
        Fayde.RegisterType(RowDefinition, {
            Name: "RowDefinition",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });

        var RowDefinitionCollection = (function (_super) {
            __extends(RowDefinitionCollection, _super);
            function RowDefinitionCollection() {
                _super.apply(this, arguments);
            }
            RowDefinitionCollection.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            RowDefinitionCollection.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            RowDefinitionCollection.prototype.RowDefinitionChanged = function (rowDefinition) {
                var listener = this._Listener;
                if (listener)
                    listener.RowDefinitionsChanged(this);
            };
            RowDefinitionCollection.prototype.AddingToCollection = function (value, error) {
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                value.Listen(this);
                var listener = this._Listener;
                if (listener)
                    listener.RowDefinitionsChanged(this);
                return true;
            };
            RowDefinitionCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                value.Unlisten(this);
                var listener = this._Listener;
                if (listener)
                    listener.RowDefinitionsChanged(this);
            };
            return RowDefinitionCollection;
        })(Fayde.XamlObjectCollection);
        Controls.RowDefinitionCollection = RowDefinitionCollection;
        Fayde.RegisterType(RowDefinitionCollection, {
            Name: "RowDefinitionCollection",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ToolTipService = (function () {
            function ToolTipService() {
            }
            ToolTipService.ToolTipProperty = DependencyProperty.RegisterAttached("ToolTip", function () {
                return Fayde.DependencyObject;
            }, ToolTipService);
            ToolTipService.PlacementTargetProperty = DependencyProperty.RegisterAttached("PlacementTarget", function () {
                return Fayde.UIElement;
            }, ToolTipService);
            return ToolTipService;
        })();
        Controls.ToolTipService = ToolTipService;
        Fayde.RegisterType(ToolTipService, {
            Name: "ToolTipService",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var DragCompletedEventArgs = (function (_super) {
                __extends(DragCompletedEventArgs, _super);
                function DragCompletedEventArgs(horizontal, vertical, canceled) {
                    _super.call(this);
                    Object.defineProperty(this, "HorizontalChange", { value: horizontal, writable: false });
                    Object.defineProperty(this, "VerticalChange", { value: vertical, writable: false });
                    Object.defineProperty(this, "Canceled", { value: canceled, writable: false });
                }
                return DragCompletedEventArgs;
            })(Fayde.RoutedEventArgs);
            Primitives.DragCompletedEventArgs = DragCompletedEventArgs;
            Fayde.RegisterType(DragCompletedEventArgs, {
                Name: "DragCompletedEventArgs",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
            var DragDeltaEventArgs = (function (_super) {
                __extends(DragDeltaEventArgs, _super);
                function DragDeltaEventArgs(horizontal, vertical) {
                    _super.call(this);
                    Object.defineProperty(this, "HorizontalChange", { value: horizontal, writable: false });
                    Object.defineProperty(this, "VerticalChange", { value: vertical, writable: false });
                }
                return DragDeltaEventArgs;
            })(Fayde.RoutedEventArgs);
            Primitives.DragDeltaEventArgs = DragDeltaEventArgs;
            Fayde.RegisterType(DragDeltaEventArgs, {
                Name: "DragDeltaEventArgs",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
            var DragStartedEventArgs = (function (_super) {
                __extends(DragStartedEventArgs, _super);
                function DragStartedEventArgs(horizontal, vertical) {
                    _super.call(this);
                    Object.defineProperty(this, "HorizontalOffset", { value: horizontal, writable: false });
                    Object.defineProperty(this, "VerticalOffset", { value: vertical, writable: false });
                }
                return DragStartedEventArgs;
            })(Fayde.RoutedEventArgs);
            Primitives.DragStartedEventArgs = DragStartedEventArgs;
            Fayde.RegisterType(DragStartedEventArgs, {
                Name: "DragStartedEventArgs",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            (function (ScrollEventType) {
                ScrollEventType[ScrollEventType["SmallDecrement"] = 0] = "SmallDecrement";
                ScrollEventType[ScrollEventType["SmallIncrement"] = 1] = "SmallIncrement";
                ScrollEventType[ScrollEventType["LargeDecrement"] = 2] = "LargeDecrement";
                ScrollEventType[ScrollEventType["LargeIncrement"] = 3] = "LargeIncrement";
                ScrollEventType[ScrollEventType["ThumbPosition"] = 4] = "ThumbPosition";
                ScrollEventType[ScrollEventType["ThumbTrack"] = 5] = "ThumbTrack";
                ScrollEventType[ScrollEventType["First"] = 6] = "First";
                ScrollEventType[ScrollEventType["Last"] = 7] = "Last";
                ScrollEventType[ScrollEventType["EndScroll"] = 8] = "EndScroll";
            })(Primitives.ScrollEventType || (Primitives.ScrollEventType = {}));
            var ScrollEventType = Primitives.ScrollEventType;
            var ScrollEventArgs = (function (_super) {
                __extends(ScrollEventArgs, _super);
                function ScrollEventArgs(scrollEventType, value) {
                    _super.call(this);
                    Object.defineProperty(this, "ScrollEventType", { value: scrollEventType, writable: false });
                    Object.defineProperty(this, "Value", { value: value, writable: false });
                }
                return ScrollEventArgs;
            })(Fayde.RoutedEventArgs);
            Primitives.ScrollEventArgs = ScrollEventArgs;
            Fayde.RegisterType(ScrollEventArgs, {
                Name: "ScrollEventArgs",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var SelectionChangedEventArgs = (function (_super) {
                __extends(SelectionChangedEventArgs, _super);
                function SelectionChangedEventArgs(oldValues, newValues) {
                    _super.call(this);
                    Object.defineProperty(this, "OldValues", { value: oldValues.slice(0), writable: false });
                    Object.defineProperty(this, "NewValues", { value: newValues.slice(0), writable: false });
                }
                return SelectionChangedEventArgs;
            })(Fayde.RoutedEventArgs);
            Primitives.SelectionChangedEventArgs = SelectionChangedEventArgs;
            Fayde.RegisterType(SelectionChangedEventArgs, {
                Name: "SelectionChangedEventArgs",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var UINode = (function (_super) {
        __extends(UINode, _super);
        function UINode(xobj) {
            _super.call(this, xobj);
            this.IsTopLevel = false;
            this.IsMouseOver = false;
            this.IsLoaded = false;
            this.LayoutUpdater = new Fayde.LayoutUpdater(this);
            this.LayoutUpdater.SetContainerMode(false);
        }
        UINode.prototype.SetSurfaceFromVisualParent = function () {
            if (this._Surface)
                return this.VisualParentNode;
            var vpNode = this.VisualParentNode;
            if (vpNode)
                this.SetSurface(vpNode._Surface);
            return vpNode;
        };
        UINode.prototype.SetSurface = function (surface) {
            this._Surface = surface;
            this.LayoutUpdater.Surface = surface;
        };

        UINode.prototype.GetVisualRoot = function () {
            var curNode = this;
            var vpNode;
            while (vpNode = curNode.VisualParentNode) {
                curNode = vpNode;
            }
            return curNode;
        };
        UINode.prototype.GetInheritedEnumerator = function () {
            return this.GetVisualTreeEnumerator(Fayde.VisualTreeDirection.Logical);
        };
        UINode.prototype.OnIsAttachedChanged = function (newIsAttached) {
            var vpNode = null;
            if (newIsAttached)
                vpNode = this.SetSurfaceFromVisualParent();
            this.LayoutUpdater.OnIsAttachedChanged(newIsAttached, vpNode);
            _super.prototype.OnIsAttachedChanged.call(this, newIsAttached);
        };

        UINode.prototype.SetIsLoaded = function (value) {
        };
        UINode.prototype.OnVisualChildAttached = function (uie) {
            var lu = this.LayoutUpdater;
            lu.UpdateBounds(true);
            lu.InvalidateMeasure();
            lu.PreviousConstraint = undefined;
            var un = uie.XamlNode;
            un.SetVisualParentNode(this);
            Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(this.XObject, un);
            un.LayoutUpdater.OnAddedToTree();
        };
        UINode.prototype.OnVisualChildDetached = function (uie) {
            var lu = this.LayoutUpdater;
            var un = uie.XamlNode;
            lu.Invalidate(un.LayoutUpdater.SurfaceBoundsWithChildren);
            lu.InvalidateMeasure();
            un.SetVisualParentNode(null);
            un.LayoutUpdater.OnRemovedFromTree();
            Fayde.Providers.InheritedStore.ClearInheritedOnRemove(this.XObject, un);
        };
        UINode.prototype.SetVisualParentNode = function (visualParentNode) {
            if (this.VisualParentNode === visualParentNode)
                return;
            this.VisualParentNode = visualParentNode;
            if (visualParentNode) {
                this.SetSurface(visualParentNode._Surface);
            } else {
                this.SetSurface(null);
            }
        };
        UINode.prototype.Focus = function (recurse) {
            return false;
        };
        UINode.prototype._EmitFocusChange = function (type) {
            if (type === "got")
                this._EmitGotFocus();
else if (type === "lost")
                this._EmitLostFocus();
        };
        UINode.prototype._EmitLostFocus = function () {
            var e = new Fayde.RoutedEventArgs();
            var x = this.XObject;
            x.OnLostFocus(e);
            x.LostFocus.Raise(x, e);
        };
        UINode.prototype._EmitGotFocus = function () {
            var e = new Fayde.RoutedEventArgs();
            var x = this.XObject;
            x.OnGotFocus(e);
            x.GotFocus.Raise(x, e);
        };
        UINode.prototype._EmitKeyDown = function (args) {
            var x = this.XObject;
            x.OnKeyDown(args);
            x.KeyDown.Raise(x, args);
        };
        UINode.prototype._EmitKeyUp = function (args) {
            var x = this.XObject;
            x.OnKeyUp(args);
            x.KeyUp.Raise(x, args);
        };
        UINode.prototype._EmitLostMouseCapture = function (pos) {
            var x = this.XObject;
            var e = new Fayde.Input.MouseEventArgs(pos);
            x.OnLostMouseCapture(e);
            x.LostMouseCapture.Raise(x, e);
        };
        UINode.prototype._EmitMouseEvent = function (type, isLeftButton, isRightButton, args) {
            var x = this.XObject;
            switch (type) {
                case InputType.MouseUp:
                    if (isLeftButton) {
                        x.OnMouseLeftButtonUp(args);
                        x.MouseLeftButtonUp.Raise(x, args);
                    } else if (isRightButton) {
                        x.OnMouseRightButtonUp(args);
                        x.MouseRightButtonUp.Raise(x, args);
                    }
                    break;
                case InputType.MouseDown:
                    if (isLeftButton) {
                        x.OnMouseLeftButtonDown(args);
                        x.MouseLeftButtonDown.Raise(x, args);
                    } else if (isRightButton) {
                        x.OnMouseRightButtonDown(args);
                        x.MouseRightButtonDown.Raise(x, args);
                    }
                    break;
                case InputType.MouseLeave:
                    this.IsMouseOver = false;
                    x.OnMouseLeave(args);
                    x.MouseLeave.Raise(x, args);
                    break;
                case InputType.MouseEnter:
                    this.IsMouseOver = true;
                    x.OnMouseEnter(args);
                    x.MouseEnter.Raise(x, args);
                    break;
                case InputType.MouseMove:
                    x.OnMouseMove(args);
                    x.MouseMove.Raise(x, args);
                    break;
                case InputType.MouseWheel:
                    x.OnMouseWheel(args);
                    x.MouseWheel.Raise(x, args);
                    break;
                default:
                    return false;
            }
            return args.Handled;
        };
        UINode.prototype.CanCaptureMouse = function () {
            return true;
        };
        UINode.prototype.CaptureMouse = function () {
            if (!this.IsAttached)
                return false;
            this._Surface.SetMouseCapture(this);
            return true;
        };
        UINode.prototype.ReleaseMouseCapture = function () {
            if (!this.IsAttached)
                return;
            this._Surface.ReleaseMouseCapture(this);
        };
        UINode.prototype._ResortChildrenByZIndex = function () {
            Warn("_Dirty.ChildrenZIndices only applies to Panel subclasses");
        };
        UINode.prototype.InvalidateParent = function (r) {
            var vpNode = this.VisualParentNode;
            if (vpNode)
                vpNode.LayoutUpdater.Invalidate(r);
else if (this.IsAttached)
                this._Surface._Invalidate(r);
        };
        UINode.prototype.InvalidateClip = function (oldClip, newClip) {
            var lu = this.LayoutUpdater;
            if (!newClip)
                rect.clear(lu.ClipBounds);
else
                rect.copyTo(newClip.GetBounds(), lu.ClipBounds);
            this.InvalidateParent(lu.SurfaceBoundsWithChildren);
            lu.UpdateBounds(true);
            lu.UpdateClip();
        };
        UINode.prototype.InvalidateEffect = function (oldEffect, newEffect) {
            var lu = this.LayoutUpdater;
            var changed = (newEffect) ? newEffect.GetPadding(lu.EffectPadding) : false;
            this.InvalidateParent(lu.SurfaceBoundsWithChildren);
            if (changed)
                lu.UpdateBounds();
            lu.ComputeComposite();
            if (oldEffect !== newEffect && this.IsAttached)
                this._Surface._AddDirtyElement(this.LayoutUpdater, _Dirty.Transform);
        };
        UINode.prototype.InvalidateOpacity = function () {
            var lu = this.LayoutUpdater;
            lu.UpdateTotalRenderVisibility();
            this.InvalidateParent(lu.SurfaceBoundsWithChildren);
        };
        UINode.prototype.InvalidateVisibility = function (newVisibility) {
            var lu = this.LayoutUpdater;
            if (newVisibility === Fayde.Visibility.Visible)
                lu.Flags |= Fayde.UIElementFlags.RenderVisible;
else
                lu.Flags &= ~Fayde.UIElementFlags.RenderVisible;
            lu.UpdateTotalRenderVisibility();
            this.InvalidateParent(lu.SurfaceBoundsWithChildren);
            lu.InvalidateMeasure();
            var vpNode = this.VisualParentNode;
            if (vpNode)
                vpNode.LayoutUpdater.InvalidateMeasure();
            var surface = this._Surface;
            if (surface)
                surface._RemoveFocusFrom(lu);
        };
        UINode.prototype.IsAncestorOf = function (uin) {
            var vpNode = uin;
            while (vpNode && vpNode !== this)
                vpNode = vpNode.VisualParentNode;
            return vpNode === this;
        };
        UINode.prototype.TransformToVisual = function (uin) {
            if (uin && !uin.IsAttached)
                throw new ArgumentException("UIElement not attached.");
            var curNode = this;
            var ok = false;
            var surface = this._Surface;
            if (this.IsAttached) {
                while (curNode) {
                    if (curNode.IsTopLevel)
                        ok = true;
                    curNode = curNode.VisualParentNode;
                }
            }
            if (!ok)
                throw new ArgumentException("UIElement not attached.");
            if (uin && !uin.IsTopLevel) {
                ok = false;
                curNode = uin.VisualParentNode;
                if (curNode && uin.IsAttached) {
                    while (curNode) {
                        if (curNode.IsTopLevel)
                            ok = true;
                        curNode.VisualParentNode;
                    }
                }
                if (!ok)
                    throw new ArgumentException("UIElement not attached.");
            }
            return this.LayoutUpdater.TransformToVisual(uin);
        };
        return UINode;
    })(Fayde.DONode);
    Fayde.UINode = UINode;
    Fayde.RegisterType(UINode, {
        Name: "UINode",
        Namespace: "Fayde"
    });
    var UIElement = (function (_super) {
        __extends(UIElement, _super);
        function UIElement() {
            _super.apply(this, arguments);
            this._ClipListener = null;
            this._EffectListener = null;
            this.LostFocus = new Fayde.RoutedEvent();
            this.GotFocus = new Fayde.RoutedEvent();
            this.LostMouseCapture = new Fayde.RoutedEvent();
            this.KeyDown = new Fayde.RoutedEvent();
            this.KeyUp = new Fayde.RoutedEvent();
            this.MouseLeftButtonUp = new Fayde.RoutedEvent();
            this.MouseRightButtonUp = new Fayde.RoutedEvent();
            this.MouseLeftButtonDown = new Fayde.RoutedEvent();
            this.MouseRightButtonDown = new Fayde.RoutedEvent();
            this.MouseLeave = new Fayde.RoutedEvent();
            this.MouseEnter = new Fayde.RoutedEvent();
            this.MouseMove = new Fayde.RoutedEvent();
            this.MouseWheel = new Fayde.RoutedEvent();
        }
        UIElement.prototype.CreateNode = function () {
            return new UINode(this);
        };

        UIElement.prototype.IsInheritable = function (propd) {
            return propd === UIElement.UseLayoutRoundingProperty;
        };
        Object.defineProperty(UIElement.prototype, "IsMouseOver", {
            get: function () {
                return this.XamlNode.IsMouseOver;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIElement.prototype, "DesiredSize", {
            get: function () {
                return this.XamlNode.LayoutUpdater.DesiredSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIElement.prototype, "RenderSize", {
            get: function () {
                return this.XamlNode.LayoutUpdater.RenderSize;
            },
            enumerable: true,
            configurable: true
        });

        UIElement.prototype.Focus = function () {
            return this.XamlNode.Focus();
        };
        UIElement.prototype.CaptureMouse = function () {
            return this.XamlNode.CaptureMouse();
        };
        UIElement.prototype.ReleaseMouseCapture = function () {
            this.XamlNode.ReleaseMouseCapture();
        };
        UIElement.prototype.IsAncestorOf = function (uie) {
            if (!uie)
                return false;
            return this.XamlNode.IsAncestorOf(uie.XamlNode);
        };
        UIElement.prototype.TransformToVisual = function (uie) {
            var uin = (uie) ? uie.XamlNode : null;
            return this.XamlNode.TransformToVisual(uin);
        };
        UIElement.prototype.InvalidateMeasure = function () {
            this.XamlNode.LayoutUpdater.InvalidateMeasure();
        };
        UIElement.prototype.Measure = function (availableSize) {
            var error = new BError();
            this.XamlNode.LayoutUpdater._Measure(availableSize, error);
            if (error.Message)
                error.ThrowException();
        };
        UIElement.prototype.InvalidateArrange = function () {
            this.XamlNode.LayoutUpdater.InvalidateArrange();
        };
        UIElement.prototype.Arrange = function (finalRect) {
            var error = new BError();
            this.XamlNode.LayoutUpdater._Arrange(finalRect, error);
            if (error.Message)
                error.ThrowException();
        };

        UIElement.prototype.OnGotFocus = function (e) {
        };
        UIElement.prototype.OnLostFocus = function (e) {
        };
        UIElement.prototype.OnLostMouseCapture = function (e) {
        };
        UIElement.prototype.OnKeyDown = function (e) {
        };
        UIElement.prototype.OnKeyUp = function (e) {
        };
        UIElement.prototype.OnMouseEnter = function (e) {
        };
        UIElement.prototype.OnMouseLeave = function (e) {
        };
        UIElement.prototype.OnMouseLeftButtonDown = function (e) {
        };
        UIElement.prototype.OnMouseLeftButtonUp = function (e) {
        };
        UIElement.prototype.OnMouseMove = function (e) {
        };
        UIElement.prototype.OnMouseRightButtonDown = function (e) {
        };
        UIElement.prototype.OnMouseRightButtonUp = function (e) {
        };
        UIElement.prototype.OnMouseWheel = function (e) {
        };
        UIElement.prototype._ClipChanged = function (args) {
            var _this = this;
            var oldClip = args.OldValue;
            var newClip = args.NewValue;
            this.XamlNode.InvalidateClip(oldClip, newClip);
            if (oldClip == newClip)
                return;
            if (oldClip)
                oldClip.Unlisten(this._ClipListener);
            if (newClip) {
                if (!this._ClipListener)
                    this._ClipListener = { GeometryChanged: function (newGeometry) {
                            return _this.XamlNode.InvalidateClip(newGeometry, newGeometry);
                        } };
                newClip.Listen(this._ClipListener);
            }
        };
        UIElement.prototype._EffectChanged = function (args) {
            var _this = this;
            var oldEffect = args.OldValue;
            var newEffect = args.NewValue;
            this.XamlNode.InvalidateEffect(oldEffect, newEffect);
            if (oldEffect === newEffect)
                return;
            if (oldEffect)
                oldEffect.Unlisten(this._EffectListener);
            if (newEffect) {
                if (!this._EffectListener)
                    this._EffectListener = { EffectChanged: function (effect) {
                            return _this.XamlNode.InvalidateEffect(effect, effect);
                        } };
                newEffect.Listen(this._EffectListener);
            }
        };
        UIElement.prototype._UseLayoutRoundingChanged = function (args) {
            var lu = this.XamlNode.LayoutUpdater;
            lu.InvalidateMeasure();
            lu.InvalidateArrange();
        };
        UIElement.prototype._IsHitTestVisibleChanged = function (args) {
            var lu = this.XamlNode.LayoutUpdater;
            if (args.NewValue === true) {
                lu.Flags |= Fayde.UIElementFlags.HitTestVisible;
            } else {
                lu.Flags &= ~Fayde.UIElementFlags.HitTestVisible;
            }
            lu.UpdateTotalHitTestVisibility();
        };
        UIElement.prototype._TriggersChanged = function (args) {
            var oldTriggers = args.OldValue;
            var newTriggers = args.NewValue;
            if (oldTriggers instanceof Fayde.TriggerCollection)
                oldTriggers.DetachTarget(this);
            if (newTriggers instanceof Fayde.TriggerCollection)
                newTriggers.AttachTarget(this);
        };
        UIElement.ClipProperty = DependencyProperty.RegisterCore("Clip", function () {
            return Fayde.Media.Geometry;
        }, UIElement, undefined, function (d, args) {
            return (d)._ClipChanged(args);
        });
        UIElement.EffectProperty = DependencyProperty.Register("Effect", function () {
            return Fayde.Media.Effects.Effect;
        }, UIElement, undefined, function (d, args) {
            return (d)._EffectChanged(args);
        });
        UIElement.IsHitTestVisibleProperty = DependencyProperty.RegisterCore("IsHitTestVisible", function () {
            return Boolean;
        }, UIElement, true, function (d, args) {
            return (d)._IsHitTestVisibleChanged(args);
        });
        UIElement.OpacityMaskProperty = DependencyProperty.RegisterCore("OpacityMask", function () {
            return Fayde.Media.Brush;
        }, UIElement);
        UIElement.OpacityProperty = DependencyProperty.RegisterCore("Opacity", function () {
            return Number;
        }, UIElement, 1.0, function (d, args) {
            return (d).XamlNode.InvalidateOpacity();
        });
        UIElement.ProjectionProperty = DependencyProperty.Register("Projection", function () {
            return Fayde.Media.Projection;
        }, UIElement, undefined, function (d, args) {
            return (d).XamlNode.LayoutUpdater.UpdateProjection();
        });
        UIElement.RenderTransformProperty = DependencyProperty.Register("RenderTransform", function () {
            return Fayde.Media.Transform;
        }, UIElement, undefined, function (d, args) {
            return (d).XamlNode.LayoutUpdater.UpdateTransform();
        });
        UIElement.RenderTransformOriginProperty = DependencyProperty.Register("RenderTransformOrigin", function () {
            return Point;
        }, UIElement, undefined, function (d, args) {
            return (d).XamlNode.LayoutUpdater.UpdateTransform();
        });
        UIElement.TagProperty = DependencyProperty.Register("Tag", function () {
            return Object;
        }, UIElement);
        UIElement.TriggersProperty = DependencyProperty.RegisterCore("Triggers", function () {
            return Fayde.TriggerCollection;
        }, UIElement, undefined, function (d, args) {
            return (d)._TriggersChanged(args);
        });
        UIElement.UseLayoutRoundingProperty = Fayde.InheritableOwner.UseLayoutRoundingProperty.ExtendTo(UIElement);
        UIElement.VisibilityProperty = DependencyProperty.RegisterCore("Visibility", function () {
            return new Enum(Fayde.Visibility);
        }, UIElement, Fayde.Visibility.Visible, function (d, args) {
            return (d).XamlNode.InvalidateVisibility(args.NewValue);
        });
        return UIElement;
    })(Fayde.DependencyObject);
    Fayde.UIElement = UIElement;
    Fayde.RegisterType(UIElement, {
        Name: "UIElement",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Documents) {
        var Block = (function (_super) {
            __extends(Block, _super);
            function Block() {
                _super.apply(this, arguments);
            }
            return Block;
        })(Documents.TextElement);
        Documents.Block = Block;
        Fayde.RegisterType(Block, {
            Name: "Block",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
        var BlockCollection = (function (_super) {
            __extends(BlockCollection, _super);
            function BlockCollection() {
                _super.apply(this, arguments);
            }
            BlockCollection.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            BlockCollection.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            BlockCollection.prototype.AddingToCollection = function (value, error) {
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                var listener = this._Listener;
                if (listener)
                    listener.BlocksChanged(value, true);
                return true;
            };
            BlockCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                var listener = this._Listener;
                if (listener)
                    listener.BlocksChanged(value, false);
            };
            return BlockCollection;
        })(Fayde.XamlObjectCollection);
        Documents.BlockCollection = BlockCollection;
        Fayde.RegisterType(BlockCollection, {
            Name: "BlockCollection",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Documents || (Fayde.Documents = {}));
    var Documents = Fayde.Documents;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Documents) {
        var Inline = (function (_super) {
            __extends(Inline, _super);
            function Inline() {
                _super.apply(this, arguments);
                this.Autogen = false;
            }
            return Inline;
        })(Documents.TextElement);
        Documents.Inline = Inline;
        Fayde.RegisterType(Inline, {
            Name: "Inline",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
        var InlineCollection = (function (_super) {
            __extends(InlineCollection, _super);
            function InlineCollection() {
                _super.apply(this, arguments);
            }
            InlineCollection.prototype.Listen = function (listener) {
                this._Listener = listener;
            };
            InlineCollection.prototype.Unlisten = function (listener) {
                if (this._Listener === listener)
                    this._Listener = null;
            };
            InlineCollection.prototype.AddingToCollection = function (value, error) {
                if (!_super.prototype.AddingToCollection.call(this, value, error))
                    return false;
                var listener = this._Listener;
                if (listener)
                    listener.InlinesChanged(value, true);
                return true;
            };
            InlineCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
                var listener = this._Listener;
                if (listener)
                    listener.InlinesChanged(value, false);
            };
            return InlineCollection;
        })(Fayde.XamlObjectCollection);
        Documents.InlineCollection = InlineCollection;
        Fayde.RegisterType(InlineCollection, {
            Name: "InlineCollection",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Documents || (Fayde.Documents = {}));
    var Documents = Fayde.Documents;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Documents) {
        var LineBreak = (function (_super) {
            __extends(LineBreak, _super);
            function LineBreak() {
                _super.apply(this, arguments);
            }
            return LineBreak;
        })(Documents.Inline);
        Documents.LineBreak = LineBreak;
        Fayde.RegisterType(LineBreak, {
            Name: "LineBreak",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Documents || (Fayde.Documents = {}));
    var Documents = Fayde.Documents;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Documents) {
        var Paragraph = (function (_super) {
            __extends(Paragraph, _super);
            function Paragraph() {
                _super.call(this);
                var coll = Paragraph.InlinesProperty.Initialize(this);
                coll.AttachTo(this);
                coll.Listen(this);
            }
            Paragraph.prototype.CreateNode = function () {
                return new Documents.TextElementNode(this, "Inlines");
            };

            Paragraph.prototype.InlinesChanged = function (newInline, isAdd) {
                if (isAdd)
                    Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(this, newInline.XamlNode);
            };
            Paragraph.InlinesProperty = DependencyProperty.RegisterImmutable("Inlines", function () {
                return Documents.InlineCollection;
            }, Paragraph);
            Paragraph.Annotations = { ContentProperty: Paragraph.InlinesProperty };
            return Paragraph;
        })(Documents.Block);
        Documents.Paragraph = Paragraph;
        Fayde.RegisterType(Paragraph, {
            Name: "Paragraph",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Documents || (Fayde.Documents = {}));
    var Documents = Fayde.Documents;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Documents) {
        var Run = (function (_super) {
            __extends(Run, _super);
            function Run() {
                _super.apply(this, arguments);
            }
            Run.prototype._SerializeText = function () {
                return this.Text;
            };
            Run.prototype.IsInheritable = function (propd) {
                if (propd === Run.FlowDirectionProperty)
                    return true;
                return (_super.prototype).IsInheritable.call(this, propd);
            };
            Run.FlowDirectionProperty = Fayde.InheritableOwner.FlowDirectionProperty.ExtendTo(Run);
            Run.TextProperty = DependencyProperty.Register("Text", function () {
                return String;
            }, Run);
            return Run;
        })(Documents.Inline);
        Documents.Run = Run;
        Fayde.RegisterType(Run, {
            Name: "Run",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Documents || (Fayde.Documents = {}));
    var Documents = Fayde.Documents;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Documents) {
        var Section = (function (_super) {
            __extends(Section, _super);
            function Section() {
                _super.call(this);
                var coll = Section.BlocksProperty.Initialize(this);
                coll.AttachTo(this);
                coll.Listen(this);
            }
            Section.prototype.CreateNode = function () {
                return new Documents.TextElementNode(this, "Blocks");
            };

            Section.prototype.BlocksChanged = function (newBlock, isAdd) {
                if (isAdd)
                    Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(this, newBlock.XamlNode);
            };
            Section.BlocksProperty = DependencyProperty.RegisterImmutable("Blocks", function () {
                return Documents.BlockCollection;
            }, Section);
            Section.Annotations = { ContentProperty: Section.BlocksProperty };
            return Section;
        })(Documents.TextElement);
        Documents.Section = Section;
        Fayde.RegisterType(Section, {
            Name: "Section",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Documents || (Fayde.Documents = {}));
    var Documents = Fayde.Documents;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Documents) {
        var Span = (function (_super) {
            __extends(Span, _super);
            function Span() {
                _super.call(this);
                var coll = Span.InlinesProperty.Initialize(this);
                coll.AttachTo(this);
                coll.Listen(this);
            }
            Span.prototype.CreateNode = function () {
                return new Documents.TextElementNode(this, "Inlines");
            };

            Span.prototype.InlinesChanged = function (newInline, isAdd) {
                if (isAdd)
                    Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(this, newInline.XamlNode);
            };
            Span.prototype._SerializeText = function () {
                var str = "";
                var enumerator = this.Inlines.GetEnumerator();
                while (enumerator.MoveNext()) {
                    str += (enumerator.Current)._SerializeText();
                }
                return str;
            };
            Span.InlinesProperty = DependencyProperty.RegisterImmutable("Inlines", function () {
                return Documents.InlineCollection;
            }, Span);
            Span.Annotations = { ContentProperty: Span.InlinesProperty };
            return Span;
        })(Documents.Inline);
        Documents.Span = Span;
        Fayde.RegisterType(Span, {
            Name: "Span",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Documents || (Fayde.Documents = {}));
    var Documents = Fayde.Documents;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Documents) {
        var Underline = (function (_super) {
            __extends(Underline, _super);
            function Underline() {
                _super.apply(this, arguments);
            }
            return Underline;
        })(Documents.Span);
        Documents.Underline = Underline;
        Fayde.RegisterType(Underline, {
            Name: "Underline",
            Namespace: "Fayde.Documents",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Documents || (Fayde.Documents = {}));
    var Documents = Fayde.Documents;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var Brush = (function (_super) {
            __extends(Brush, _super);
            function Brush() {
                _super.call(this);
                this._CachedBounds = null;
                this._CachedBrush = null;
                this._Listeners = [];
                Fayde.XamlNode.SetShareable(this.XamlNode);
            }
            Brush.prototype.SetupBrush = function (ctx, bounds) {
                if (this._CachedBrush && this._CachedBounds && rect.isEqual(this._CachedBounds, bounds))
                    return;
                this._CachedBounds = bounds;
                var transform = this.Transform;
                if (transform) {
                    var transformedBounds = transform.TransformBounds(bounds);
                    var raw = transform.Value._Raw;
                    var tmpBrush = this.CreateBrush(ctx, bounds);
                    var fillExtents = rect.copyTo(bounds);
                    rect.growBy(fillExtents, raw[2], raw[5], 0, 0);
                    var tmpCanvas = document.createElement("canvas");
                    tmpCanvas.width = Math.max(transformedBounds.Width, bounds.Width);
                    tmpCanvas.height = Math.max(transformedBounds.Height, bounds.Height);
                    var tmpCtx = tmpCanvas.getContext("2d");
                    tmpCtx.setTransform(raw[0], raw[1], raw[3], raw[4], raw[2], raw[5]);
                    tmpCtx.fillStyle = tmpBrush;
                    tmpCtx.fillRect(fillExtents.X, fillExtents.Y, fillExtents.Width, fillExtents.Height);
                    this._CachedBrush = ctx.createPattern(tmpCanvas, "no-repeat");
                } else {
                    this._CachedBrush = this.CreateBrush(ctx, bounds);
                }
            };
            Brush.prototype.CreateBrush = function (ctx, bounds) {
                return undefined;
            };
            Brush.prototype.ToHtml5Object = function () {
                return this._CachedBrush;
            };
            Brush.prototype.Listen = function (func) {
                var listeners = this._Listeners;
                var listener = {
                    Callback: func,
                    Detach: function () {
                        var index = listeners.indexOf(listener);
                        if (index > -1)
                            listeners.splice(index, 1);
                    }
                };
                listeners.push(listener);
                return listener;
            };
            Brush.prototype.InvalidateBrush = function () {
                this._CachedBrush = null;
                this._CachedBounds = null;
                var listeners = this._Listeners;
                var len = listeners.length;
                for (var i = 0; i < len; i++) {
                    listeners[i].Callback(this);
                }
            };

            Brush.prototype._TransformChanged = function (args) {
                var _this = this;
                if (this._TransformListener) {
                    this._TransformListener.Detach();
                    this._TransformListener = null;
                }
                var newt = args.NewValue;
                if (newt)
                    this._TransformListener = newt.Listen(function (source) {
                        return _this.InvalidateBrush();
                    });
                this.InvalidateBrush();
            };
            Brush.TransformProperty = DependencyProperty.RegisterCore("Transform", function () {
                return Fayde.Media.Transform;
            }, Brush, undefined, function (d, args) {
                return (d)._TransformChanged(args);
            });
            return Brush;
        })(Fayde.DependencyObject);
        Media.Brush = Brush;
        Fayde.RegisterType(Brush, {
            Name: "Brush",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var EllipseGeometry = (function (_super) {
            __extends(EllipseGeometry, _super);
            function EllipseGeometry() {
                _super.apply(this, arguments);
            }
            EllipseGeometry.prototype._Build = function () {
                var rx = this.RadiusX;
                var ry = this.RadiusY;
                var center = this.Center;
                var x = center ? center.X : 0.0;
                var y = center ? center.Y : 0.0;
                var p = new Fayde.Shapes.RawPath();
                p.Ellipse(x - rx, y - ry, rx * 2.0, ry * 2.0);
                return p;
            };
            EllipseGeometry.CenterProperty = DependencyProperty.Register("Center", function () {
                return Point;
            }, EllipseGeometry, undefined, function (d, args) {
                return (d)._InvalidateGeometry();
            });
            EllipseGeometry.RadiusXProperty = DependencyProperty.Register("RadiusX", function () {
                return Number;
            }, EllipseGeometry, 0.0, function (d, args) {
                return (d)._InvalidateGeometry();
            });
            EllipseGeometry.RadiusYProperty = DependencyProperty.Register("RadiusY", function () {
                return Number;
            }, EllipseGeometry, 0.0, function (d, args) {
                return (d)._InvalidateGeometry();
            });
            return EllipseGeometry;
        })(Media.Geometry);
        Media.EllipseGeometry = EllipseGeometry;
        Fayde.RegisterType(EllipseGeometry, {
            Name: "EllipseGeometry",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var GradientBrush = (function (_super) {
            __extends(GradientBrush, _super);
            function GradientBrush() {
                _super.call(this);
                var coll = GradientBrush.GradientStopsProperty.Initialize(this);
                coll.AttachTo(this);
                coll.Listen(this);
            }
            GradientBrush.prototype.CreateBrush = function (ctx, bounds) {
                var spread = this.SpreadMethod;
                switch (spread) {
                    case Media.GradientSpreadMethod.Pad:
                    default:
                        return this._CreatePad(ctx, bounds);
                    case Media.GradientSpreadMethod.Repeat:
                        return this._CreateRepeat(ctx, bounds);
                    case Media.GradientSpreadMethod.Reflect:
                        return this._CreateReflect(ctx, bounds);
                }
            };
            GradientBrush.prototype._CreatePad = function (ctx, bounds) {
            };
            GradientBrush.prototype._CreateRepeat = function (ctx, bounds) {
            };
            GradientBrush.prototype._CreateReflect = function (ctx, bounds) {
            };
            GradientBrush.prototype._GetMappingModeTransform = function (bounds) {
                if (!bounds)
                    return mat3.identity();
                if (this.MappingMode === Media.BrushMappingMode.Absolute)
                    return mat3.identity();
                return mat3.createScale(bounds.Width, bounds.Height);
            };
            GradientBrush.prototype.GradientStopsChanged = function (newGradientStops) {
                this.InvalidateBrush();
            };
            GradientBrush.GradientStopsProperty = DependencyProperty.RegisterImmutable("GradientStops", function () {
                return Media.GradientStopCollection;
            }, GradientBrush);
            GradientBrush.MappingModeProperty = DependencyProperty.Register("MappingMode", function () {
                return new Enum(Media.BrushMappingMode);
            }, GradientBrush, Media.BrushMappingMode.RelativeToBoundingBox, function (d, args) {
                return (d).InvalidateBrush();
            });
            GradientBrush.SpreadMethodProperty = DependencyProperty.Register("SpreadMethod", function () {
                return new Enum(Media.GradientSpreadMethod);
            }, GradientBrush, Media.GradientSpreadMethod.Pad, function (d, args) {
                return (d).InvalidateBrush();
            });

            GradientBrush.Annotations = { ContentProperty: GradientBrush.GradientStopsProperty };
            return GradientBrush;
        })(Media.Brush);
        Media.GradientBrush = GradientBrush;
        Fayde.RegisterType(GradientBrush, {
            Name: "GradientBrush",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var LinearGradientBrush = (function (_super) {
            __extends(LinearGradientBrush, _super);
            function LinearGradientBrush() {
                _super.apply(this, arguments);
            }
            LinearGradientBrush.prototype._CreatePad = function (ctx, bounds) {
                var data = this._GetPointData(bounds);
                var start = data.start;
                var end = data.end;
                var grd = ctx.createLinearGradient(start.X, start.Y, end.X, end.Y);
                var enumerator = this.GradientStops.GetEnumerator();
                while (enumerator.MoveNext()) {
                    var stop = enumerator.Current;
                    grd.addColorStop(stop.Offset, stop.Color.toString());
                }
                return grd;
            };
            LinearGradientBrush.prototype._CreateRepeat = function (ctx, bounds) {
                var data = this._GetPointData(bounds);
                var start = data.start;
                var end = data.end;
                var dir = { x: end.X - start.X, y: end.Y - start.Y };
                var first = { x: start.X, y: start.Y };
                var last = { x: end.X, y: end.Y };
                Media.GradientMetrics.Calculate(dir, first, last, bounds);
                var grd = ctx.createLinearGradient(first.x, first.y, last.x, last.y);
                var steps = (last.x - first.x) / dir.x;
                var curOffset = 0.0;
                for (var i = 0; i < steps; i++) {
                    var enumerator = this.GradientStops.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        var stop = enumerator.Current;
                        grd.addColorStop(curOffset + (stop.Offset / steps), stop.Color.toString());
                    }
                    curOffset += (1.0 / steps);
                }
                return grd;
            };
            LinearGradientBrush.prototype._CreateReflect = function (ctx, bounds) {
                var data = this._GetPointData(bounds);
                var start = data.start;
                var end = data.end;
            };
            LinearGradientBrush.prototype._GetPointData = function (bounds) {
                var transform = this._GetMappingModeTransform(bounds);
                var sp = this.StartPoint;
                var ep = this.EndPoint;
                var s = mat3.transformVec2(transform, vec2.createFrom(sp.X, sp.Y));
                var e = mat3.transformVec2(transform, vec2.createFrom(ep.X, ep.Y));
                return {
                    start: new Point(s[0], s[1]),
                    end: new Point(e[0], e[1])
                };
            };
            LinearGradientBrush.prototype.toString = function () {
                var enumerator = this.GradientStops.GetEnumerator();
                var ser = [];
                while (enumerator.MoveNext()) {
                    ser.push(enumerator.Current.toString());
                }
                return "LinearGradientBrush(" + this.StartPoint.toString() + " --> " + this.EndPoint.toString() + " [" + ser.toString() + "])";
            };
            LinearGradientBrush.StartPointProperty = DependencyProperty.RegisterCore("StartPoint", function () {
                return Point;
            }, LinearGradientBrush, undefined, function (d, args) {
                return (d).InvalidateBrush();
            });
            LinearGradientBrush.EndPointProperty = DependencyProperty.RegisterCore("EndPoint", function () {
                return Point;
            }, LinearGradientBrush, undefined, function (d, args) {
                return (d).InvalidateBrush();
            });
            return LinearGradientBrush;
        })(Media.GradientBrush);
        Media.LinearGradientBrush = LinearGradientBrush;
        Fayde.RegisterType(LinearGradientBrush, {
            Name: "LinearGradientBrush",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var Matrix3DProjection = (function (_super) {
            __extends(Matrix3DProjection, _super);
            function Matrix3DProjection() {
                _super.apply(this, arguments);
            }
            Matrix3DProjection.prototype.CreateProjectionMatrix = function () {
                return this.ProjectionMatrix;
            };
            Matrix3DProjection.ProjectionMatrixProperty = DependencyProperty.Register("ProjectionMatrix", function () {
                return Media.Matrix3D;
            }, Matrix3DProjection, undefined, function (d, args) {
                return (d)._InvalidateProjection();
            });
            return Matrix3DProjection;
        })(Media.Projection);
        Media.Matrix3DProjection = Matrix3DProjection;
        Fayde.RegisterType(Matrix3DProjection, {
            Name: "Matrix3DProjection",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var FIELD_OF_VIEW = 57.0 / 180 * Math.PI;
        var CAMERA_DIST = 999.0;
        var NEAR_VAL = 1.0;
        var FAR_VAL = 65536.0;
        var XY_PLANE_Z = (NEAR_VAL * FAR_VAL / (NEAR_VAL - FAR_VAL) * (1.0 - CAMERA_DIST)) / CAMERA_DIST;
        var PI_OVER_180 = Math.PI / 180.0;
        var PlaneProjection = (function (_super) {
            __extends(PlaneProjection, _super);
            function PlaneProjection() {
                _super.apply(this, arguments);
            }
            PlaneProjection.prototype.GetDistanceFromXYPlane = function () {
                var w = Math.max(this._ObjectWidth, 1.0);
                var h = Math.max(this._ObjectHeight, 1.0);
                var p = [w / 2.0, h / 2.0, 0.0, 1.0];
                var m = this.GetTransform();
                mat4.transformVec4(m, p, p);
                if (p[3] === 0.0)
                    return NaN;
                return XY_PLANE_Z - (p[2] / p[3]);
            };
            PlaneProjection.prototype.CreateProjectionMatrix3D = function () {
                var rotationX = this.RotationX;
                var rotationY = this.RotationY;
                var rotationZ = this.RotationZ;
                var radiansX = (rotationX || 0.0) * PI_OVER_180;
                var radiansY = (rotationY || 0.0) * PI_OVER_180;
                var radiansZ = (rotationZ || 0.0) * PI_OVER_180;
                var globalOffsetX = this.GlobalOffsetX;
                var globalOffsetY = this.GlobalOffsetY;
                var globalOffsetZ = this.GlobalOffsetZ;
                var globalX = globalOffsetX || 0.0;
                var globalY = globalOffsetY || 0.0;
                var globalZ = globalOffsetZ || 0.0;
                var localOffsetX = this.LocalOffsetX;
                var localOffsetY = this.LocalOffsetY;
                var localOffsetZ = this.LocalOffsetZ;
                var localX = localOffsetX || 0.0;
                var localY = localOffsetY || 0.0;
                var localZ = localOffsetZ || 0.0;
                var ow = this._ObjectWidth;
                var oh = this._ObjectHeight;
                var m = mat4.identity();
                mat4.translate(mat4.identity(), ow * -this.CenterOfRotationX, oh * -this.CenterOfRotationY, -this.CenterOfRotationZ);
                mat4.scale(m, 1.0, -1.0, 1.0);
                mat4.translate(m, localX, -localY, localZ);
                if (radiansX !== 0) {
                    var rotX = mat4.createRotateX(radiansX);
                    mat4.multiply(m, rotX, m);
                }
                if (radiansY !== 0) {
                    var rotY = mat4.createRotateY(-radiansY);
                    mat4.multiply(m, rotY, m);
                }
                if (radiansZ !== 0) {
                    var rotZ = mat4.createRotateZ(radiansZ);
                    mat4.multiply(m, rotZ, m);
                }
                mat4.translate(m, ow * (this.CenterOfRotationX - 0.5) + globalX, -oh * (this.CenterOfRotationY - 0.5) - globalY, this.CenterOfRotationZ - CAMERA_DIST + globalZ);
                var perspective = mat4.createPerspective(FIELD_OF_VIEW, ow / oh, NEAR_VAL, FAR_VAL);
                mat4.multiply(m, perspective, m);
                var height = 2.0 * CAMERA_DIST * Math.tan(FIELD_OF_VIEW / 2.0);
                var scale = height / oh;
                mat4.scale(m, scale, scale, 1.0);
                var viewport = mat4.createViewport(ow, oh);
                mat4.multiply(m, viewport, m);
                var r = new Media.Matrix3D();
                r._Raw = m;
                return r;
            };
            PlaneProjection.CenterOfRotationXProperty = DependencyProperty.Register("CenterOfRotationX", function () {
                return Number;
            }, PlaneProjection, 0.5, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.CenterOfRotationYProperty = DependencyProperty.Register("CenterOfRotationY", function () {
                return Number;
            }, PlaneProjection, 0.5, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.CenterOfRotationZProperty = DependencyProperty.Register("CenterOfRotationZ", function () {
                return Number;
            }, PlaneProjection, 0.5, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.GlobalOffsetXProperty = DependencyProperty.Register("GlobalOffsetX", function () {
                return Number;
            }, PlaneProjection, 0.0, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.GlobalOffsetYProperty = DependencyProperty.Register("GlobalOffsetY", function () {
                return Number;
            }, PlaneProjection, 0.0, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.GlobalOffsetZProperty = DependencyProperty.Register("GlobalOffsetZ", function () {
                return Number;
            }, PlaneProjection, 0.0, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.LocalOffsetXProperty = DependencyProperty.Register("LocalOffsetX", function () {
                return Number;
            }, PlaneProjection, 0.0, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.LocalOffsetYProperty = DependencyProperty.Register("LocalOffsetY", function () {
                return Number;
            }, PlaneProjection, 0.0, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.LocalOffsetZProperty = DependencyProperty.Register("LocalOffsetZ", function () {
                return Number;
            }, PlaneProjection, 0.0, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.RotationXProperty = DependencyProperty.Register("RotationX", function () {
                return Number;
            }, PlaneProjection, 0.0, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.RotationYProperty = DependencyProperty.Register("RotationY", function () {
                return Number;
            }, PlaneProjection, 0.0, function (d, args) {
                return (d)._InvalidateProjection();
            });
            PlaneProjection.RotationZProperty = DependencyProperty.Register("RotationZ", function () {
                return Number;
            }, PlaneProjection, 0.0, function (d, args) {
                return (d)._InvalidateProjection();
            });
            return PlaneProjection;
        })(Media.Projection);
        Media.PlaneProjection = PlaneProjection;
        Fayde.RegisterType(PlaneProjection, {
            Name: "PlaneProjection",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var RadialGradientBrush = (function (_super) {
            __extends(RadialGradientBrush, _super);
            function RadialGradientBrush() {
                _super.apply(this, arguments);
            }
            RadialGradientBrush.prototype.CreateBrush = function (ctx, bounds) {
                return undefined;
            };
            RadialGradientBrush.CenterProperty = DependencyProperty.RegisterCore("Center", function () {
                return Point;
            }, RadialGradientBrush, new Point(0.5, 0.5), function (d, args) {
                return (d).InvalidateBrush();
            });
            RadialGradientBrush.GradientOriginProperty = DependencyProperty.RegisterCore("GradientOrigin", function () {
                return Point;
            }, RadialGradientBrush, new Point(0.5, 0.5), function (d, args) {
                return (d).InvalidateBrush();
            });
            RadialGradientBrush.RadiusXProperty = DependencyProperty.RegisterCore("RadiusX", function () {
                return Number;
            }, RadialGradientBrush, 0.5, function (d, args) {
                return (d).InvalidateBrush();
            });
            RadialGradientBrush.RadiusYProperty = DependencyProperty.RegisterCore("RadiusY", function () {
                return Number;
            }, RadialGradientBrush, 0.5, function (d, args) {
                return (d).InvalidateBrush();
            });
            return RadialGradientBrush;
        })(Media.GradientBrush);
        Media.RadialGradientBrush = RadialGradientBrush;
        Fayde.RegisterType(RadialGradientBrush, {
            Name: "RadialGradientBrush",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        var SolidColorBrush = (function (_super) {
            __extends(SolidColorBrush, _super);
            function SolidColorBrush() {
                _super.call(this);
                if (arguments.length === 1 && arguments[0] instanceof Color)
                    this.Color = arguments[0];
            }
            SolidColorBrush.FromColor = function (color) {
                var scb = new SolidColorBrush();
                scb.Color = color;
                return scb;
            };
            SolidColorBrush.prototype.CreateBrush = function (ctx, bounds) {
                var color = this.Color;
                if (!color)
                    return "#000000";
                return color.toString();
            };
            SolidColorBrush.ColorProperty = DependencyProperty.Register("Color", function () {
                return Color;
            }, SolidColorBrush, undefined, function (d, args) {
                return (d).InvalidateBrush();
            });
            return SolidColorBrush;
        })(Media.Brush);
        Media.SolidColorBrush = SolidColorBrush;
        Fayde.RegisterType(SolidColorBrush, {
            Name: "SolidColorBrush",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
        function brushConverter(val) {
            if (!val)
                return undefined;
            if (val instanceof Media.Brush)
                return val;
            var scb = new SolidColorBrush();
            scb.Color = Fayde.ConvertAnyToType(val, Color);
            return scb;
        }
        Fayde.RegisterTypeConverter(Media.Brush, brushConverter);
        Fayde.RegisterTypeConverter(SolidColorBrush, brushConverter);
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        function computeImageMatrix(width, height, sw, sh, stretch, alignX, alignY) {
            var sx = width / sw;
            var sy = height / sh;
            if (width === 0)
                sx = 1.0;
            if (height === 0)
                sy = 1.0;
            if (stretch === Media.Stretch.Fill) {
                return mat3.createScale(sx, sy);
            }
            var scale = 1.0;
            var dx = 0.0;
            var dy = 0.0;
            switch (stretch) {
                case Media.Stretch.Uniform:
                    scale = sx < sy ? sx : sy;
                    break;
                case Media.Stretch.UniformToFill:
                    scale = sx < sy ? sy : sx;
                    break;
                case Media.Stretch.None:
                    break;
            }
            switch (alignX) {
                case Media.AlignmentX.Left:
                    dx = 0.0;
                    break;
                case Media.AlignmentX.Center:
                    dx = (width - (scale * sw)) / 2;
                    break;
                case Media.AlignmentX.Right:
                default:
                    dx = width - (scale * sw);
                    break;
            }
            switch (alignY) {
                case Media.AlignmentY.Top:
                    dy = 0.0;
                    break;
                case Media.AlignmentY.Center:
                    dy = (height - (scale * sh)) / 2;
                    break;
                case Media.AlignmentY.Bottom:
                default:
                    dy = height - (scale * sh);
                    break;
            }
            var m = mat3.createScale(scale, scale);
            mat3.translate(m, dx, dy);
            return m;
        }
        var TileBrush = (function (_super) {
            __extends(TileBrush, _super);
            function TileBrush() {
                _super.apply(this, arguments);
            }
            TileBrush.prototype.CreateBrush = function (ctx, bounds) {
                var imgExtents = this.GetTileExtents();
                var tmpCanvas = document.createElement("canvas");
                tmpCanvas.width = bounds.Width;
                tmpCanvas.height = bounds.Height;
                var tmpCtx = tmpCanvas.getContext("2d");
                var mat = computeImageMatrix(bounds.Width, bounds.Height, imgExtents.Width, imgExtents.Height, this.Stretch, this.AlignmentX, this.AlignmentY);
                tmpCtx.setTransform(mat[0], mat[1], mat[3], mat[4], mat[2], mat[5]);
                this.DrawTile(tmpCtx, bounds);
                return ctx.createPattern(tmpCanvas, "no-repeat");
            };
            TileBrush.prototype.GetTileExtents = function () {
                return undefined;
            };
            TileBrush.prototype.DrawTile = function (canvasCtx, bounds) {
            };
            TileBrush.AlignmentXProperty = DependencyProperty.RegisterCore("AlignmentX", function () {
                return new Enum(Media.AlignmentX);
            }, TileBrush, Media.AlignmentX.Center, function (d, args) {
                return (d).InvalidateBrush();
            });
            TileBrush.AlignmentYProperty = DependencyProperty.RegisterCore("AlignmentY", function () {
                return new Enum(Media.AlignmentY);
            }, TileBrush, Media.AlignmentY.Center, function (d, args) {
                return (d).InvalidateBrush();
            });
            TileBrush.StretchProperty = DependencyProperty.RegisterCore("Stretch", function () {
                return new Enum(Media.Stretch);
            }, TileBrush, Media.Stretch.Fill, function (d, args) {
                return (d).InvalidateBrush();
            });
            return TileBrush;
        })(Media.Brush);
        Media.TileBrush = TileBrush;
        Fayde.RegisterType(TileBrush, {
            Name: "TileBrush",
            Namespace: "Fayde.Media",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var AnimationBase = (function (_super) {
                __extends(AnimationBase, _super);
                function AnimationBase() {
                    _super.call(this);
                    this._IsHolding = false;
                }
                AnimationBase.prototype.Resolve = function (target, propd) {
                    return true;
                };
                AnimationBase.prototype.HoldEnd = function () {
                    this._IsHolding = true;
                };
                AnimationBase.prototype.Stop = function () {
                    var animStorage = this._AnimStorage;
                    if (!animStorage)
                        return;
                    if (Animation.AnimationStore.Detach(animStorage) || animStorage.IsDisabled)
                        return;
                    Animation.AnimationStore.ApplyStop(animStorage);
                };
                AnimationBase.prototype.UpdateInternal = function (clockData) {
                    if (this._IsHolding)
                        return;
                    var animStorage = this._AnimStorage;
                    if (!animStorage || animStorage.IsDisabled)
                        return;
                    var oldValue = animStorage.CurrentValue;
                    animStorage.CurrentValue = this.GetCurrentValue(animStorage.BaseValue, animStorage.StopValue !== undefined ? animStorage.StopValue : animStorage.BaseValue, clockData);
                    if (oldValue === animStorage.CurrentValue || animStorage.CurrentValue === undefined)
                        return;
                    Animation.AnimationStore.ApplyCurrent(animStorage);
                };
                AnimationBase.prototype.GetNaturalDurationCore = function () {
                    return new Duration(TimeSpan.FromArgs(0, 0, 0, 1));
                };
                AnimationBase.prototype.GetCurrentValue = function (defaultOriginalValue, defaultDestinationValue, clockData) {
                    return undefined;
                };
                AnimationBase.prototype._Hookup = function (promotedValues, error) {
                    this._IsHolding = false;
                    this.Reset();
                    var targetObject = null;
                    if (this.HasManualTarget) {
                        targetObject = this.ManualTarget;
                    } else {
                        var name = Animation.Storyboard.GetTargetName(this);
                        if (name) {
                            var n = this.XamlNode.FindName(name);
                            targetObject = n.XObject;
                        }
                    }
                    var targetPropertyPath = Animation.Storyboard.GetTargetProperty(this);
                    var refobj = { Value: targetObject };
                    var targetProperty = targetPropertyPath.TryResolveDependencyProperty(refobj, promotedValues);
                    targetObject = refobj.Value;
                    if (!targetProperty) {
                        error.Number = BError.XamlParse;
                        error.Message = "Could not resolve property for storyboard. [" + targetPropertyPath.Path.toString() + "]";
                        return false;
                    }
                    if (!this.Resolve(targetObject, targetProperty)) {
                        error.Number = BError.InvalidOperation;
                        error.Message = "Storyboard value could not be converted to the correct type";
                        return false;
                    }
                    this._AnimStorage = Animation.AnimationStore.Create(targetObject, targetProperty);
                    this._AnimStorage.Animation = this;
                    Animation.AnimationStore.Attach(this._AnimStorage);
                    return true;
                };
                return AnimationBase;
            })(Animation.Timeline);
            Animation.AnimationBase = AnimationBase;
            Fayde.RegisterType(AnimationBase, {
                Name: "AnimationBase",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var AnimationUsingKeyFrames = (function (_super) {
                __extends(AnimationUsingKeyFrames, _super);
                function AnimationUsingKeyFrames() {
                    _super.call(this);
                    var coll = AnimationUsingKeyFrames.KeyFramesProperty.Initialize(this);
                    coll.AttachTo(this);
                }
                AnimationUsingKeyFrames.prototype.Resolve = function (target, propd) {
                    var keyFrames = this.KeyFrames;
                    var sortedList = Animation.KeyFrameCollection.ResolveKeyFrames(this, keyFrames);
                    var count = sortedList.length;
                    for (var j = 0; j < count; j++) {
                        if (!sortedList[j].KeyTime.IsValid)
                            return false;
                    }
                    return true;
                };
                AnimationUsingKeyFrames.prototype.GetCurrentValue = function (defaultOriginValue, defaultDestinationValue, clockData) {
                    var keyFrames = this.KeyFrames;
                    var prevFrameRef = { Value: null };
                    var currentKeyFrame = keyFrames.GetKeyFrameForTime(clockData.CurrentTime, prevFrameRef);
                    var prevFrame = prevFrameRef.Value;
                    if (!currentKeyFrame)
                        return null;
                    var baseValue;
                    var keyStartTime;
                    var keyEndTime = currentKeyFrame._ResolvedKeyTime;
                    if (!prevFrame) {
                        baseValue = defaultOriginValue;
                        keyStartTime = new TimeSpan();
                    } else {
                        if (prevFrame instanceof Animation.ObjectKeyFrame) {
                            baseValue = (prevFrame).ConvertedValue;
                        } else {
                            baseValue = prevFrame.Value;
                        }
                        keyStartTime = prevFrame._ResolvedKeyTime;
                    }
                    var progress;
                    if (clockData.CurrentTime.CompareTo(keyEndTime) >= 0) {
                        progress = 1.0;
                    } else {
                        var keyDuration = keyEndTime.Ticks - keyStartTime.Ticks;
                        if (keyDuration <= 0)
                            progress = 1.0;
else
                            progress = (clockData.CurrentTime.Ticks - keyStartTime.Ticks) / keyDuration;
                    }
                    return currentKeyFrame.InterpolateValue(baseValue, progress);
                };
                AnimationUsingKeyFrames.prototype.GetNaturalDurationCore = function () {
                    var keyFrames = this.KeyFrames;
                    var sortedList = Animation.KeyFrameCollection.ResolveKeyFrames(this, keyFrames);
                    var len = sortedList.length;
                    var ts;
                    if (len > 0)
                        ts = sortedList[len - 1]._ResolvedKeyTime;
else
                        ts = new TimeSpan();
                    return new Duration(ts);
                };
                AnimationUsingKeyFrames.prototype.AddKeyFrame = function (kf) {
                    this.KeyFrames.Add(kf);
                };
                AnimationUsingKeyFrames.prototype.RemoveKeyFrame = function (kf) {
                    this.KeyFrames.Remove(kf);
                };
                AnimationUsingKeyFrames.KeyFramesProperty = DependencyProperty.RegisterImmutable("KeyFrames", function () {
                    return Animation.KeyFrameCollection;
                }, AnimationUsingKeyFrames);
                return AnimationUsingKeyFrames;
            })(Animation.AnimationBase);
            Animation.AnimationUsingKeyFrames = AnimationUsingKeyFrames;
            Fayde.RegisterType(AnimationUsingKeyFrames, {
                Name: "AnimationUsingKeyFrames",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var ColorAnimation = (function (_super) {
                __extends(ColorAnimation, _super);
                function ColorAnimation() {
                    _super.call(this);
                    this._FromCached = null;
                    this._ToCached = null;
                    this._ByCached = null;
                    this._EasingCached = undefined;
                }
                ColorAnimation.prototype.GetCurrentValue = function (defaultOriginalValue, defaultDestinationValue, clockData) {
                    var start = new Color();
                    if (this._FromCached)
                        start = this._FromCached;
else if (defaultOriginalValue instanceof Color)
                        start = defaultOriginalValue;
                    var end = start;
                    if (this._ToCached)
                        end = this._ToCached;
else if (this._ByCached)
                        end = start.Add(this._ByCached);
else if (defaultDestinationValue instanceof Color)
                        end = defaultDestinationValue;
                    var easingFunc = this._EasingCached;
                    if (easingFunc)
                        clockData.Progress = easingFunc.Ease(clockData.Progress);
                    return Color.LERP(start, end, clockData.Progress);
                };
                ColorAnimation.prototype._FromChanged = function (args) {
                    this._FromCached = args.NewValue;
                };
                ColorAnimation.prototype._ToChanged = function (args) {
                    this._ToCached = args.NewValue;
                };
                ColorAnimation.prototype._ByChanged = function (args) {
                    this._ByCached = args.NewValue;
                };
                ColorAnimation.prototype._EasingChanged = function (args) {
                    this._EasingCached = args.NewValue;
                };
                ColorAnimation.ByProperty = DependencyProperty.Register("By", function () {
                    return Color;
                }, ColorAnimation, null, function (d, args) {
                    return (d)._ByChanged(args);
                });
                ColorAnimation.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () {
                    return Animation.EasingFunctionBase;
                }, ColorAnimation, undefined, function (d, args) {
                    return (d)._EasingChanged(args);
                });
                ColorAnimation.FromProperty = DependencyProperty.Register("From", function () {
                    return Color;
                }, ColorAnimation, null, function (d, args) {
                    return (d)._FromChanged(args);
                });
                ColorAnimation.ToProperty = DependencyProperty.Register("To", function () {
                    return Color;
                }, ColorAnimation, null, function (d, args) {
                    return (d)._ToChanged(args);
                });
                return ColorAnimation;
            })(Animation.AnimationBase);
            Animation.ColorAnimation = ColorAnimation;
            Fayde.RegisterType(ColorAnimation, {
                Name: "ColorAnimation",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var ColorAnimationUsingKeyFrames = (function (_super) {
                __extends(ColorAnimationUsingKeyFrames, _super);
                function ColorAnimationUsingKeyFrames() {
                    _super.apply(this, arguments);
                }
                ColorAnimationUsingKeyFrames.Annotations = { ContentProperty: Animation.AnimationUsingKeyFrames.KeyFramesProperty };
                return ColorAnimationUsingKeyFrames;
            })(Animation.AnimationUsingKeyFrames);
            Animation.ColorAnimationUsingKeyFrames = ColorAnimationUsingKeyFrames;
            Fayde.RegisterType(ColorAnimationUsingKeyFrames, {
                Name: "ColorAnimationUsingKeyFrames",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var ColorKeyFrame = (function (_super) {
                __extends(ColorKeyFrame, _super);
                function ColorKeyFrame() {
                    _super.apply(this, arguments);
                }
                ColorKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () {
                    return Color;
                }, ColorKeyFrame);
                return ColorKeyFrame;
            })(Animation.KeyFrame);
            Animation.ColorKeyFrame = ColorKeyFrame;
            Fayde.RegisterType(ColorKeyFrame, {
                Name: "ColorKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var DiscreteColorKeyFrame = (function (_super) {
                __extends(DiscreteColorKeyFrame, _super);
                function DiscreteColorKeyFrame() {
                    _super.apply(this, arguments);
                }
                DiscreteColorKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    return baseValue;
                };
                return DiscreteColorKeyFrame;
            })(ColorKeyFrame);
            Animation.DiscreteColorKeyFrame = DiscreteColorKeyFrame;
            Fayde.RegisterType(DiscreteColorKeyFrame, {
                Name: "DiscreteColorKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var EasingColorKeyFrame = (function (_super) {
                __extends(EasingColorKeyFrame, _super);
                function EasingColorKeyFrame() {
                    _super.apply(this, arguments);
                }
                EasingColorKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var easingFunction = this.EasingFunction;
                    if (easingFunction)
                        keyFrameProgress = easingFunction.Ease(keyFrameProgress);
                    return Color.LERP(start, end, keyFrameProgress);
                };
                EasingColorKeyFrame.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () {
                    return Animation.EasingFunctionBase;
                }, EasingColorKeyFrame);
                return EasingColorKeyFrame;
            })(ColorKeyFrame);
            Animation.EasingColorKeyFrame = EasingColorKeyFrame;
            Fayde.RegisterType(EasingColorKeyFrame, {
                Name: "EasingColorKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var LinearColorKeyFrame = (function (_super) {
                __extends(LinearColorKeyFrame, _super);
                function LinearColorKeyFrame() {
                    _super.apply(this, arguments);
                }
                LinearColorKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    return Color.LERP(baseValue, this.Value, keyFrameProgress);
                };
                return LinearColorKeyFrame;
            })(ColorKeyFrame);
            Animation.LinearColorKeyFrame = LinearColorKeyFrame;
            Fayde.RegisterType(LinearColorKeyFrame, {
                Name: "LinearColorKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var SplineColorKeyFrame = (function (_super) {
                __extends(SplineColorKeyFrame, _super);
                function SplineColorKeyFrame() {
                    _super.apply(this, arguments);
                }
                SplineColorKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var splineProgress = keyFrameProgress;
                    var keySpline = this.KeySpline;
                    if (keySpline)
                        splineProgress = keySpline.GetSplineProgress(keyFrameProgress);
                    return Color.LERP(start, end, splineProgress);
                };
                SplineColorKeyFrame.KeySplineProperty = DependencyProperty.Register("KeySpline", function () {
                    return Animation.KeySpline;
                }, SplineColorKeyFrame);
                return SplineColorKeyFrame;
            })(ColorKeyFrame);
            Animation.SplineColorKeyFrame = SplineColorKeyFrame;
            Fayde.RegisterType(SplineColorKeyFrame, {
                Name: "SplineColorKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var DoubleAnimation = (function (_super) {
                __extends(DoubleAnimation, _super);
                function DoubleAnimation() {
                    _super.call(this);
                    this._FromCached = null;
                    this._ToCached = null;
                    this._ByCached = null;
                    this._EasingCached = undefined;
                }
                DoubleAnimation.prototype.GetCurrentValue = function (defaultOriginalValue, defaultDestinationValue, clockData) {
                    var start = 0.0;
                    if (this._FromCached != null)
                        start = this._FromCached;
else if (defaultOriginalValue != null && typeof defaultOriginalValue === "number")
                        start = defaultOriginalValue;
                    var end = start;
                    if (this._ToCached != null)
                        end = this._ToCached;
else if (this._ByCached != null)
                        end = start + this._ByCached;
else if (defaultDestinationValue != null && typeof defaultDestinationValue === "number")
                        end = defaultDestinationValue;
                    var easingFunc = this._EasingCached;
                    if (easingFunc != null)
                        clockData.Progress = easingFunc.Ease(clockData.Progress);
                    return start + ((end - start) * clockData.Progress);
                };
                DoubleAnimation.prototype._FromChanged = function (args) {
                    this._FromCached = args.NewValue;
                };
                DoubleAnimation.prototype._ToChanged = function (args) {
                    this._ToCached = args.NewValue;
                };
                DoubleAnimation.prototype._ByChanged = function (args) {
                    this._ByCached = args.NewValue;
                };
                DoubleAnimation.prototype._EasingChanged = function (args) {
                    this._EasingCached = args.NewValue;
                };
                DoubleAnimation.ByProperty = DependencyProperty.Register("By", function () {
                    return Number;
                }, DoubleAnimation, null, function (d, args) {
                    return (d)._ByChanged(args);
                });
                DoubleAnimation.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () {
                    return Animation.EasingFunctionBase;
                }, DoubleAnimation, undefined, function (d, args) {
                    return (d)._EasingChanged(args);
                });
                DoubleAnimation.FromProperty = DependencyProperty.Register("From", function () {
                    return Number;
                }, DoubleAnimation, null, function (d, args) {
                    return (d)._FromChanged(args);
                });
                DoubleAnimation.ToProperty = DependencyProperty.Register("To", function () {
                    return Number;
                }, DoubleAnimation, null, function (d, args) {
                    return (d)._ToChanged(args);
                });
                return DoubleAnimation;
            })(Animation.AnimationBase);
            Animation.DoubleAnimation = DoubleAnimation;
            Fayde.RegisterType(DoubleAnimation, {
                Name: "DoubleAnimation",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var DoubleAnimationUsingKeyFrames = (function (_super) {
                __extends(DoubleAnimationUsingKeyFrames, _super);
                function DoubleAnimationUsingKeyFrames() {
                    _super.apply(this, arguments);
                }
                DoubleAnimationUsingKeyFrames.Annotations = { ContentProperty: Animation.AnimationUsingKeyFrames.KeyFramesProperty };
                return DoubleAnimationUsingKeyFrames;
            })(Animation.AnimationUsingKeyFrames);
            Animation.DoubleAnimationUsingKeyFrames = DoubleAnimationUsingKeyFrames;
            Fayde.RegisterType(DoubleAnimationUsingKeyFrames, {
                Name: "DoubleAnimationUsingKeyFrames",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var DoubleKeyFrame = (function (_super) {
                __extends(DoubleKeyFrame, _super);
                function DoubleKeyFrame() {
                    _super.apply(this, arguments);
                }
                DoubleKeyFrame.ValueProperty = DependencyProperty.Register("Value", function () {
                    return Number;
                }, DoubleKeyFrame);
                return DoubleKeyFrame;
            })(Animation.KeyFrame);
            Animation.DoubleKeyFrame = DoubleKeyFrame;
            Fayde.RegisterType(DoubleKeyFrame, {
                Name: "DoubleKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var DiscreteDoubleKeyFrame = (function (_super) {
                __extends(DiscreteDoubleKeyFrame, _super);
                function DiscreteDoubleKeyFrame() {
                    _super.apply(this, arguments);
                }
                DiscreteDoubleKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    return baseValue;
                };
                return DiscreteDoubleKeyFrame;
            })(DoubleKeyFrame);
            Animation.DiscreteDoubleKeyFrame = DiscreteDoubleKeyFrame;
            Fayde.RegisterType(DiscreteDoubleKeyFrame, {
                Name: "DiscreteDoubleKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var EasingDoubleKeyFrame = (function (_super) {
                __extends(EasingDoubleKeyFrame, _super);
                function EasingDoubleKeyFrame() {
                    _super.apply(this, arguments);
                }
                EasingDoubleKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var easingFunction = this.EasingFunction;
                    if (easingFunction)
                        keyFrameProgress = easingFunction.Ease(keyFrameProgress);
                    if (isNaN(start))
                        start = 0;
                    if (isNaN(end))
                        end = 0;
                    return start + (end - start) * keyFrameProgress;
                };
                EasingDoubleKeyFrame.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () {
                    return Animation.EasingFunctionBase;
                }, EasingDoubleKeyFrame);
                return EasingDoubleKeyFrame;
            })(DoubleKeyFrame);
            Animation.EasingDoubleKeyFrame = EasingDoubleKeyFrame;
            Fayde.RegisterType(EasingDoubleKeyFrame, {
                Name: "EasingDoubleKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var LinearDoubleKeyFrame = (function (_super) {
                __extends(LinearDoubleKeyFrame, _super);
                function LinearDoubleKeyFrame() {
                    _super.apply(this, arguments);
                }
                LinearDoubleKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    var start = baseValue;
                    var end = this.Value;
                    if (isNaN(start))
                        start = 0;
                    if (isNaN(end))
                        end = 0;
                    return start + (end - start) * keyFrameProgress;
                };
                return LinearDoubleKeyFrame;
            })(DoubleKeyFrame);
            Animation.LinearDoubleKeyFrame = LinearDoubleKeyFrame;
            Fayde.RegisterType(LinearDoubleKeyFrame, {
                Name: "LinearDoubleKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
            var SplineDoubleKeyFrame = (function (_super) {
                __extends(SplineDoubleKeyFrame, _super);
                function SplineDoubleKeyFrame() {
                    _super.apply(this, arguments);
                }
                SplineDoubleKeyFrame.prototype.InterpolateValue = function (baseValue, keyFrameProgress) {
                    if (keyFrameProgress >= 1.0)
                        return this.Value;
                    var start = baseValue;
                    var end = this.Value;
                    var splineProgress = keyFrameProgress;
                    var keySpline = this.KeySpline;
                    if (keySpline)
                        splineProgress = keySpline.GetSplineProgress(keyFrameProgress);
                    if (isNaN(start))
                        start = 0;
                    if (isNaN(end))
                        end = 0;
                    return start + (end - start) * splineProgress;
                };
                SplineDoubleKeyFrame.KeySplineProperty = DependencyProperty.Register("KeySpline", function () {
                    return Animation.KeySpline;
                }, SplineDoubleKeyFrame);
                return SplineDoubleKeyFrame;
            })(DoubleKeyFrame);
            Animation.SplineDoubleKeyFrame = SplineDoubleKeyFrame;
            Fayde.RegisterType(SplineDoubleKeyFrame, {
                Name: "SplineDoubleKeyFrame",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var ObjectAnimationUsingKeyFrames = (function (_super) {
                __extends(ObjectAnimationUsingKeyFrames, _super);
                function ObjectAnimationUsingKeyFrames() {
                    _super.apply(this, arguments);
                }
                ObjectAnimationUsingKeyFrames.prototype.Resolve = function (target, propd) {
                    var enumerator = this.KeyFrames.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        var keyFrame = enumerator.Current;
                        var value = keyFrame.Value;
                        if (value == null) {
                            keyFrame.ConvertedValue = undefined;
                        } else {
                            var converted = value;
                            keyFrame.ConvertedValue = converted;
                        }
                    }
                    return _super.prototype.Resolve.call(this, target, propd);
                };
                ObjectAnimationUsingKeyFrames.Annotations = { ContentProperty: Animation.AnimationUsingKeyFrames.KeyFramesProperty };
                return ObjectAnimationUsingKeyFrames;
            })(Animation.AnimationUsingKeyFrames);
            Animation.ObjectAnimationUsingKeyFrames = ObjectAnimationUsingKeyFrames;
            Fayde.RegisterType(ObjectAnimationUsingKeyFrames, {
                Name: "ObjectAnimationUsingKeyFrames",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var PointAnimation = (function (_super) {
                __extends(PointAnimation, _super);
                function PointAnimation() {
                    _super.call(this);
                    this._FromCached = null;
                    this._ToCached = null;
                    this._ByCached = null;
                    this._EasingCached = undefined;
                }
                PointAnimation.prototype.GetCurrentValue = function (defaultOriginalValue, defaultDestinationValue, clockData) {
                    var start = new Point();
                    if (this._FromCached != null)
                        start = this._FromCached;
else if (defaultOriginalValue instanceof Point)
                        start = defaultOriginalValue;
                    var end = start;
                    if (this._ToCached != null)
                        end = this._ToCached;
else if (this._ByCached != null)
                        end = new Point(start.X + this._ByCached.X, start.Y + this._ByCached.Y);
else if (defaultDestinationValue instanceof Point)
                        end = defaultDestinationValue;
                    var easingFunc = this._EasingCached;
                    if (easingFunc != null)
                        clockData.Progress = easingFunc.Ease(clockData.Progress);
                    return Point.LERP(start, end, clockData.Progress);
                };
                PointAnimation.prototype._FromChanged = function (args) {
                    this._FromCached = args.NewValue;
                };
                PointAnimation.prototype._ToChanged = function (args) {
                    this._ToCached = args.NewValue;
                };
                PointAnimation.prototype._ByChanged = function (args) {
                    this._ByCached = args.NewValue;
                };
                PointAnimation.prototype._EasingChanged = function (args) {
                    this._EasingCached = args.NewValue;
                };
                PointAnimation.ByProperty = DependencyProperty.Register("By", function () {
                    return Point;
                }, PointAnimation, null, function (d, args) {
                    return (d)._ByChanged(args);
                });
                PointAnimation.EasingFunctionProperty = DependencyProperty.Register("EasingFunction", function () {
                    return Animation.EasingFunctionBase;
                }, PointAnimation, undefined, function (d, args) {
                    return (d)._EasingChanged(args);
                });
                PointAnimation.FromProperty = DependencyProperty.Register("From", function () {
                    return Point;
                }, PointAnimation, null, function (d, args) {
                    return (d)._FromChanged(args);
                });
                PointAnimation.ToProperty = DependencyProperty.Register("To", function () {
                    return Point;
                }, PointAnimation, null, function (d, args) {
                    return (d)._ToChanged(args);
                });
                return PointAnimation;
            })(Animation.AnimationBase);
            Animation.PointAnimation = PointAnimation;
            Fayde.RegisterType(PointAnimation, {
                Name: "PointAnimation",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var PointAnimationUsingKeyFrames = (function (_super) {
                __extends(PointAnimationUsingKeyFrames, _super);
                function PointAnimationUsingKeyFrames() {
                    _super.apply(this, arguments);
                }
                PointAnimationUsingKeyFrames.Annotations = { ContentProperty: Animation.AnimationUsingKeyFrames.KeyFramesProperty };
                return PointAnimationUsingKeyFrames;
            })(Animation.AnimationUsingKeyFrames);
            Animation.PointAnimationUsingKeyFrames = PointAnimationUsingKeyFrames;
            Fayde.RegisterType(PointAnimationUsingKeyFrames, {
                Name: "PointAnimationUsingKeyFrames",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Animation) {
            var Storyboard = (function (_super) {
                __extends(Storyboard, _super);
                function Storyboard() {
                    _super.call(this);
                    var coll = Storyboard.ChildrenProperty.Initialize(this);
                    coll.AttachTo(this);
                }
                Storyboard.GetTargetName = function (d) {
                    return d.GetValue(Storyboard.TargetNameProperty);
                };
                Storyboard.SetTargetName = function (d, value) {
                    return d.SetValue(Storyboard.TargetNameProperty, value);
                };

                Storyboard.GetTargetProperty = function (d) {
                    return d.GetValue(Storyboard.TargetPropertyProperty);
                };
                Storyboard.SetTargetProperty = function (d, value) {
                    return d.SetValue(Storyboard.TargetPropertyProperty, value);
                };

                Storyboard.SetTarget = function (timeline, target) {
                    timeline.ManualTarget = target;
                };
                Storyboard.prototype.Begin = function () {
                    if (Media.Animation.Debug && window.console) {
                        console.log("ANIMATION:Begin:" + this.__DebugString());
                    }
                    this.Reset();
                    var error = new BError();
                    var promotedValues = [];
                    var enumerator = this.Children.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        var animation = enumerator.Current;
                        if (!animation._Hookup(promotedValues, error))
                            error.ThrowException();
                    }
                    Fayde.Application.Current.RegisterStoryboard(this);
                };
                Storyboard.prototype.Pause = function () {
                    _super.prototype.Pause.call(this);
                    var enumerator = this.Children.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        (enumerator.Current).Pause();
                    }
                };
                Storyboard.prototype.Resume = function () {
                    _super.prototype.Resume.call(this);
                    var enumerator = this.Children.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        (enumerator.Current).Resume();
                    }
                };
                Storyboard.prototype.Stop = function () {
                    if (Media.Animation.Debug && window.console) {
                        console.log("ANIMATION:Stop:" + this.__DebugString());
                    }
                    _super.prototype.Stop.call(this);
                    Fayde.Application.Current.UnregisterStoryboard(this);
                    var enumerator = this.Children.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        (enumerator.Current).Stop();
                    }
                };
                Storyboard.prototype.UpdateInternal = function (clockData) {
                    var enumerator = this.Children.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        (enumerator.Current).Update(clockData.CurrentTime.Ticks);
                    }
                };
                Storyboard.prototype.GetNaturalDurationCore = function () {
                    var fullTicks = 0;
                    var enumerator = this.Children.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        var timeline = enumerator.Current;
                        var dur = timeline.GetNaturalDuration();
                        if (dur.IsAutomatic)
                            continue;
                        if (dur.IsForever)
                            return Duration.Forever;
                        var spanTicks = dur.TimeSpan.Ticks;
                        var repeat = timeline.RepeatBehavior || Animation.Timeline.DEFAULT_REPEAT_BEHAVIOR;
                        if (repeat.IsForever)
                            return Duration.Forever;
                        if (repeat.HasCount)
                            spanTicks = spanTicks * repeat.Count;
                        if (timeline.AutoReverse)
                            spanTicks *= 2;
                        if (repeat.HasDuration)
                            spanTicks = repeat.Duration.TimeSpan.Ticks;
                        if (spanTicks !== 0)
                            spanTicks = spanTicks / timeline.SpeedRatio;
                        var bt = timeline.BeginTime;
                        if (bt)
                            spanTicks += bt.Ticks;
                        if (fullTicks === 0 || fullTicks <= spanTicks)
                            fullTicks = spanTicks;
                    }
                    if (!fullTicks)
                        return Duration.Automatic;
                    return new Duration(TimeSpan.FromTicks(fullTicks));
                };
                Storyboard.prototype.__DebugString = function () {
                    var anims = [];
                    var cur = "";
                    var enumerator = this.Children.GetEnumerator();
                    var animation;
                    while (enumerator.MoveNext()) {
                        animation = enumerator.Current;
                        cur = "";
                        cur += "(";
                        cur += (animation).constructor._TypeName;
                        cur += ":";
                        cur += Storyboard.GetTargetName(animation);
                        cur += ":";
                        var path = Storyboard.GetTargetProperty(animation);
                        cur += path ? path.Path : "";
                        cur += ")";
                        anims.push(cur);
                    }
                    return "[" + anims.join(",") + "]";
                };
                Storyboard.TargetNameProperty = DependencyProperty.RegisterAttached("TargetName", function () {
                    return String;
                }, Storyboard);

                Storyboard.TargetPropertyProperty = DependencyProperty.RegisterAttached("TargetProperty", function () {
                    return Fayde.Data.PropertyPath;
                }, Storyboard);

                Storyboard.ChildrenProperty = DependencyProperty.RegisterImmutable("Children", function () {
                    return Animation.TimelineCollection;
                }, Storyboard);

                Storyboard.Annotations = { ContentProperty: Storyboard.ChildrenProperty };
                return Storyboard;
            })(Animation.Timeline);
            Animation.Storyboard = Storyboard;
            Fayde.RegisterType(Storyboard, {
                Name: "Storyboard",
                Namespace: "Fayde.Media.Animation",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Animation || (Media.Animation = {}));
        var Animation = Media.Animation;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Effects) {
            var BlurEffect = (function (_super) {
                __extends(BlurEffect, _super);
                function BlurEffect() {
                    _super.apply(this, arguments);
                }
                BlurEffect.RadiusProperty = DependencyProperty.Register("Radius", function () {
                    return Number;
                }, BlurEffect, undefined, function (d, args) {
                    return (d)._EffectChanged(args);
                });
                return BlurEffect;
            })(Effects.Effect);
            Effects.BlurEffect = BlurEffect;
            Fayde.RegisterType(BlurEffect, {
                Name: "BlurEffect",
                Namespace: "Fayde.Media.Effects",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Effects || (Media.Effects = {}));
        var Effects = Media.Effects;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Effects) {
            var DropShadowEffect = (function (_super) {
                __extends(DropShadowEffect, _super);
                function DropShadowEffect() {
                    _super.apply(this, arguments);
                }
                DropShadowEffect.prototype.Padding = function () {
                    var radius = Math.min(this.BlurRadius, DropShadowEffect.MAX_BLUR_RADIUS);
                    var depth = Math.min(Math.max(0, this.ShadowDepth), DropShadowEffect.MAX_SHADOW_DEPTH);
                    var direction = this.Direction * Math.PI / 180.0;
                    var width = Math.ceil(radius);
                    var offsetX = Math.cos(direction) * depth;
                    var offsetY = Math.sin(direction) * depth;
                    var left = -offsetX + width;
                    var top = offsetY + width;
                    var right = offsetX + width;
                    var bottom = -offsetY + width;
                    return new Thickness(left < 1.0 ? 1.0 : Math.ceil(left), top < 1.0 ? 1.0 : Math.ceil(top), right < 1.0 ? 1.0 : Math.ceil(right), bottom < 1.0 ? 1.0 : Math.ceil(bottom));
                };
                DropShadowEffect.prototype.GetPadding = function (thickness) {
                    var radius = Math.min(this.BlurRadius, DropShadowEffect.MAX_BLUR_RADIUS);
                    var depth = Math.min(Math.max(0, this.ShadowDepth), DropShadowEffect.MAX_SHADOW_DEPTH);
                    var direction = this.Direction * Math.PI / 180.0;
                    var width = Math.ceil(radius);
                    var offsetX = Math.cos(direction) * depth;
                    var offsetY = Math.sin(direction) * depth;
                    var left = -offsetX + width;
                    var top = offsetY + width;
                    var right = offsetX + width;
                    var bottom = -offsetY + width;
                    var l = left < 1.0 ? 1.0 : Math.ceil(left);
                    var t = top < 1.0 ? 1.0 : Math.ceil(top);
                    var r = right < 1.0 ? 1.0 : Math.ceil(right);
                    var b = bottom < 1.0 ? 1.0 : Math.ceil(bottom);
                    var flag = false;
                    if (thickness.Left !== l) {
                        thickness.Left = l;
                        flag = true;
                    }
                    if (thickness.Top !== t) {
                        thickness.Top = t;
                        flag = true;
                    }
                    if (thickness.Right !== r) {
                        thickness.Right = r;
                        flag = true;
                    }
                    if (thickness.Bottom !== b) {
                        thickness.Bottom = b;
                        flag = true;
                    }
                    return flag;
                };
                DropShadowEffect.prototype.PreRender = function (ctx) {
                    var color = this.Color;
                    var opacity = color.A * this.Opacity;
                    var radius = Math.min(this.BlurRadius, DropShadowEffect.MAX_BLUR_RADIUS);
                    var depth = Math.min(Math.max(0, this.ShadowDepth), DropShadowEffect.MAX_SHADOW_DEPTH);
                    var direction = this.Direction * Math.PI / 180.0;
                    var offsetX = Math.cos(direction) * depth;
                    var offsetY = -Math.sin(direction) * depth;
                    var canvasCtx = ctx.CanvasContext;
                    canvasCtx.shadowColor = "rgba(" + color.R + "," + color.G + "," + color.B + "," + opacity + ")";
                    canvasCtx.shadowBlur = radius;
                    canvasCtx.shadowOffsetX = offsetX;
                    canvasCtx.shadowOffsetY = offsetY;
                };
                DropShadowEffect.MAX_BLUR_RADIUS = 20;
                DropShadowEffect.MAX_SHADOW_DEPTH = 300;
                DropShadowEffect.BlurRadiusProperty = DependencyProperty.Register("BlurRadius", function () {
                    return Number;
                }, DropShadowEffect, 5.0, function (d, args) {
                    return (d)._EffectChanged(args);
                });
                DropShadowEffect.ColorProperty = DependencyProperty.Register("Color", function () {
                    return Color;
                }, DropShadowEffect, Color.KnownColors.Black, function (d, args) {
                    return (d)._EffectChanged(args);
                });
                DropShadowEffect.DirectionProperty = DependencyProperty.Register("Direction", function () {
                    return Number;
                }, DropShadowEffect, 315.0, function (d, args) {
                    return (d)._EffectChanged(args);
                });
                DropShadowEffect.OpacityProperty = DependencyProperty.Register("Opacity", function () {
                    return Number;
                }, DropShadowEffect, 1.0, function (d, args) {
                    return (d)._EffectChanged(args);
                });
                DropShadowEffect.ShadowDepthProperty = DependencyProperty.Register("ShadowDepth", function () {
                    return Number;
                }, DropShadowEffect, 5.0, function (d, args) {
                    return (d)._EffectChanged(args);
                });
                return DropShadowEffect;
            })(Effects.Effect);
            Effects.DropShadowEffect = DropShadowEffect;
            Fayde.RegisterType(DropShadowEffect, {
                Name: "DropShadowEffect",
                Namespace: "Fayde.Media.Effects",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Effects || (Media.Effects = {}));
        var Effects = Media.Effects;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Imaging) {
            function intGreaterThanZeroValidator(instance, propd, value) {
                if (typeof value !== "number")
                    return false;
                return value > 0;
            }
            var BitmapSource = (function (_super) {
                __extends(BitmapSource, _super);
                function BitmapSource() {
                    _super.apply(this, arguments);
                    this._Listener = null;
                }
                Object.defineProperty(BitmapSource.prototype, "Image", {
                    get: function () {
                        return this._Image;
                    },
                    enumerable: true,
                    configurable: true
                });
                BitmapSource.prototype.ResetImage = function () {
                    var _this = this;
                    this._Image = new Image();
                    this._Image.onerror = function (e) {
                        return _this._OnErrored(e);
                    };
                    this._Image.onload = function (e) {
                        return _this._OnLoad(e);
                    };
                    this.PixelWidth = 0;
                    this.PixelHeight = 0;
                    var listener = this._Listener;
                    if (listener)
                        listener.ImageChanged(this);
                };
                BitmapSource.prototype.UriSourceChanged = function (oldValue, newValue) {
                    if (!this._Image)
                        this.ResetImage();
                    this._Image.src = newValue.toString();
                    var listener = this._Listener;
                    if (listener)
                        listener.ImageChanged(this);
                };
                BitmapSource.prototype.Listen = function (listener) {
                    this._Listener = listener;
                };
                BitmapSource.prototype.Unlisten = function (listener) {
                    if (this._Listener === listener)
                        this._Listener = null;
                };
                BitmapSource.prototype._OnErrored = function (e) {
                    console.info("Failed to load: " + this._Image.src.toString());
                    var listener = this._Listener;
                    if (listener)
                        listener.OnImageErrored(this, e);
                };
                BitmapSource.prototype._OnLoad = function (e) {
                    this.PixelWidth = this._Image.naturalWidth;
                    this.PixelHeight = this._Image.naturalHeight;
                    var listener = this._Listener;
                    if (listener) {
                        listener.OnImageLoaded(this, e);
                        listener.ImageChanged(this);
                    }
                };
                BitmapSource.PixelWidthProperty = DependencyProperty.RegisterFull("PixelWidth", function () {
                    return Number;
                }, BitmapSource, 0, undefined, undefined, undefined, intGreaterThanZeroValidator);
                BitmapSource.PixelHeightProperty = DependencyProperty.RegisterFull("PixelHeight", function () {
                    return Number;
                }, BitmapSource, 0, undefined, undefined, undefined, intGreaterThanZeroValidator);
                return BitmapSource;
            })(Imaging.ImageSource);
            Imaging.BitmapSource = BitmapSource;
            Fayde.RegisterType(BitmapSource, {
                Name: "BitmapSource",
                Namespace: "Fayde.Media.Imaging",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Imaging || (Media.Imaging = {}));
        var Imaging = Media.Imaging;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Imaging) {
            var ImageBrush = (function (_super) {
                __extends(ImageBrush, _super);
                function ImageBrush() {
                    _super.apply(this, arguments);
                    this.ImageFailed = new MulticastEvent();
                    this.ImageOpened = new MulticastEvent();
                }
                ImageBrush._SourceCoercer = function (d, propd, value) {
                    if (typeof value === "string")
                        return new Fayde.Media.Imaging.BitmapImage(new Uri(value));
                    if (value instanceof Uri)
                        return new Fayde.Media.Imaging.BitmapImage(value);
                    return value;
                };

                ImageBrush.prototype.SetupBrush = function (ctx, bounds) {
                    var source = this.ImageSource;
                    if (source && source.Image)
                        _super.prototype.SetupBrush.call(this, ctx, bounds);
                };
                ImageBrush.prototype.GetTileExtents = function () {
                    var source = this.ImageSource;
                    var r = new rect();
                    r.Width = source.PixelWidth;
                    r.Height = source.PixelHeight;
                    return r;
                };
                ImageBrush.prototype.DrawTile = function (canvasCtx, bounds) {
                    var source = this.ImageSource;
                    canvasCtx.rect(0, 0, bounds.Width, bounds.Height);
                    canvasCtx.fillStyle = canvasCtx.createPattern(source.Image, "no-repeat");
                    canvasCtx.fill();
                };
                ImageBrush.prototype._ImageSourceChanged = function (args) {
                    var oldSrc;
                    if ((oldSrc = args.OldValue) && (oldSrc instanceof Imaging.BitmapSource))
                        oldSrc.Unlisten(this);
                    var newSrc;
                    if ((newSrc = args.NewValue) && (newSrc instanceof Imaging.BitmapSource))
                        newSrc.Listen(this);
                    this.InvalidateBrush();
                };
                ImageBrush.prototype.OnImageErrored = function (source, e) {
                    this.ImageFailed.Raise(this, EventArgs.Empty);
                };
                ImageBrush.prototype.OnImageLoaded = function (source, e) {
                    this.ImageOpened.Raise(this, EventArgs.Empty);
                };
                ImageBrush.prototype.ImageChanged = function (source) {
                    this.InvalidateBrush();
                };
                ImageBrush.ImageSourceProperty = DependencyProperty.RegisterFull("ImageSource", function () {
                    return Imaging.ImageSource;
                }, ImageBrush, undefined, function (d, args) {
                    return (d)._ImageSourceChanged(args);
                }, ImageBrush._SourceCoercer);
                return ImageBrush;
            })(Media.TileBrush);
            Imaging.ImageBrush = ImageBrush;
            Fayde.RegisterType(ImageBrush, {
                Name: "ImageBrush",
                Namespace: "Fayde.Media.Imaging",
                XmlNamespace: Fayde.XMLNS
            });
        })(Media.Imaging || (Media.Imaging = {}));
        var Imaging = Media.Imaging;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Text) {
        var TextLayoutAttributes = (function () {
            function TextLayoutAttributes(source, start) {
                this._Source = source;
                this.Start = (start == null) ? 0 : start;
            }
            TextLayoutAttributes.prototype.GetBackground = function (selected) {
                if (selected)
                    return this._Source.SelectionBackground || TextLayoutAttributes.DEFAULT_SELECTION_BACKGROUND;
                return undefined;
            };

            TextLayoutAttributes.prototype.GetForeground = function (selected) {
                if (selected)
                    return this._Source.SelectionForeground || TextLayoutAttributes.DEFAULT_SELECTION_FOREGROUND;
                return this._Source.Foreground;
            };
            Object.defineProperty(TextLayoutAttributes.prototype, "Font", {
                get: function () {
                    return this._Source.Font;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextLayoutAttributes.prototype, "Direction", {
                get: function () {
                    return this._Source.Direction;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextLayoutAttributes.prototype, "IsUnderlined", {
                get: function () {
                    return (this._Source.TextDecorations & Fayde.TextDecorations.Underline) === Fayde.TextDecorations.Underline;
                },
                enumerable: true,
                configurable: true
            });
            TextLayoutAttributes.DEFAULT_SELECTION_BACKGROUND = Fayde.Media.SolidColorBrush.FromColor(Color.FromRgba(68, 68, 68, 1.0));

            TextLayoutAttributes.DEFAULT_SELECTION_FOREGROUND = Fayde.Media.SolidColorBrush.FromColor(Color.FromRgba(255, 255, 255, 1.0));
            return TextLayoutAttributes;
        })();
        Text.TextLayoutAttributes = TextLayoutAttributes;
    })(Fayde.Text || (Fayde.Text = {}));
    var Text = Fayde.Text;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var FENode = (function (_super) {
        __extends(FENode, _super);
        function FENode(xobj) {
            _super.call(this, xobj);
        }
        FENode.prototype.SetSubtreeNode = function (subtreeNode, error) {
            if (this.SubtreeNode) {
                this.SubtreeNode.Detach();
                this.SubtreeNode = null;
            }
            if (subtreeNode && !subtreeNode.AttachTo(this, error))
                return false;
            this.SubtreeNode = subtreeNode;
            return true;
        };
        FENode.prototype.SetIsLoaded = function (value) {
            if (this.IsLoaded === value)
                return;
            this.IsLoaded = value;
            this.OnIsLoadedChanged(value);
        };
        FENode.prototype.OnIsLoadedChanged = function (newIsLoaded) {
            var xobj = this.XObject;
            var res = xobj.Resources;
            if (!newIsLoaded) {
                Fayde.Providers.ImplicitStyleBroker.Clear(xobj, Fayde.Providers.StyleMask.VisualTree);
                xobj.Unloaded.Raise(xobj, new Fayde.RoutedEventArgs());
            } else {
                Fayde.Providers.ImplicitStyleBroker.Set(xobj, Fayde.Providers.StyleMask.All);
            }
            var enumerator = this.GetVisualTreeEnumerator();
            while (enumerator.MoveNext()) {
                enumerator.Current.SetIsLoaded(newIsLoaded);
            }
            if (newIsLoaded) {
                xobj.Loaded.Raise(xobj, new Fayde.RoutedEventArgs());
                this.InvokeLoaded();
            }
        };
        FENode.prototype.InvokeLoaded = function () {
        };
        FENode.prototype.AttachVisualChild = function (uie, error) {
            this.OnVisualChildAttached(uie);
            if (!this.SetSubtreeNode(uie.XamlNode, error))
                return false;
            uie.XamlNode.SetIsLoaded(this.IsLoaded);
            return true;
        };
        FENode.prototype.DetachVisualChild = function (uie, error) {
            if (!this.SetSubtreeNode(null, error))
                return false;
            this.OnVisualChildDetached(uie);
            uie.XamlNode.SetIsLoaded(false);
        };
        FENode.prototype.ApplyTemplateWithError = function (error) {
            if (this.SubtreeNode)
                return false;
            var result = this.DoApplyTemplateWithError(error);
            if (result)
                this.XObject.OnApplyTemplate();
            return result;
        };
        FENode.prototype.DoApplyTemplateWithError = function (error) {
            return false;
        };
        FENode.prototype.FinishApplyTemplateWithError = function (uie, error) {
            if (!uie || error.Message)
                return false;
            this.AttachVisualChild(uie, error);
            return error.Message == null;
        };
        FENode.prototype._HasFocus = function () {
            var curNode = this._Surface.FocusedNode;
            while (curNode) {
                if (curNode === this)
                    return true;
                curNode = curNode.VisualParentNode;
            }
            return false;
        };
        FENode.prototype.GetFocusedElement = function () {
            var node = this._Surface.FocusedNode;
            if (node)
                return node.XObject;
        };
        FENode.prototype.UpdateLayout = function () {
            var lu = this.LayoutUpdater;
            var error = new BError();
            if (this.IsAttached) {
                this._Surface._UpdateLayout(error);
            } else {
                var pass = {
                    MeasureList: [],
                    ArrangeList: [],
                    SizeList: [],
                    Count: 0,
                    Updated: true
                };
                lu.UpdateLayer(pass, error);
                if (pass.Updated)
                    this.XObject.LayoutUpdated.Raise(this, EventArgs.Empty);
            }
            if (error.Message)
                error.ThrowException();
        };
        FENode.prototype.GetVisualTreeEnumerator = function (direction) {
            if (this.SubtreeNode)
                return Fayde.ArrayEx.GetEnumerator([this.SubtreeNode]);
            return Fayde.ArrayEx.EmptyEnumerator;
        };
        FENode.prototype._SizeChanged = function (args) {
            var lu = this.LayoutUpdater;
            lu.FullInvalidate(false);
            var vpNode = this.VisualParentNode;
            if (vpNode)
                vpNode.LayoutUpdater.InvalidateMeasure();
            lu.InvalidateMeasure();
            lu.InvalidateArrange();
            lu.UpdateBounds();
        };
        FENode.prototype._FlowDirectionChanged = function (args) {
            this._SizeChanged(args);
        };
        return FENode;
    })(Fayde.UINode);
    Fayde.FENode = FENode;
    Fayde.RegisterType(FENode, {
        Name: "FENode",
        Namespace: "Fayde"
    });
    var FrameworkElement = (function (_super) {
        __extends(FrameworkElement, _super);
        function FrameworkElement() {
            _super.call(this);
            this.SizeChanged = new Fayde.RoutedEvent();
            this.Loaded = new Fayde.RoutedEvent();
            this.Unloaded = new Fayde.RoutedEvent();
            this.LayoutUpdated = new MulticastEvent();
            var rd = FrameworkElement.ResourcesProperty.Initialize(this);
            rd.AttachTo(this);
        }
        FrameworkElement.prototype.CreateNode = function () {
            return new FENode(this);
        };

        FrameworkElement.prototype.IsInheritable = function (propd) {
            if (propd === FrameworkElement.FlowDirectionProperty)
                return true;
            if (propd === FrameworkElement.LanguageProperty)
                return true;
            return (_super.prototype).IsInheritable.call(this, propd);
        };

        FrameworkElement.prototype.OnApplyTemplate = function () {
        };
        FrameworkElement.prototype.FindName = function (name) {
            var n = this.XamlNode.FindName(name);
            if (n)
                return n.XObject;
        };
        FrameworkElement.prototype.UpdateLayout = function () {
            this.XamlNode.UpdateLayout();
        };
        FrameworkElement.prototype._MeasureOverride = function (availableSize, error) {
            var desired = new size();
            availableSize = size.copyTo(availableSize);
            size.max(availableSize, desired);
            var enumerator = this.XamlNode.GetVisualTreeEnumerator();
            while (enumerator.MoveNext()) {
                var childNode = enumerator.Current;
                var childLu = childNode.LayoutUpdater;
                childLu._Measure(availableSize, error);
                desired = size.copyTo(childLu.DesiredSize);
            }
            size.min(desired, availableSize);
            return desired;
        };
        FrameworkElement.prototype._ArrangeOverride = function (finalSize, error) {
            var arranged = size.copyTo(finalSize);
            var enumerator = this.XamlNode.GetVisualTreeEnumerator();
            while (enumerator.MoveNext()) {
                var childNode = enumerator.Current;
                var childRect = rect.fromSize(finalSize);
                childNode.LayoutUpdater._Arrange(childRect, error);
                size.max(arranged, finalSize);
            }
            return arranged;
        };
        FrameworkElement.prototype._StyleChanged = function (args) {
            Fayde.Providers.LocalStyleBroker.Set(this, args.NewValue);
        };
        FrameworkElement.prototype._AlignmentChanged = function (args) {
            var lu = this.XamlNode.LayoutUpdater;
            lu.InvalidateArrange();
            lu.FullInvalidate(true);
        };
        FrameworkElement.prototype._WidthChanged = function (args) {
            this.XamlNode._SizeChanged(args);
        };
        FrameworkElement.prototype._HeightChanged = function (args) {
            this.XamlNode._SizeChanged(args);
        };
        FrameworkElement.ActualHeightProperty = DependencyProperty.RegisterReadOnly("ActualHeight", function () {
            return Number;
        }, FrameworkElement);
        FrameworkElement.ActualWidthProperty = DependencyProperty.RegisterReadOnly("ActualWidth", function () {
            return Number;
        }, FrameworkElement);
        FrameworkElement.CursorProperty = DependencyProperty.RegisterFull("Cursor", function () {
            return new Enum(Fayde.CursorType);
        }, FrameworkElement, Fayde.CursorType.Default);
        FrameworkElement.FlowDirectionProperty = Fayde.InheritableOwner.FlowDirectionProperty.ExtendTo(FrameworkElement);
        FrameworkElement.HeightProperty = DependencyProperty.Register("Height", function () {
            return Length;
        }, FrameworkElement, NaN, function (d, args) {
            return (d)._HeightChanged(args);
        });
        FrameworkElement.HorizontalAlignmentProperty = DependencyProperty.Register("HorizontalAlignment", function () {
            return new Enum(Fayde.HorizontalAlignment);
        }, FrameworkElement, Fayde.HorizontalAlignment.Stretch, function (d, args) {
            return (d)._AlignmentChanged(args);
        });
        FrameworkElement.LanguageProperty = Fayde.InheritableOwner.LanguageProperty.ExtendTo(FrameworkElement);
        FrameworkElement.MarginProperty = DependencyProperty.RegisterCore("Margin", function () {
            return Thickness;
        }, FrameworkElement, undefined, function (d, args) {
            return (d).XamlNode._SizeChanged(args);
        });
        FrameworkElement.MaxHeightProperty = DependencyProperty.Register("MaxHeight", function () {
            return Number;
        }, FrameworkElement, Number.POSITIVE_INFINITY, function (d, args) {
            return (d).XamlNode._SizeChanged(args);
        });
        FrameworkElement.MaxWidthProperty = DependencyProperty.Register("MaxWidth", function () {
            return Number;
        }, FrameworkElement, Number.POSITIVE_INFINITY, function (d, args) {
            return (d).XamlNode._SizeChanged(args);
        });
        FrameworkElement.MinHeightProperty = DependencyProperty.Register("MinHeight", function () {
            return Number;
        }, FrameworkElement, 0.0, function (d, args) {
            return (d).XamlNode._SizeChanged(args);
        });
        FrameworkElement.MinWidthProperty = DependencyProperty.Register("MinWidth", function () {
            return Number;
        }, FrameworkElement, 0.0, function (d, args) {
            return (d).XamlNode._SizeChanged(args);
        });
        FrameworkElement.StyleProperty = DependencyProperty.Register("Style", function () {
            return Fayde.Style;
        }, FrameworkElement, undefined, function (d, args) {
            return (d)._StyleChanged(args);
        });
        FrameworkElement.VerticalAlignmentProperty = DependencyProperty.Register("VerticalAlignment", function () {
            return new Enum(Fayde.VerticalAlignment);
        }, FrameworkElement, Fayde.VerticalAlignment.Stretch, function (d, args) {
            return (d)._AlignmentChanged(args);
        });
        FrameworkElement.WidthProperty = DependencyProperty.Register("Width", function () {
            return Length;
        }, FrameworkElement, NaN, function (d, args) {
            return (d)._WidthChanged(args);
        });
        FrameworkElement.ResourcesProperty = DependencyProperty.RegisterImmutable("Resources", function () {
            return Fayde.ResourceDictionary;
        }, FrameworkElement);
        return FrameworkElement;
    })(Fayde.UIElement);
    Fayde.FrameworkElement = FrameworkElement;
    Fayde.RegisterType(FrameworkElement, {
        Name: "FrameworkElement",
        Namespace: "Fayde",
        XmlNamespace: Fayde.XMLNS
    });
    FrameworkElement.ActualWidthProperty.Store = Fayde.Providers.ActualSizeStore.Instance;
    FrameworkElement.ActualHeightProperty.Store = Fayde.Providers.ActualSizeStore.Instance;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    var TypeConverters = (function () {
        function TypeConverters() {
        }
        TypeConverters.ThicknessConverter = function (str) {
            if (!str)
                return new Thickness();
            var tokens = str.split(",");
            var left, top, right, bottom;
            if (tokens.length === 1) {
                left = top = right = bottom = parseFloat(tokens[0]);
            } else if (tokens.length === 2) {
                left = right = parseFloat(tokens[0]);
                top = bottom = parseFloat(tokens[1]);
            } else if (tokens.length === 4) {
                left = parseFloat(tokens[0]);
                top = parseFloat(tokens[1]);
                right = parseFloat(tokens[2]);
                bottom = parseFloat(tokens[3]);
            } else {
                throw new XamlParseException("Cannot parse Thickness value '" + str + "'");
            }
            return new Thickness(left, top, right, bottom);
        };
        TypeConverters.CornerRadiusConverter = function (str) {
            if (!str)
                return new CornerRadius();
            var tokens = str.split(",");
            var topLeft, topRight, bottomRight, bottomLeft;
            if (tokens.length === 1) {
                topLeft = topRight = bottomRight = bottomLeft = parseFloat(tokens[0]);
            } else if (tokens.length === 4) {
                topLeft = parseFloat(tokens[0]);
                topRight = parseFloat(tokens[1]);
                bottomLeft = parseFloat(tokens[2]);
                bottomRight = parseFloat(tokens[3]);
            } else {
                throw new XamlParseException("Cannot parse CornerRadius value '" + str + "'");
            }
            return new CornerRadius(topLeft, topRight, bottomRight, bottomLeft);
        };
        TypeConverters.BrushConverter = function (str) {
            var scb = new Fayde.Media.SolidColorBrush();
            scb.Color = TypeConverters.ColorConverter(str);
            return scb;
        };
        TypeConverters.ColorConverter = function (str) {
            if (!str)
                return new Color();
            if (str.substr(0, 1) !== "#") {
                var color = Color.KnownColors[str];
                if (!color)
                    throw new NotSupportedException("Unknown Color: " + str);
                return color;
            }
            return Color.FromHex(str);
        };
        TypeConverters.GeometryConverter = function (str) {
            return Fayde.Media.ParseGeometry(str);
        };
        return TypeConverters;
    })();
    var TypeConverter = (function () {
        function TypeConverter() {
        }
        TypeConverter.Register = function (type, converter) {
            TypeConverter._Converters[type] = converter;
        };
        TypeConverter.ConvertObject = function (propd, val, objectType, doStringConversion) {
            if (val == null)
                return val;
            var targetType = propd.GetTargetType();
            if (typeof targetType === "string" || targetType === String) {
                return doStringConversion ? val.toString() : "";
            } else if (typeof targetType === "number" || targetType === Number) {
                if (typeof val === "number")
                    return val;
                if (!val)
                    return 0;
                if (val instanceof Thickness)
                    return val.Left;
                return parseFloat(val.toString());
            } else if (typeof targetType === "function") {
                var f = targetType;
                if (val instanceof f)
                    return val;
                var converter = TypeConverter._Converters[targetType];
                if (converter)
                    return converter(val);
            } else if (targetType instanceof Enum) {
                if (typeof val === "string") {
                    var ret = (targetType).Object[val];
                    if (ret !== undefined)
                        return ret;
                    return val;
                }
            }
            if (typeof targetType === "string" || targetType === String)
                return doStringConversion ? val.toString() : "";
            var tc;
            if (propd.IsAttached) {
            } else {
            }
            return val;
        };
        TypeConverter._Converters = [];
        return TypeConverter;
    })();
    Fayde.TypeConverter = TypeConverter;
    TypeConverter.Register(Thickness, TypeConverters.ThicknessConverter);
    TypeConverter.Register(CornerRadius, TypeConverters.CornerRadiusConverter);
    TypeConverter.Register(Fayde.Media.Brush, TypeConverters.BrushConverter);
    TypeConverter.Register(Color, TypeConverters.ColorConverter);
    TypeConverter.Register(Fayde.Media.Geometry, TypeConverters.GeometryConverter);
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Media) {
        (function (Imaging) {
            var BitmapImage = (function (_super) {
                __extends(BitmapImage, _super);
                function BitmapImage(uri) {
                    _super.call(this);
                    this.ImageFailed = new MulticastEvent();
                    this.ImageOpened = new MulticastEvent();
                    if (uri)
                        this.UriSource = uri;
                }
                BitmapImage.prototype._UriSourceChanged = function (args) {
                    var uri = args.NewValue;
                    if (Uri.IsNullOrEmpty(uri))
                        this.ResetImage();
else
                        this.UriSourceChanged(args.OldValue, uri);
                };
                BitmapImage.prototype._OnErrored = function (e) {
                    _super.prototype._OnErrored.call(this, e);
                    this.ImageFailed.Raise(this, EventArgs.Empty);
                };
                BitmapImage.prototype._OnLoad = function (e) {
                    _super.prototype._OnLoad.call(this, e);
                    this.ImageOpened.Raise(this, EventArgs.Empty);
                };
                BitmapImage.UriSourceProperty = DependencyProperty.RegisterFull("UriSource", function () {
                    return Uri;
                }, BitmapImage, undefined, function (d, args) {
                    return (d)._UriSourceChanged(args);
                }, undefined, true);
                return BitmapImage;
            })(Imaging.BitmapSource);
            Imaging.BitmapImage = BitmapImage;
            Fayde.RegisterType(BitmapImage, {
                Name: "BitmapImage",
                Namespace: "Fayde.Media.Imaging",
                XmlNamespace: Fayde.XMLNS
            });
            Fayde.RegisterTypeConverter(Imaging.ImageSource, function (val) {
                var bi = new BitmapImage();
                bi.UriSource = Fayde.ConvertAnyToType(val, Uri);
                return bi;
            });
        })(Media.Imaging || (Media.Imaging = {}));
        var Imaging = Media.Imaging;
    })(Fayde.Media || (Fayde.Media = {}));
    var Media = Fayde.Media;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        var ShapeNode = (function (_super) {
            __extends(ShapeNode, _super);
            function ShapeNode(xobj) {
                _super.call(this, xobj);
            }
            ShapeNode.prototype.PostInsideObject = function (ctx, lu, x, y) {
                var shape = this.XObject;
                var extents = rect.copyTo(this.GetStretchExtents(shape, lu));
                rect.transform(extents, ctx.CurrentTransform);
                if (!rect.containsPointXY(extents, x, y))
                    return false;
                return shape._InsideShape(ctx, lu, x, y);
            };
            ShapeNode.prototype.ComputeBounds = function (baseComputer, lu) {
                this.IntersectBaseBoundsWithClipPath(lu, lu.Bounds, this.GetStretchExtents(this.XObject, lu), lu.AbsoluteXform);
                rect.copyTo(lu.Bounds, lu.BoundsWithChildren);
                lu.ComputeGlobalBounds();
                lu.ComputeSurfaceBounds();
            };
            ShapeNode.prototype.IntersectBaseBoundsWithClipPath = function (lu, dest, baseBounds, xform) {
                var isClipEmpty = rect.isEmpty(lu.ClipBounds);
                var isLayoutClipEmpty = lu.LayoutClip ? rect.isEmpty(lu.LayoutClip) : true;
                if ((!isClipEmpty || !isLayoutClipEmpty) && !lu.TotalIsRenderVisible) {
                    rect.clear(dest);
                    return;
                }
                rect.copyGrowTransform(dest, baseBounds, lu.EffectPadding, xform);
                if (!isClipEmpty)
                    rect.intersection(dest, lu.ClipBounds);
                if (!isLayoutClipEmpty)
                    rect.intersection(dest, lu.LayoutClip);
            };
            ShapeNode.prototype.UpdateStretch = function () {
                var lu = this.LayoutUpdater;
                rect.clear(lu.Extents);
                rect.clear(lu.ExtentsWithChildren);
            };
            ShapeNode.prototype.GetStretchExtents = function (shape, lu) {
                if (rect.isEmpty(lu.Extents)) {
                    rect.copyTo(shape._ComputeStretchBounds(), lu.Extents);
                    rect.copyTo(lu.Extents, lu.ExtentsWithChildren);
                }
                return lu.Extents;
            };
            return ShapeNode;
        })(Fayde.FENode);
        Shapes.ShapeNode = ShapeNode;
        function isSignificant(dx, x) {
            return Math.abs(x) < 0.000019 && (Math.abs(dx) * x - x) > 1.0;
        }
        var Shape = (function (_super) {
            __extends(Shape, _super);
            function Shape() {
                _super.apply(this, arguments);
                this._ShapeFlags = Shapes.ShapeFlags.None;
                this._StretchXform = mat3.identity();
                this._NaturalBounds = new rect();
                this._Path = null;
                this._Fill = null;
                this._Stroke = null;
            }
            Shape.prototype.CreateNode = function () {
                return new ShapeNode(this);
            };

            Shape.prototype._InsideShape = function (ctx, lu, x, y) {
                if (this._ShapeFlags & Shapes.ShapeFlags.Empty)
                    return false;
                var ret = false;
                ctx.Save();
                ctx.PreTransformMatrix(this._StretchXform);
                if (this._Fill != null) {
                    this._DrawPath(ctx);
                    if (ctx.IsPointInPath(x, y))
                        ret = true;
                }
                if (!ret && this._Stroke != null) {
                    if (window.console && console.warn)
                        console.warn("Shape._InsideShape-Stroke");
                }
                ctx.Restore();
                return ret;
            };
            Shape.prototype._MeasureOverride = function (availableSize, error) {
                var shapeBounds = this._GetNaturalBounds();
                if (!shapeBounds)
                    return new size();
                var sx = 0.0;
                var sy = 0.0;
                var desired;
                if (this instanceof Shapes.Rectangle || this instanceof Shapes.Ellipse)
                    desired = new size();
else
                    desired = size.copyTo(availableSize);
                var stretch = this.Stretch;
                if (stretch === Fayde.Media.Stretch.None) {
                    return size.fromRaw(shapeBounds.X + shapeBounds.Width, shapeBounds.Y + shapeBounds.Height);
                }
                if (!isFinite(availableSize.Width))
                    desired.Width = shapeBounds.Width;
                if (!isFinite(availableSize.Height))
                    desired.Height = shapeBounds.Height;
                if (shapeBounds.Width > 0)
                    sx = desired.Width / shapeBounds.Width;
                if (shapeBounds.Height > 0)
                    sy = desired.Height / shapeBounds.Height;
                if (!isFinite(availableSize.Width))
                    sx = sy;
                if (!isFinite(availableSize.Height))
                    sy = sx;
                switch (stretch) {
                    case Fayde.Media.Stretch.Uniform:
                        sx = sy = Math.min(sx, sy);
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        sx = sy = Math.max(sx, sy);
                        break;
                    case Fayde.Media.Stretch.Fill:
                        if (!isFinite(availableSize.Width))
                            sx = 1.0;
                        if (!isFinite(availableSize.Height))
                            sy = 1.0;
                        break;
                    default:
                        break;
                }
                desired.Width = shapeBounds.Width * sx;
                desired.Height = shapeBounds.Height * sy;
                return desired;
            };
            Shape.prototype._ArrangeOverride = function (finalSize, error) {
                var sx = 1.0;
                var sy = 1.0;
                var shapeBounds = this._GetNaturalBounds();
                if (!shapeBounds)
                    return new size();
                this._InvalidateStretch();
                var arranged;
                var stretch = this.Stretch;
                if (stretch === Fayde.Media.Stretch.None) {
                    arranged = size.fromRaw(Math.max(finalSize.Width, shapeBounds.X + shapeBounds.Width), Math.max(finalSize.Height, shapeBounds.Y + shapeBounds.Height));
                } else {
                    arranged = size.copyTo(finalSize);
                }
                if (shapeBounds.Width === 0)
                    shapeBounds.Width = arranged.Width;
                if (shapeBounds.Height === 0)
                    shapeBounds.Height = arranged.Height;
                if (shapeBounds.Width !== arranged.Width)
                    sx = arranged.Width / shapeBounds.Width;
                if (shapeBounds.Height !== arranged.Height)
                    sy = arranged.Height / shapeBounds.Height;
                switch (stretch) {
                    case Fayde.Media.Stretch.Uniform:
                        sx = sy = Math.min(sx, sy);
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        sx = sy = Math.max(sx, sy);
                        break;
                    default:
                        break;
                }
                arranged.Width = shapeBounds.Width * sx;
                arranged.Height = shapeBounds.Height * sy;
                return arranged;
            };
            Shape.prototype.Render = function (ctx, lu, region) {
                if (this._ShapeFlags & Shapes.ShapeFlags.Empty)
                    return;
                var area = this.XamlNode.GetStretchExtents(this, lu);
                ctx.Save();
                ctx.PreTransformMatrix(this._StretchXform);
                this._DrawPath(ctx);
                if (this._Fill != null)
                    ctx.Fill(this._Fill, area);
                if (this._Stroke != null)
                    ctx.Stroke(this._Stroke, this.StrokeThickness, area);
                ctx.Restore();
            };
            Shape.prototype._GetFillRule = function () {
                return Shapes.FillRule.NonZero;
            };
            Shape.prototype._BuildPath = function () {
                return undefined;
            };
            Shape.prototype._DrawPath = function (ctx) {
                this._Path = this._Path || this._BuildPath();
                this._Path.DrawRenderCtx(ctx);
            };
            Shape.prototype.ComputeActualSize = function (baseComputer, lu) {
                var desired = baseComputer.call(lu);
                var node = this.XamlNode;
                var lu = node.LayoutUpdater;
                var shapeBounds = this._GetNaturalBounds();
                var sx = 1.0;
                var sy = 1.0;
                var visualParentNode = node.VisualParentNode;
                if (visualParentNode != null && !(visualParentNode instanceof Fayde.Controls.CanvasNode)) {
                    if (lu.PreviousConstraint !== undefined || lu.LayoutSlot !== undefined) {
                        return desired;
                    }
                }
                if (!node.IsAttached)
                    return desired;
                if (shapeBounds.Width <= 0 && shapeBounds.Height <= 0)
                    return desired;
                var stretch = this.Stretch;
                if (stretch === Fayde.Media.Stretch.None && shapeBounds.Width > 0 && shapeBounds.Height > 0)
                    return size.fromRect(shapeBounds);
                if (!isFinite(desired.Width))
                    desired.Width = shapeBounds.Width;
                if (!isFinite(desired.Height))
                    desired.Height = shapeBounds.Height;
                if (shapeBounds.Width > 0)
                    sx = desired.Width / shapeBounds.Width;
                if (shapeBounds.Height > 0)
                    sy = desired.Height / shapeBounds.Height;
                switch (stretch) {
                    case Fayde.Media.Stretch.Uniform:
                        sx = sy = Math.min(sx, sy);
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        sx = sy = Math.max(sx, sy);
                        break;
                    default:
                        break;
                }
                desired.Width = Math.min(desired.Width, shapeBounds.Width * sx);
                desired.Height = Math.min(desired.Height, shapeBounds.Height * sy);
                return desired;
            };
            Shape.prototype._ComputeStretchBounds = function () {
                var shapeBounds = this._GetNaturalBounds();
                if (!shapeBounds || shapeBounds.Width <= 0.0 || shapeBounds.Height <= 0.0) {
                    this._ShapeFlags = Shapes.ShapeFlags.Empty;
                    return new rect();
                }
                var specified = size.fromRaw(this.Width, this.Height);
                var autoDim = isNaN(specified.Width);
                var framework = size.fromRaw(this.ActualWidth, this.ActualHeight);
                if (specified.Width <= 0.0 || specified.Height <= 0.0) {
                    this._ShapeFlags = Shapes.ShapeFlags.Empty;
                    return new rect();
                }
                var node = this.XamlNode;
                var lu = node.LayoutUpdater;
                var vpNode = node.VisualParentNode;
                if (vpNode instanceof Fayde.Controls.CanvasNode) {
                    framework.Width = framework.Width === 0.0 ? shapeBounds.Width : framework.Width;
                    framework.Height = framework.Height === 0.0 ? shapeBounds.Height : framework.Height;
                    if (!isNaN(specified.Width))
                        framework.Width = specified.Width;
                    if (!isNaN(specified.Height))
                        framework.Height = specified.Height;
                } else if (!lu.PreviousConstraint) {
                    framework.Width = framework.Width === 0.0 ? shapeBounds.Width : framework.Width;
                    framework.Height = framework.Height === 0.0 ? shapeBounds.Height : framework.Height;
                }
                var stretch = this.Stretch;
                if (stretch === Fayde.Media.Stretch.None) {
                    rect.transform(shapeBounds, this._StretchXform);
                    return shapeBounds;
                }
                if (framework.Width === 0.0 || framework.Height === 0.0) {
                    this._ShapeFlags = Shapes.ShapeFlags.Empty;
                    return new rect();
                }
                var logicalBounds = this._ComputeShapeBoundsImpl(true, null);
                var adjX = logicalBounds.Width !== 0.0;
                var adjY = logicalBounds.Height !== 0.0;
                var diffX = shapeBounds.Width - logicalBounds.Width;
                var diffY = shapeBounds.Height - logicalBounds.Height;
                var sw = adjX ? (framework.Width - diffX) / logicalBounds.Width : 1.0;
                var sh = adjY ? (framework.Height - diffY) / logicalBounds.Height : 1.0;
                var center = false;
                switch (stretch) {
                    case Fayde.Media.Stretch.Fill:
                        center = true;
                        break;
                    case Fayde.Media.Stretch.Uniform:
                        sw = sh = (sw < sh) ? sw : sh;
                        center = true;
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        sw = sh = (sw > sh) ? sw : sh;
                        break;
                }
                if ((adjX && isSignificant(sw - 1, shapeBounds.Width)) || (adjY && isSignificant(sh - 1, shapeBounds.Height))) {
                    var temp = mat3.createScale(adjX ? sw : 1.0, adjY ? sh : 1.0);
                    var stretchBounds = this._ComputeShapeBoundsImpl(false, temp);
                    if (stretchBounds.Width !== shapeBounds.Width && stretchBounds.Height !== shapeBounds.Height) {
                        sw *= adjX ? (framework.Width - stretchBounds.Width + logicalBounds.Width * sw) / (logicalBounds.Width * sw) : 1.0;
                        sh *= adjY ? (framework.Height - stretchBounds.Height + logicalBounds.Height * sh) / (logicalBounds.Height * sh) : 1.0;
                        switch (stretch) {
                            case Fayde.Media.Stretch.Uniform:
                                sw = sh = (sw < sh) ? sw : sh;
                                break;
                            case Fayde.Media.Stretch.UniformToFill:
                                sw = sh = (sw > sh) ? sw : sh;
                                break;
                        }
                    }
                }
                var x = (!autoDim || adjX) ? shapeBounds.X : 0;
                var y = (!autoDim || adjY) ? shapeBounds.Y : 0;
                var st = this._StretchXform;
                if (!(this instanceof Shapes.Line) || !autoDim)
                    mat3.translate(st, -x, -y);
                mat3.translate(st, adjX ? -shapeBounds.Width * 0.5 : 0.0, adjY ? -shapeBounds.Height * 0.5 : 0.0);
                mat3.scale(st, adjX ? sw : 1.0, adjY ? sh : 1.0);
                if (center) {
                    mat3.translate(st, adjX ? framework.Width * 0.5 : 0, adjY ? framework.Height * 0.5 : 0);
                } else {
                    mat3.translate(st, adjX ? (logicalBounds.Width * sw + diffX) * 0.5 : 0, adjY ? (logicalBounds.Height * sh + diffY) * 0.5 : 0);
                }
                this._StretchXform = st;
                rect.transform(shapeBounds, this._StretchXform);
                return shapeBounds;
            };
            Shape.prototype._GetNaturalBounds = function () {
                if (rect.isEmpty(this._NaturalBounds))
                    this._NaturalBounds = this._ComputeShapeBoundsImpl(false);
                return this._NaturalBounds;
            };
            Shape.prototype._ComputeShapeBounds = function (logical) {
                return this._ComputeShapeBoundsImpl(logical, null);
            };
            Shape.prototype._ComputeShapeBoundsImpl = function (logical, matrix) {
                var thickness = (logical || !this._Stroke) ? 0.0 : this.StrokeThickness;
                this._Path = this._Path || this._BuildPath();
                if (!this._Path || (this._ShapeFlags & Shapes.ShapeFlags.Empty))
                    return new rect();
                if (logical) {
                    return this._Path.CalculateBounds(0);
                } else if (thickness > 0) {
                    return this._Path.CalculateBounds(thickness);
                } else {
                }
                NotImplemented("Shape._ComputeShapeBoundsImpl");
                return new rect();
            };
            Shape.prototype._InvalidateStretch = function () {
                this.XamlNode.UpdateStretch();
                this._StretchXform = mat3.identity();
                this._InvalidatePathCache();
            };
            Shape.prototype._InvalidatePathCache = function (free) {
                this._Path = null;
                if (!free)
                    this.XamlNode.LayoutUpdater.UpdateBounds(true);
            };
            Shape.prototype._InvalidateNaturalBounds = function () {
                rect.clear(this._NaturalBounds);
                this._InvalidateStretch();
                this.XamlNode.LayoutUpdater.Invalidate();
            };

            Shape.prototype._FillChanged = function (args) {
                var lu = this.XamlNode.LayoutUpdater;
                var newBrush = args.NewValue;
                if (this._FillListener)
                    this._FillListener.Detach();
                this._FillListener = null;
                if (newBrush)
                    this._FillListener = newBrush.Listen(function (brush) {
                        return lu.Invalidate();
                    });
                if (this._Fill || newBrush)
                    this._InvalidateNaturalBounds();
                this._Fill = newBrush;
                lu.CanHitElement = this._Stroke != null || this._Fill != null;
            };

            Shape.prototype._StrokeChanged = function (args) {
                var lu = this.XamlNode.LayoutUpdater;
                var newBrush = args.NewValue;
                if (this._StrokeListener)
                    this._StrokeListener.Detach();
                this._StrokeListener = null;
                if (newBrush)
                    this._StrokeListener = newBrush.Listen(function (brush) {
                        return lu.Invalidate();
                    });
                if (this._Stroke || newBrush)
                    this._InvalidateNaturalBounds();
                this._Stroke = newBrush;
                lu.CanHitElement = this._Stroke != null || this._Fill != null;
            };
            Shape.prototype._StretchChanged = function (args) {
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
                this._InvalidateStretch();
            };
            Shape.prototype._WidthChanged = function (args) {
                _super.prototype._WidthChanged.call(this, args);
                this._InvalidateStretch();
            };
            Shape.prototype._HeightChanged = function (args) {
                _super.prototype._HeightChanged.call(this, args);
                this._InvalidateStretch();
            };
            Shape.FillProperty = DependencyProperty.Register("Fill", function () {
                return Fayde.Media.Brush;
            }, Shape, undefined, function (d, args) {
                return (d)._FillChanged(args);
            });
            Shape.StretchProperty = DependencyProperty.Register("Stretch", function () {
                return new Enum(Fayde.Media.Stretch);
            }, Shape, Fayde.Media.Stretch.None, function (d, args) {
                return (d)._StretchChanged(args);
            });
            Shape.StrokeProperty = DependencyProperty.Register("Stroke", function () {
                return Fayde.Media.Brush;
            }, Shape, undefined, function (d, args) {
                return (d)._StrokeChanged(args);
            });
            Shape.StrokeThicknessProperty = DependencyProperty.Register("StrokeThickness", function () {
                return Number;
            }, Shape, 1.0, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            Shape.StrokeDashArrayProperty = DependencyProperty.Register("StrokeDashArray", function () {
                return Shapes.DoubleCollection;
            }, Shape, undefined, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            Shape.StrokeDashCapProperty = DependencyProperty.Register("StrokeDashCap", function () {
                return new Enum(Shapes.PenLineCap);
            }, Shape, Shapes.PenLineCap.Flat, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            Shape.StrokeDashOffsetProperty = DependencyProperty.Register("StrokeDashOffset", function () {
                return Number;
            }, Shape, 0.0, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            Shape.StrokeEndLineCapProperty = DependencyProperty.Register("StrokeEndLineCap", function () {
                return new Enum(Shapes.PenLineCap);
            }, Shape, Shapes.PenLineCap.Flat, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            Shape.StrokeLineJoinProperty = DependencyProperty.Register("StrokeLineJoin", function () {
                return new Enum(Shapes.PenLineJoin);
            }, Shape, Shapes.PenLineJoin.Miter, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            Shape.StrokeMiterLimitProperty = DependencyProperty.Register("StrokeMiterLimit", function () {
                return Number;
            }, Shape, 10.0, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            Shape.StrokeStartLineCapProperty = DependencyProperty.Register("StrokeStartLineCap", function () {
                return new Enum(Shapes.PenLineCap);
            }, Shape, Shapes.PenLineCap.Flat, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            return Shape;
        })(Fayde.FrameworkElement);
        Shapes.Shape = Shape;
        Fayde.RegisterType(Shape, {
            Name: "Shape",
            Namespace: "Fayde.Shapes",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var BorderNode = (function (_super) {
            __extends(BorderNode, _super);
            function BorderNode(xobj) {
                _super.call(this, xobj);
                this.LayoutUpdater.SetContainerMode(true);
            }
            return BorderNode;
        })(Fayde.FENode);
        Controls.BorderNode = BorderNode;
        Fayde.RegisterType(BorderNode, {
            Name: "BorderNode",
            Namespace: "Fayde.Controls"
        });
        var Border = (function (_super) {
            __extends(Border, _super);
            function Border() {
                _super.apply(this, arguments);
            }
            Border.prototype.CreateNode = function () {
                return new BorderNode(this);
            };

            Border.prototype._MeasureOverride = function (availableSize, error) {
                var padding = this.Padding;
                var borderThickness = this.BorderThickness;
                var border = null;
                if (padding && borderThickness) {
                    border = padding.Plus(borderThickness);
                } else if (padding) {
                    border = padding.Clone();
                } else if (borderThickness) {
                    border = borderThickness.Clone();
                }
                var desired = new size();
                if (border)
                    availableSize = size.shrinkByThickness(size.copyTo(availableSize), border);
                var child = this.Child;
                if (child) {
                    var lu = child.XamlNode.LayoutUpdater;
                    lu._Measure(availableSize, error);
                    desired = size.copyTo(lu.DesiredSize);
                }
                if (border)
                    size.growByThickness(desired, border);
                size.min(desired, availableSize);
                return desired;
            };
            Border.prototype._ArrangeOverride = function (finalSize, error) {
                var child = this.Child;
                if (child) {
                    var padding = this.Padding;
                    var borderThickness = this.BorderThickness;
                    var border = null;
                    if (padding && borderThickness) {
                        border = padding.Plus(borderThickness);
                    } else if (padding) {
                        border = padding;
                    } else if (borderThickness) {
                        border = borderThickness;
                    }
                    var childRect = rect.fromSize(finalSize);
                    if (border)
                        rect.shrinkByThickness(childRect, border);
                    child.XamlNode.LayoutUpdater._Arrange(childRect, error);
                }
                return finalSize;
            };
            Border.prototype._ChildChanged = function (args) {
                var olduie = args.OldValue;
                var newuie = args.NewValue;
                var node = this.XamlNode;
                var error = new BError();
                if (olduie instanceof Fayde.UIElement)
                    node.DetachVisualChild(olduie, error);
                if (newuie instanceof Fayde.UIElement)
                    node.AttachVisualChild(newuie, error);
                if (error.Message)
                    error.ThrowException();
                var lu = node.LayoutUpdater;
                lu.UpdateBounds();
                lu.InvalidateMeasure();
            };
            Border.prototype._BackgroundChanged = function (args) {
                var lu = this.XamlNode.LayoutUpdater;
                var newBrush = args.NewValue;
                if (this._BackgroundListener)
                    this._BackgroundListener.Detach();
                this._BackgroundListener = null;
                if (newBrush)
                    this._BackgroundListener = newBrush.Listen(function (brush) {
                        return lu.Invalidate();
                    });
                lu.CanHitElement = newBrush != null || this.BorderBrush != null;
                lu.Invalidate();
            };
            Border.prototype._BorderBrushChanged = function (args) {
                var lu = this.XamlNode.LayoutUpdater;
                var newBrush = args.NewValue;
                if (this._BorderBrushListener)
                    this._BorderBrushListener.Detach();
                this._BorderBrushListener = null;
                if (newBrush)
                    this._BorderBrushListener = newBrush.Listen(function (brush) {
                        return lu.Invalidate();
                    });
                lu.CanHitElement = newBrush != null || this.Background != null;
                lu.Invalidate();
            };
            Border.prototype._BorderThicknessChanged = function (args) {
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
            };
            Border.prototype._PaddingChanged = function (args) {
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
            };
            Border.prototype.Render = function (ctx, lu, region) {
                var borderBrush = this.BorderBrush;
                var extents = lu.Extents;
                var backgroundBrush = this.Background;
                if (!backgroundBrush && !borderBrush)
                    return;
                if (rect.isEmpty(extents))
                    return;
                var thickness = this.BorderThickness;
                var fillOnly = !borderBrush || !thickness || thickness.IsEmpty();
                if (fillOnly && !backgroundBrush)
                    return;
                ctx.Save();
                lu.RenderLayoutClip(ctx);
                if (fillOnly)
                    this._RenderFillOnly(ctx, extents, backgroundBrush, thickness, this.CornerRadius);
else if (thickness && thickness.IsBalanced())
                    this._RenderBalanced(ctx, extents, backgroundBrush, borderBrush, thickness, this.CornerRadius);
else
                    this._RenderUnbalanced(ctx, extents, backgroundBrush, borderBrush, thickness, this.CornerRadius);
                ctx.Restore();
            };
            Border.prototype._RenderFillOnly = function (ctx, extents, backgroundBrush, thickness, cornerRadius) {
                var fillExtents = rect.copyTo(extents);
                if (thickness)
                    rect.shrinkByThickness(fillExtents, thickness);
                if (!cornerRadius || cornerRadius.IsZero()) {
                    ctx.FillRect(backgroundBrush, fillExtents);
                    return;
                }
                var rawPath = new Fayde.Shapes.RawPath();
                rawPath.RoundedRectFull(fillExtents.X, fillExtents.Y, fillExtents.Width, fillExtents.Height, cornerRadius.TopLeft, cornerRadius.TopRight, cornerRadius.BottomRight, cornerRadius.BottomLeft);
                rawPath.DrawRenderCtx(ctx);
                ctx.Fill(backgroundBrush, fillExtents);
            };
            Border.prototype._RenderBalanced = function (ctx, extents, backgroundBrush, borderBrush, thickness, cornerRadius) {
                var full = thickness.Left;
                var half = full * 0.5;
                var strokeExtents = rect.copyTo(extents);
                rect.shrinkBy(strokeExtents, half, half, half, half);
                var fillExtents = rect.copyTo(extents);
                rect.shrinkBy(fillExtents, full, full, full, full);
                if (!cornerRadius || cornerRadius.IsZero()) {
                    if (backgroundBrush) {
                        ctx.StrokeAndFillRect(borderBrush, thickness.Left, strokeExtents, backgroundBrush, fillExtents);
                    } else {
                        ctx.Rect(fillExtents);
                        ctx.Stroke(borderBrush, thickness.Left, extents);
                    }
                } else {
                    var rawPath = new Fayde.Shapes.RawPath();
                    rawPath.RoundedRectFull(strokeExtents.X, strokeExtents.Y, strokeExtents.Width, strokeExtents.Height, cornerRadius.TopLeft, cornerRadius.TopRight, cornerRadius.BottomRight, cornerRadius.BottomLeft);
                    rawPath.DrawRenderCtx(ctx);
                    if (backgroundBrush)
                        ctx.Fill(backgroundBrush, fillExtents);
                    ctx.Stroke(borderBrush, thickness.Left, extents);
                }
            };
            Border.prototype._RenderUnbalanced = function (ctx, extents, backgroundBrush, borderBrush, thickness, cornerRadius) {
                var hasCornerRadius = cornerRadius && !cornerRadius.IsZero();
                var innerExtents = rect.copyTo(extents);
                if (thickness)
                    rect.shrinkByThickness(innerExtents, thickness);
                var innerPath = new Fayde.Shapes.RawPath();
                var outerPath = new Fayde.Shapes.RawPath();
                if (hasCornerRadius) {
                    outerPath.RoundedRectFull(0, 0, extents.Width, extents.Height, cornerRadius.TopLeft, cornerRadius.TopRight, cornerRadius.BottomRight, cornerRadius.BottomLeft);
                    innerPath.RoundedRectFull(innerExtents.X - extents.X, innerExtents.Y - extents.Y, innerExtents.Width, innerExtents.Height, cornerRadius.TopLeft, cornerRadius.TopRight, cornerRadius.BottomRight, cornerRadius.BottomLeft);
                } else {
                    outerPath.Rect(0, 0, extents.Width, extents.Height);
                    innerPath.Rect(innerExtents.X - extents.X, innerExtents.Y - extents.Y, innerExtents.Width, innerExtents.Height);
                }
                var tmpCanvas = document.createElement("canvas");
                tmpCanvas.width = extents.Width;
                tmpCanvas.height = extents.Height;
                var tmpCtx = tmpCanvas.getContext("2d");
                outerPath.DrawCanvasCtx(tmpCtx);
                borderBrush.SetupBrush(tmpCtx, extents);
                tmpCtx.fillStyle = borderBrush.ToHtml5Object();
                tmpCtx.fill();
                tmpCtx.globalCompositeOperation = "xor";
                innerPath.DrawCanvasCtx(tmpCtx);
                tmpCtx.fill();
                ctx.CanvasContext.drawImage(tmpCanvas, extents.X, extents.Y);
                innerPath.DrawRenderCtx(ctx);
                if (backgroundBrush)
                    ctx.Fill(backgroundBrush, innerExtents);
            };
            Border.BackgroundProperty = DependencyProperty.RegisterCore("Background", function () {
                return Fayde.Media.Brush;
            }, Border, undefined, function (d, args) {
                return (d)._BackgroundChanged(args);
            });
            Border.BorderBrushProperty = DependencyProperty.RegisterCore("BorderBrush", function () {
                return Fayde.Media.Brush;
            }, Border, undefined, function (d, args) {
                return (d)._BorderBrushChanged(args);
            });
            Border.BorderThicknessProperty = DependencyProperty.RegisterFull("BorderThickness", function () {
                return Thickness;
            }, Border, undefined, function (d, args) {
                return (d)._BorderThicknessChanged(args);
            });
            Border.ChildProperty = DependencyProperty.Register("Child", function () {
                return Fayde.UIElement;
            }, Border, undefined, function (d, args) {
                return (d)._ChildChanged(args);
            });
            Border.CornerRadiusProperty = DependencyProperty.RegisterFull("CornerRadius", function () {
                return CornerRadius;
            }, Border);
            Border.PaddingProperty = DependencyProperty.RegisterFull("Padding", function () {
                return Thickness;
            }, Border, undefined, function (d, args) {
                return (d)._PaddingChanged(args);
            });

            Border.Annotations = { ContentProperty: Border.ChildProperty };
            return Border;
        })(Fayde.FrameworkElement);
        Controls.Border = Border;
        Fayde.RegisterType(Border, {
            Name: "Border",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ContentPresenterNode = (function (_super) {
            __extends(ContentPresenterNode, _super);
            function ContentPresenterNode(xobj) {
                _super.call(this, xobj);
            }
            Object.defineProperty(ContentPresenterNode.prototype, "ContentRoot", {
                get: function () {
                    return this._ContentRoot;
                },
                enumerable: true,
                configurable: true
            });

            ContentPresenterNode.prototype.DoApplyTemplateWithError = function (error) {
                if (this._ContentRoot)
                    return false;
                var xobj = this.XObject;
                if (xobj.TemplateOwner instanceof Controls.ContentControl) {
                    if (xobj.ReadLocalValue(ContentPresenter.ContentProperty) === Fayde.UnsetValue) {
                        xobj.SetValue(ContentPresenter.ContentProperty, new Fayde.TemplateBindingExpression(Controls.ContentControl.ContentProperty, ContentPresenter.ContentProperty));
                    }
                    if (xobj.ReadLocalValue(ContentPresenter.ContentTemplateProperty) === Fayde.UnsetValue) {
                        xobj.SetValue(ContentPresenter.ContentTemplateProperty, new Fayde.TemplateBindingExpression(Controls.ContentControl.ContentTemplateProperty, ContentPresenter.ContentTemplateProperty));
                    }
                }
                var content = xobj.Content;
                if (!content)
                    return false;
                if (content instanceof Fayde.UIElement)
                    this._ContentRoot = content;
else
                    this._ContentRoot = (xobj.ContentTemplate || this.FallbackTemplate).GetVisualTree(xobj);
                if (!this._ContentRoot)
                    return false;
                return this.AttachVisualChild(this._ContentRoot, error);
            };
            ContentPresenterNode.prototype.ClearRoot = function () {
                if (this._ContentRoot)
                    this.DetachVisualChild(this._ContentRoot, null);
                this._ContentRoot = null;
            };
            Object.defineProperty(ContentPresenterNode.prototype, "FallbackTemplate", {
                get: function () {
                    return Fayde.Xaml.Load("<DataTemplate xmlns=\"" + Fayde.XMLNS + "\"><Grid><TextBlock Text=\"{Binding}\" /></Grid></DataTemplate>");
                },
                enumerable: true,
                configurable: true
            });
            ContentPresenterNode.prototype._ContentChanged = function (args) {
                var newContent = args.NewValue;
                var newUie;
                if (newContent instanceof Fayde.UIElement)
                    newUie = newContent;
                if (newUie || args.OldValue instanceof Fayde.UIElement)
                    this.ClearRoot();
                if (newContent && !newUie)
                    this.XObject.DataContext = newContent;
else
                    this.XObject.DataContext = undefined;
                this.LayoutUpdater.InvalidateMeasure();
            };
            ContentPresenterNode.prototype._ContentTemplateChanged = function () {
                this.ClearRoot();
                this.LayoutUpdater.InvalidateMeasure();
            };
            return ContentPresenterNode;
        })(Fayde.FENode);
        Controls.ContentPresenterNode = ContentPresenterNode;
        Fayde.RegisterType(ContentPresenterNode, {
            Name: "ContentPresenterNode",
            Namespace: "Fayde.Controls"
        });
        var ContentPresenter = (function (_super) {
            __extends(ContentPresenter, _super);
            function ContentPresenter() {
                _super.apply(this, arguments);
            }
            ContentPresenter.prototype.CreateNode = function () {
                return new ContentPresenterNode(this);
            };
            ContentPresenter.ContentProperty = DependencyProperty.Register("Content", function () {
                return Object;
            }, ContentPresenter, undefined, function (d, args) {
                return ((d).XamlNode)._ContentChanged(args);
            });
            ContentPresenter.ContentTemplateProperty = DependencyProperty.Register("ContentTemplate", function () {
                return Fayde.DataTemplate;
            }, ContentPresenter, undefined, function (d, args) {
                return ((d).XamlNode)._ContentTemplateChanged();
            });

            ContentPresenter.Annotations = { ContentProperty: ContentPresenter.ContentProperty };
            return ContentPresenter;
        })(Fayde.FrameworkElement);
        Controls.ContentPresenter = ContentPresenter;
        Fayde.RegisterType(ContentPresenter, {
            Name: "ContentPresenter",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ControlNode = (function (_super) {
            __extends(ControlNode, _super);
            function ControlNode(xobj) {
                _super.call(this, xobj);
                this.IsFocused = false;
                this.LayoutUpdater.SetContainerMode(true);
                this.LayoutUpdater.IsNeverInsideObject = true;
            }
            ControlNode.prototype.TabTo = function () {
                var xobj = this.XObject;
                return xobj.IsEnabled && xobj.IsTabStop && this.Focus();
            };
            ControlNode.prototype.DoApplyTemplateWithError = function (error) {
                var xobj = this.XObject;
                var t = xobj.Template;
                var root;
                if (t)
                    root = t.GetVisualTree(xobj);
                if (!root && !(root = this.GetDefaultVisualTree()))
                    return false;
                if (this.TemplateRoot && this.TemplateRoot !== root)
                    this.DetachVisualChild(this.TemplateRoot, error);
                this.TemplateRoot = root;
                if (this.TemplateRoot)
                    this.AttachVisualChild(this.TemplateRoot, error);
                if (error.Message)
                    return false;
                return true;
            };
            ControlNode.prototype.GetDefaultVisualTree = function () {
                return undefined;
            };
            ControlNode.prototype.OnIsAttachedChanged = function (newIsAttached) {
                _super.prototype.OnIsAttachedChanged.call(this, newIsAttached);
                if (!newIsAttached)
                    Fayde.Media.VSM.VisualStateManager.DestroyStoryboards(this.XObject, this.TemplateRoot);
            };
            ControlNode.prototype.OnParentChanged = function (oldParentNode, newParentNode) {
                _super.prototype.OnParentChanged.call(this, oldParentNode, newParentNode);
                this.IsEnabled = newParentNode ? newParentNode.IsEnabled : true;
            };
            Object.defineProperty(ControlNode.prototype, "IsEnabled", {
                get: function () {
                    return this.XObject.IsEnabled;
                },
                set: function (value) {
                    Fayde.Providers.IsEnabledStore.EmitInheritedChanged(this, value);
                    this.OnIsEnabledChanged(undefined, value);
                },
                enumerable: true,
                configurable: true
            });
            ControlNode.prototype.OnIsEnabledChanged = function (oldValue, newValue) {
                if (!newValue) {
                    this.IsMouseOver = false;
                    var surface = this._Surface;
                    if (surface) {
                        surface._RemoveFocusFrom(this.LayoutUpdater);
                        Fayde.TabNavigationWalker.Focus(this, true);
                    }
                    this.ReleaseMouseCapture();
                }
                _super.prototype.OnIsEnabledChanged.call(this, oldValue, newValue);
            };
            ControlNode.prototype.Focus = function (recurse) {
                return this._Surface.Focus(this, recurse);
            };
            ControlNode.prototype.CanCaptureMouse = function () {
                return this.XObject.IsEnabled;
            };
            return ControlNode;
        })(Fayde.FENode);
        Controls.ControlNode = ControlNode;
        Fayde.RegisterType(ControlNode, {
            Name: "ControlNode",
            Namespace: "Fayde.Controls"
        });
        var Control = (function (_super) {
            __extends(Control, _super);
            function Control() {
                _super.apply(this, arguments);
                this._IsMouseOver = false;
                this.IsEnabledChanged = new MulticastEvent();
            }
            Control.prototype.CreateNode = function () {
                return new ControlNode(this);
            };

            Control.prototype.IsInheritable = function (propd) {
                if (ControlInheritedProperties.indexOf(propd) > -1)
                    return true;
                return (_super.prototype).IsInheritable.call(this, propd);
            };

            Object.defineProperty(Control.prototype, "IsFocused", {
                get: function () {
                    return this.XamlNode.IsFocused;
                },
                enumerable: true,
                configurable: true
            });
            Control.prototype.GetTemplateChild = function (childName) {
                var root = this.XamlNode.TemplateRoot;
                if (root) {
                    var n = root.XamlNode.FindName(childName);
                    if (n)
                        return n.XObject;
                }
            };
            Control.prototype.ApplyTemplate = function () {
                var error = new BError();
                var result = this.XamlNode.ApplyTemplateWithError(error);
                if (error.Message)
                    error.ThrowException();
                return result;
            };
            Control.prototype.GetDefaultStyle = function () {
                return undefined;
            };

            Control.prototype._IsEnabledChanged = function (args) {
                var lu = this.XamlNode.LayoutUpdater;
                lu.ShouldSkipHitTest = args.NewValue === false;
                lu.CanHitElement = args.NewValue !== false;
                this.OnIsEnabledChanged(args);
                if (args.NewValue !== true)
                    this.XamlNode.IsMouseOver = false;
                this.UpdateVisualState();
                this.IsEnabledChanged.RaiseAsync(this, args);
            };
            Control.prototype.OnIsEnabledChanged = function (e) {
            };
            Control.prototype.OnGotFocus = function (e) {
                this.XamlNode.IsFocused = true;
            };
            Control.prototype.OnLostFocus = function (e) {
                this.XamlNode.IsFocused = false;
            };
            Control.prototype.OnLostMouseCapture = function (e) {
            };
            Control.prototype.OnKeyDown = function (e) {
            };
            Control.prototype.OnKeyUp = function (e) {
            };
            Control.prototype.OnMouseEnter = function (e) {
            };
            Control.prototype.OnMouseLeave = function (e) {
            };
            Control.prototype.OnMouseLeftButtonDown = function (e) {
            };
            Control.prototype.OnMouseLeftButtonUp = function (e) {
            };
            Control.prototype.OnMouseMove = function (e) {
            };
            Control.prototype.OnMouseRightButtonDown = function (e) {
            };
            Control.prototype.OnMouseRightButtonUp = function (e) {
            };
            Control.prototype.OnMouseWheel = function (e) {
            };
            Control.prototype.UpdateVisualState = function (useTransitions) {
                useTransitions = useTransitions !== false;
                var states = this.GetVisualStateNamesToActivate();
                for (var i = 0; i < states.length; i++) {
                    Fayde.Media.VSM.VisualStateManager.GoToState(this, states[i], useTransitions);
                }
            };
            Control.prototype.GetVisualStateNamesToActivate = function () {
                var focusedState = this.GetVisualStateFocus();
                var commonState = this.GetVisualStateCommon();
                return [focusedState, commonState];
            };
            Control.prototype.GetVisualStateCommon = function () {
                if (!this.IsEnabled) {
                    return "Disabled";
                } else if (this.IsMouseOver) {
                    return "MouseOver";
                } else {
                    return "Normal";
                }
            };
            Control.prototype.GetVisualStateFocus = function () {
                if (this.IsFocused && this.IsEnabled)
                    return "Focused";
else
                    return "Unfocused";
            };
            Control.prototype._TemplateChanged = function (args) {
                var node = this.XamlNode;
                var subtree = node.SubtreeNode;
                if (subtree) {
                    var error = new BError();
                    if (!node.DetachVisualChild(subtree.XObject, error))
                        error.ThrowException();
                }
                node.LayoutUpdater.InvalidateMeasure();
            };
            Control.prototype._PaddingChanged = function (args) {
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
            };
            Control.prototype._BorderThicknessChanged = function (args) {
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
            };
            Control.prototype._ContentAlignmentChanged = function (args) {
                this.XamlNode.LayoutUpdater.InvalidateArrange();
            };
            Control.BackgroundProperty = DependencyProperty.RegisterCore("Background", function () {
                return Fayde.Media.Brush;
            }, Control);
            Control.BorderBrushProperty = DependencyProperty.RegisterCore("BorderBrush", function () {
                return Fayde.Media.Brush;
            }, Control);
            Control.BorderThicknessProperty = DependencyProperty.RegisterCore("BorderThickness", function () {
                return Thickness;
            }, Control, undefined, function (d, args) {
                return (d)._BorderThicknessChanged(args);
            });
            Control.FontFamilyProperty = Fayde.InheritableOwner.FontFamilyProperty.ExtendTo(Control);
            Control.FontSizeProperty = Fayde.InheritableOwner.FontSizeProperty.ExtendTo(Control);
            Control.FontStretchProperty = Fayde.InheritableOwner.FontStretchProperty.ExtendTo(Control);
            Control.FontStyleProperty = Fayde.InheritableOwner.FontStyleProperty.ExtendTo(Control);
            Control.FontWeightProperty = Fayde.InheritableOwner.FontWeightProperty.ExtendTo(Control);
            Control.ForegroundProperty = Fayde.InheritableOwner.ForegroundProperty.ExtendTo(Control);
            Control.HorizontalContentAlignmentProperty = DependencyProperty.Register("HorizontalContentAlignment", function () {
                return new Enum(Fayde.HorizontalAlignment);
            }, Control, Fayde.HorizontalAlignment.Center, function (d, args) {
                return (d)._ContentAlignmentChanged(args);
            });
            Control.IsEnabledProperty = DependencyProperty.Register("IsEnabled", function () {
                return Boolean;
            }, Control, true, function (d, args) {
                return (d)._IsEnabledChanged(args);
            });
            Control.IsTabStopProperty = DependencyProperty.Register("IsTabStop", function () {
                return Boolean;
            }, Control, true);
            Control.PaddingProperty = DependencyProperty.RegisterCore("Padding", function () {
                return Thickness;
            }, Control, undefined, function (d, args) {
                return (d)._BorderThicknessChanged(args);
            });
            Control.TabIndexProperty = DependencyProperty.Register("TabIndex", function () {
                return Number;
            }, Control);
            Control.TabNavigationProperty = DependencyProperty.Register("TabNavigation", function () {
                return new Enum(Fayde.Input.KeyboardNavigationMode);
            }, Control, Fayde.Input.KeyboardNavigationMode.Local);
            Control.TemplateProperty = DependencyProperty.Register("Template", function () {
                return Controls.ControlTemplate;
            }, Control, undefined, function (d, args) {
                return (d)._TemplateChanged(args);
            });
            Control.VerticalContentAlignmentProperty = DependencyProperty.Register("VerticalContentAlignment", function () {
                return new Enum(Fayde.VerticalAlignment);
            }, Control, Fayde.VerticalAlignment.Center, function (d, args) {
                return (d)._ContentAlignmentChanged(args);
            });
            Control.DefaultStyleKeyProperty = DependencyProperty.Register("DefaultStyleKey", function () {
                return Function;
            }, Control);
            return Control;
        })(Fayde.FrameworkElement);
        Controls.Control = Control;
        Fayde.RegisterType(Control, {
            Name: "Control",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
        Control.IsEnabledProperty.Store = Fayde.Providers.IsEnabledStore.Instance;
        var ControlInheritedProperties = [
            Control.FontFamilyProperty,
            Control.FontSizeProperty,
            Control.FontStretchProperty,
            Control.FontStyleProperty,
            Control.FontWeightProperty,
            Control.ForegroundProperty
        ];
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        function computeMatrix(width, height, sw, sh, stretch, alignX, alignY) {
            var sx = width / sw;
            var sy = height / sh;
            if (width === 0)
                sx = 1.0;
            if (height === 0)
                sy = 1.0;
            if (stretch === Fayde.Media.Stretch.Fill) {
                return mat3.createScale(sx, sy);
            }
            var scale = 1.0;
            var dx = 0.0;
            var dy = 0.0;
            switch (stretch) {
                case Fayde.Media.Stretch.Uniform:
                    scale = sx < sy ? sx : sy;
                    break;
                case Fayde.Media.Stretch.UniformToFill:
                    scale = sx < sy ? sy : sx;
                    break;
                case Fayde.Media.Stretch.None:
                    break;
            }
            switch (alignX) {
                case Fayde.Media.AlignmentX.Left:
                    dx = 0.0;
                    break;
                case Fayde.Media.AlignmentX.Center:
                    dx = (width - (scale * sw)) / 2;
                    break;
                case Fayde.Media.AlignmentX.Right:
                default:
                    dx = width - (scale * sw);
                    break;
            }
            switch (alignY) {
                case Fayde.Media.AlignmentY.Top:
                    dy = 0.0;
                    break;
                case Fayde.Media.AlignmentY.Center:
                    dy = (height - (scale * sh)) / 2;
                    break;
                case Fayde.Media.AlignmentY.Bottom:
                default:
                    dy = height - (scale * sh);
                    break;
            }
            var m = mat3.createScale(scale, scale);
            mat3.translate(m, dx, dy);
            return m;
        }
        function calculateRenderMetrics(img, source, lu) {
            var stretch = img.Stretch;
            var specified = size.fromRaw(img.ActualWidth, img.ActualHeight);
            var stretched = lu.CoerceSize(size.copyTo(specified));
            var adjust = !size.isEqual(specified, lu.RenderSize);
            var pixelWidth = source.PixelWidth;
            var pixelHeight = source.PixelHeight;
            if (pixelWidth === 0 || pixelHeight === 0)
                return null;
            if (stretch !== Fayde.Media.Stretch.UniformToFill)
                size.min(specified, stretched);
            var paint = rect.fromSize(specified);
            var image = new rect();
            image.Width = pixelWidth;
            image.Height = pixelHeight;
            if (stretch === Fayde.Media.Stretch.None)
                rect.union(paint, image);
            var matrix = computeMatrix(paint.Width, paint.Height, image.Width, image.Height, stretch, Fayde.Media.AlignmentX.Center, Fayde.Media.AlignmentY.Center);
            if (adjust) {
                (img)._MeasureOverride(specified, null);
                rect.set(paint, (stretched.Width - specified.Width) * 0.5, (stretched.Height - specified.Height) * 0.5, specified.Width, specified.Height);
            }
            var overlap = RectOverlap.In;
            if (stretch === Fayde.Media.Stretch.UniformToFill || adjust) {
                var bounds = rect.copyTo(paint);
                rect.roundOut(bounds);
                var box = rect.copyTo(image);
                rect.transform(box, matrix);
                rect.roundIn(box);
                overlap = rect.rectIn(bounds, box);
            }
            return {
                Matrix: matrix,
                Overlap: overlap
            };
        }

        var ImageNode = (function (_super) {
            __extends(ImageNode, _super);
            function ImageNode(xobj) {
                _super.call(this, xobj);
                this.LayoutUpdater.CanHitElement = true;
            }
            ImageNode.prototype.PostInsideObject = function (ctx, lu, x, y) {
                var img = this.XObject;
                var source = img.Source;
                if (!source)
                    return false;
                var stretch = img.Stretch;
                if (stretch === Fayde.Media.Stretch.Fill || stretch === Fayde.Media.Stretch.UniformToFill)
                    return true;
                var metrics = calculateRenderMetrics(img, source, lu);
                if (!metrics)
                    return null;
                var irect = new rect();
                irect.Width = source.PixelWidth;
                irect.Height = source.PixelHeight;
                rect.transform(irect, metrics.Matrix);
                var np = new Point(x, y);
                lu.TransformPoint(np);
                return rect.containsPoint(irect, np);
            };
            return ImageNode;
        })(Fayde.FENode);
        Controls.ImageNode = ImageNode;
        Fayde.RegisterType(ImageNode, {
            Name: "ImageNode",
            Namespace: "Fayde.Controls"
        });
        var Image = (function (_super) {
            __extends(Image, _super);
            function Image() {
                _super.apply(this, arguments);
                this.ImageOpened = new MulticastEvent();
                this.ImageFailed = new MulticastEvent();
            }
            Image.prototype.CreateNode = function () {
                return new ImageNode(this);
            };
            Image._SourceCoercer = function (d, propd, value) {
                if (typeof value === "string")
                    return new Fayde.Media.Imaging.BitmapImage(new Uri(value));
                if (value instanceof Uri)
                    return new Fayde.Media.Imaging.BitmapImage(value);
                return value;
            };

            Image.prototype._MeasureOverride = function (availableSize, error) {
                var desired = size.copyTo(availableSize);
                var shapeBounds = new rect();
                var source = this.Source;
                var sx = 0.0;
                var sy = 0.0;
                if (source) {
                    shapeBounds.Width = source.PixelWidth;
                    shapeBounds.Height = source.PixelHeight;
                }
                if (!isFinite(desired.Width))
                    desired.Width = shapeBounds.Width;
                if (!isFinite(desired.Height))
                    desired.Height = shapeBounds.Height;
                if (shapeBounds.Width > 0)
                    sx = desired.Width / shapeBounds.Width;
                if (shapeBounds.Height > 0)
                    sy = desired.Height / shapeBounds.Height;
                if (!isFinite(availableSize.Width))
                    sx = sy;
                if (!isFinite(availableSize.Height))
                    sy = sx;
                switch (this.Stretch) {
                    case Fayde.Media.Stretch.Uniform:
                        sx = sy = Math.min(sx, sy);
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        sx = sy = Math.max(sx, sy);
                        break;
                    case Fayde.Media.Stretch.Fill:
                        if (!isFinite(availableSize.Width))
                            sx = sy;
                        if (!isFinite(availableSize.Height))
                            sy = sx;
                        break;
                    case Fayde.Media.Stretch.None:
                        sx = sy = 1.0;
                        break;
                }
                desired.Width = shapeBounds.Width * sx;
                desired.Height = shapeBounds.Height * sy;
                return desired;
            };
            Image.prototype._ArrangeOverride = function (finalSize, error) {
                var arranged = size.copyTo(finalSize);
                var shapeBounds = new rect();
                var source = this.Source;
                var sx = 1.0;
                var sy = 1.0;
                if (source) {
                    shapeBounds.Width = source.PixelWidth;
                    shapeBounds.Height = source.PixelHeight;
                }
                if (shapeBounds.Width === 0)
                    shapeBounds.Width = arranged.Width;
                if (shapeBounds.Height === 0)
                    shapeBounds.Height = arranged.Height;
                if (shapeBounds.Width !== arranged.Width)
                    sx = arranged.Width / shapeBounds.Width;
                if (shapeBounds.Height !== arranged.Height)
                    sy = arranged.Height / shapeBounds.Height;
                switch (this.Stretch) {
                    case Fayde.Media.Stretch.Uniform:
                        sx = sy = Math.min(sx, sy);
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        sx = sy = Math.max(sx, sy);
                        break;
                    case Fayde.Media.Stretch.None:
                        sx = sy = 1.0;
                        break;
                    default:
                        break;
                }
                arranged.Width = shapeBounds.Width * sx;
                arranged.Height = shapeBounds.Height * sy;
                return arranged;
            };
            Image.prototype.Render = function (ctx, lu, region) {
                var source = this.Source;
                if (!source)
                    return;
                source.Lock();
                var metrics = calculateRenderMetrics(this, source, lu);
                if (!metrics) {
                    source.Unlock();
                    return;
                }
                ctx.Save();
                if (lu.CompositeLayoutClip || metrics.Overlap !== RectOverlap.In)
                    lu.RenderLayoutClip(ctx);
                ctx.PreTransformMatrix(metrics.Matrix);
                ctx.CanvasContext.drawImage(source.Image, 0, 0);
                ctx.Restore();
                source.Unlock();
            };
            Image.prototype.ComputeActualSize = function (baseComputer, lu) {
                var result = baseComputer.call(lu);
                var vpNode = this.XamlNode.VisualParentNode;
                if (parent && !(parent instanceof Controls.Canvas))
                    if (lu.LayoutSlot !== undefined)
                        return result;
                var source = this.Source;
                if (source) {
                    var available = lu.CoerceSize(size.createInfinite());
                    result = this._MeasureOverride(available, null);
                    lu.CoerceSize(result);
                }
                return result;
            };
            Image.prototype._SourceChanged = function (args) {
                var lu = this.XamlNode.LayoutUpdater;
                var oldSource = args.OldValue;
                var newSource = args.NewValue;
                if (oldSource instanceof Fayde.Media.Imaging.BitmapSource)
                    (oldSource).Unlisten(this);
                if (newSource instanceof Fayde.Media.Imaging.BitmapSource) {
                    (newSource).Listen(this);
                } else {
                    lu.UpdateBounds();
                    lu.Invalidate();
                }
                lu.InvalidateMeasure();
            };
            Image.prototype.OnImageErrored = function (source, e) {
                this.ImageFailed.Raise(this, EventArgs.Empty);
            };
            Image.prototype.OnImageLoaded = function (source, e) {
                this.ImageOpened.Raise(this, EventArgs.Empty);
            };
            Image.prototype.ImageChanged = function (source) {
                var lu = this.XamlNode.LayoutUpdater;
                lu.InvalidateMeasure();
                lu.Invalidate();
            };
            Image.SourceProperty = DependencyProperty.RegisterFull("Source", function () {
                return Fayde.Media.Imaging.ImageSource;
            }, Image, undefined, function (d, args) {
                return (d)._SourceChanged(args);
            }, Image._SourceCoercer);
            Image.StretchProperty = DependencyProperty.RegisterCore("Stretch", function () {
                return new Enum(Fayde.Media.Stretch);
            }, Image, Fayde.Media.Stretch.Uniform);
            return Image;
        })(Fayde.FrameworkElement);
        Controls.Image = Image;
        Fayde.RegisterType(Image, {
            Name: "Image",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ItemsControlNode = (function (_super) {
            __extends(ItemsControlNode, _super);
            function ItemsControlNode(xobj) {
                _super.call(this, xobj);
            }
            ItemsControlNode.prototype.GetDefaultVisualTree = function () {
                var presenter = this._Presenter;
                if (!presenter) {
                    this._Presenter = presenter = new Controls.ItemsPresenter();
                    presenter.TemplateOwner = this.XObject;
                }
                return presenter;
            };
            Object.defineProperty(ItemsControlNode.prototype, "ItemsPresenter", {
                get: function () {
                    return this._Presenter;
                },
                enumerable: true,
                configurable: true
            });
            ItemsControlNode.prototype._SetItemsPresenter = function (presenter) {
                if (this._Presenter)
                    this._Presenter.XamlNode.ElementRoot.Children.Clear();
                this._Presenter = presenter;
                var xobj = this.XObject;
                xobj.AddItemsToPresenter(ItemsControlNode._DefaultPosition, xobj.Items.Count);
            };
            ItemsControlNode._DefaultPosition = { Index: -1, Offset: 1 };
            return ItemsControlNode;
        })(Controls.ControlNode);
        Controls.ItemsControlNode = ItemsControlNode;
        Fayde.RegisterType(ItemsControlNode, {
            Name: "ItemsControlNode",
            Namespace: "Fayde.Controls"
        });
        var ItemsControl = (function (_super) {
            __extends(ItemsControl, _super);
            function ItemsControl() {
                _super.call(this);
                this._ItemsIsDataBound = false;
                this._Items = null;
                this._DisplayMemberTemplate = null;
                this.DefaultStyleKey = (this).constructor;
                var icg = new Controls.ItemContainerGenerator(this);
                icg.ItemsChanged.Subscribe(this.OnItemContainerGeneratorChanged, this);
                Object.defineProperty(this, "ItemContainerGenerator", {
                    value: icg,
                    writable: false
                });
            }
            ItemsControl.prototype.CreateNode = function () {
                return new ItemsControlNode(this);
            };

            Object.defineProperty(ItemsControl.prototype, "Items", {
                get: function () {
                    var items = this._Items;
                    if (!items) {
                        this._Items = items = new Controls.ItemCollection();
                        this._ItemsIsDataBound = true;
                        items.ItemsChanged.Subscribe(this.InvokeItemsChanged, this);
                        var storage = Fayde.Providers.GetStorage(this, ItemsControl.ItemsProperty);
                        storage.Precedence = Fayde.Providers.PropertyPrecedence.LocalValue;
                        storage.Local = items;
                    }
                    return items;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ItemsControl.prototype, "$Items", {
                get: function () {
                    return this.Items;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ItemsControl.prototype, "ItemsSource", {
                get: function () {
                    return this.GetValue(ItemsControl.ItemsSourceProperty);
                },
                set: function (value) {
                    if (!this._ItemsIsDataBound && this.Items.Count > 0)
                        throw new InvalidOperationException("Items collection must be empty before using ItemsSource");
                    this.SetValue(ItemsControl.ItemsSourceProperty, value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ItemsControl.prototype, "$DisplayMemberTemplate", {
                get: function () {
                    if (!this._DisplayMemberTemplate) {
                        this._DisplayMemberTemplate = Fayde.Xaml.Load("<DataTemplate xmlns=\"" + Fayde.XMLNS + "\"><Grid><TextBlock Text=\"{Binding " + this.DisplayMemberPath + "}\" /></Grid></DataTemplate>");
                    }
                    return this._DisplayMemberTemplate;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(ItemsControl.prototype, "Panel", {
                get: function () {
                    if (!this.XamlNode.ItemsPresenter)
                        return undefined;
                    return this.XamlNode.ItemsPresenter.ElementRoot;
                },
                enumerable: true,
                configurable: true
            });
            ItemsControl.GetItemsOwner = function (uie) {
                if (!(uie instanceof Controls.Panel))
                    return null;
                var panel = uie;
                if (!panel.IsItemsHost)
                    return null;
                var presenter = panel.TemplateOwner;
                if (!(presenter instanceof Controls.ItemsPresenter))
                    return null;
                var ic = presenter.TemplateOwner;
                if (ic instanceof ItemsControl)
                    return ic;
                return null;
            };
            ItemsControl.ItemsControlFromItemContainer = function (container) {
                if (!(container instanceof Fayde.FrameworkElement))
                    return null;
                var fe = container;
                var parentNode = fe.XamlNode.ParentNode;
                var parent = (parentNode) ? parentNode.XObject : null;
                var itctl;
                if (parent instanceof ItemsControl)
                    itctl = parent;
                if (itctl == null)
                    return ItemsControl.GetItemsOwner(parent);
                if (itctl.IsItemItsOwnContainer(fe))
                    return itctl;
                return null;
            };
            ItemsControl.prototype.OnItemsSourceChanged = function (e) {
                if (!e.OldValue && Nullstone.ImplementsInterface(e.OldValue, Fayde.Collections.INotifyCollectionChanged_)) {
                    (e.OldValue).CollectionChanged.Unsubscribe(this._CollectionChanged, this);
                }
                if (e.NewValue != null) {
                    var source = e.NewValue;
                    if (Nullstone.ImplementsInterface(source, Fayde.Collections.INotifyCollectionChanged_)) {
                        (source).CollectionChanged.Subscribe(this._CollectionChanged, this);
                    }
                    this.$Items.IsReadOnly = true;
                    this._ItemsIsDataBound = true;
                    this.$Items.ClearImpl();
                    var enumerator;
                    if (source instanceof Array)
                        enumerator = Fayde.ArrayEx.GetEnumerator(source);
else if (source instanceof Fayde.XamlObjectCollection)
                        enumerator = (source).GetEnumerator();
else if (Nullstone.ImplementsInterface(source, Fayde.IEnumerable_))
                        enumerator = (source).GetEnumerator();
                    if (enumerator) {
                        var items = this.$Items;
                        while (enumerator.MoveNext()) {
                            items.AddImpl(enumerator.Current);
                        }
                    }
                    this.OnItemsChanged(Fayde.Collections.NotifyCollectionChangedEventArgs.Reset());
                } else {
                    this._ItemsIsDataBound = false;
                    this.$Items.IsReadOnly = false;
                    this.$Items.ClearImpl();
                }
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
            };
            ItemsControl.prototype._CollectionChanged = function (sender, e) {
                var index;
                switch (e.Action) {
                    case Fayde.Collections.NotifyCollectionChangedAction.Add:
                        var enumerator = Fayde.ArrayEx.GetEnumerator(e.NewItems);
                        index = e.NewStartingIndex;
                        while (enumerator.MoveNext()) {
                            this.$Items.InsertImpl(index, enumerator.Current);
                            index++;
                        }
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                        var enumerator = Fayde.ArrayEx.GetEnumerator(e.OldItems);
                        while (enumerator.MoveNext()) {
                            this.$Items.RemoveAtImpl(e.OldStartingIndex);
                        }
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                        var enumerator = Fayde.ArrayEx.GetEnumerator(e.NewItems);
                        index = e.NewStartingIndex;
                        while (enumerator.MoveNext()) {
                            this.$Items.SetValueAtImpl(index, enumerator.Current);
                            index++;
                        }
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                        this.$Items.ClearImpl();
                        var enumerator = this.ItemsSource.GetEnumerator();
                        while (enumerator.MoveNext()) {
                            this.$Items.AddImpl(enumerator.Current);
                        }
                        break;
                }
                this.OnItemsChanged(e);
            };
            ItemsControl.prototype.OnDisplayMemberPathChanged = function (e) {
                var icg = this.ItemContainerGenerator;
                var i = 0;
                var enumerator = this.Items.GetEnumerator();
                while (enumerator.MoveNext()) {
                    this.UpdateContentTemplateOnContainer(icg.ContainerFromIndex(i), enumerator.Current);
                    i++;
                }
            };
            ItemsControl.prototype.PrepareContainerForItem = function (container, item) {
                if (this.DisplayMemberPath != null && this.ItemTemplate != null)
                    throw new InvalidOperationException("Cannot set 'DisplayMemberPath' and 'ItemTemplate' simultaenously");
                this.UpdateContentTemplateOnContainer(container, item);
            };
            ItemsControl.prototype.ClearContainerForItem = function (container, item) {
            };
            ItemsControl.prototype.GetContainerForItem = function () {
                return new Controls.ContentPresenter();
            };
            ItemsControl.prototype.IsItemItsOwnContainer = function (item) {
                return item instanceof Fayde.FrameworkElement;
            };
            ItemsControl.prototype.OnItemsChanged = function (e) {
            };
            ItemsControl.prototype.InvokeItemsChanged = function (sender, e) {
                this.ItemContainerGenerator.OnOwnerItemsItemsChanged(e);
                if (!this._ItemsIsDataBound)
                    this.OnItemsChanged(e);
            };
            ItemsControl.prototype.OnItemContainerGeneratorChanged = function (sender, e) {
                var panel = this.Panel;
                if (!panel || panel instanceof Controls.VirtualizingPanel)
                    return;
                switch (e.Action) {
                    case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                        var count = panel.Children.Count;
                        if (count > 0)
                            this.RemoveItemsFromPresenter({ Index: 0, Offset: 0 }, count);
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Add:
                        this.AddItemsToPresenter(e.Position, e.ItemCount);
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                        this.RemoveItemsFromPresenter(e.Position, e.ItemCount);
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                        this.RemoveItemsFromPresenter(e.Position, e.ItemCount);
                        this.AddItemsToPresenter(e.Position, e.ItemCount);
                        break;
                }
            };
            ItemsControl.prototype.OnItemTemplateChanged = function (e) {
                var enumerator = this.Items.GetEnumerator();
                var i = 0;
                var icg = this.ItemContainerGenerator;
                while (enumerator.MoveNext()) {
                    this.UpdateContentTemplateOnContainer(icg.ContainerFromIndex(i), enumerator.Current);
                    i++;
                }
            };
            ItemsControl.prototype.AddItemsToPresenter = function (position, count) {
                var panel = this.Panel;
                if (!panel || panel instanceof Controls.VirtualizingPanel)
                    return;
                var icg = this.ItemContainerGenerator;
                var newIndex = icg.IndexFromGeneratorPosition(position);
                var items = this.Items;
                var children = panel.Children;
                var state = icg.StartAt(position, true, true);
                try  {
                    for (var i = 0; i < count; i++) {
                        var item = items.GetValueAt(newIndex + i);
                        var container = icg.GenerateNext({ Value: null });
                        if (container instanceof Controls.ContentControl)
                            (container)._ContentSetsParent = false;
                        if (container instanceof Fayde.FrameworkElement && !(item instanceof Fayde.FrameworkElement))
                            container.DataContext = item;
                        children.Insert(newIndex + i, container);
                        icg.PrepareItemContainer(container);
                    }
                } finally {
                    state.Dispose();
                }
            };
            ItemsControl.prototype.RemoveItemsFromPresenter = function (position, count) {
                var panel = this.Panel;
                if (!panel || panel instanceof Controls.VirtualizingPanel)
                    return;
                while (count > 0) {
                    panel.Children.RemoveAt(position.Index);
                    count--;
                }
            };
            ItemsControl.prototype.UpdateContentTemplateOnContainer = function (element, item) {
                if (element === item)
                    return;
                var presenter;
                if (element instanceof Controls.ContentPresenter)
                    presenter = element;
                var control;
                if (element instanceof Controls.ContentControl)
                    control = element;
                var template;
                if (!(item instanceof Fayde.UIElement))
                    template = this.ItemTemplate || this.$DisplayMemberTemplate;
                if (presenter != null) {
                    presenter.ContentTemplate = template;
                    presenter.Content = item;
                } else if (control != null) {
                    control.ContentTemplate = template;
                    control.Content = item;
                }
            };
            ItemsControl.DisplayMemberPathProperty = DependencyProperty.Register("DisplayMemberPath", function () {
                return String;
            }, ItemsControl, null, function (d, args) {
                return (d).OnDisplayMemberPathChanged(args);
            });
            ItemsControl.ItemsPanelProperty = DependencyProperty.Register("ItemsPanel", function () {
                return Controls.ItemsPanelTemplate;
            }, ItemsControl);
            ItemsControl.ItemsSourceProperty = DependencyProperty.Register("ItemsSource", function () {
                return Fayde.IEnumerable_;
            }, ItemsControl, null, function (d, args) {
                return (d).OnItemsSourceChanged(args);
            });
            ItemsControl.ItemTemplateProperty = DependencyProperty.Register("ItemTemplate", function () {
                return Fayde.DataTemplate;
            }, ItemsControl, undefined, function (d, args) {
                return (d).OnItemTemplateChanged(args);
            });
            ItemsControl.ItemsProperty = DependencyProperty.RegisterImmutable("Items", function () {
                return Controls.ItemCollection;
            }, ItemsControl);

            ItemsControl.Annotations = { ContentProperty: ItemsControl.ItemsProperty };
            return ItemsControl;
        })(Controls.Control);
        Controls.ItemsControl = ItemsControl;
        Fayde.RegisterType(ItemsControl, {
            Name: "ItemsControl",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ItemsPresenterNode = (function (_super) {
            __extends(ItemsPresenterNode, _super);
            function ItemsPresenterNode(xobj) {
                _super.call(this, xobj);
            }
            Object.defineProperty(ItemsPresenterNode.prototype, "ElementRoot", {
                get: function () {
                    return this._ElementRoot;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ItemsPresenterNode.prototype, "StackPanelFallbackTemplate", {
                get: function () {
                    var spft = this._SPFT;
                    if (!spft)
                        spft = this._SPFT = Fayde.Xaml.Load("<ItemsPanelTemplate xmlns=\"" + Fayde.XMLNS + "\"><StackPanel /></ItemsPanelTemplate>");
                    return spft;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ItemsPresenterNode.prototype, "VirtualizingStackPanelFallbackTemplate", {
                get: function () {
                    var vspft = this._VSPFT;
                    if (!vspft)
                        vspft = this._VSPFT = Fayde.Xaml.Load("<ItemsPanelTemplate xmlns=\"" + Fayde.XMLNS + "\"><VirtualizingStackPanel /></ItemsPanelTemplate>");
                    return vspft;
                },
                enumerable: true,
                configurable: true
            });
            ItemsPresenterNode.prototype.DoApplyTemplateWithError = function (error) {
                if (this._ElementRoot)
                    return false;
                var xobj = this.XObject;
                var ic = xobj.TemplateOwner;
                if (!(ic instanceof Controls.ItemsControl))
                    return false;
                if (ic.ItemsPanel)
                    this._ElementRoot = ic.ItemsPanel.GetVisualTree(xobj);
                if (!this._ElementRoot) {
                    var template;
                    if (ic instanceof Controls.ListBox)
                        template = this.VirtualizingStackPanelFallbackTemplate;
else
                        template = this.StackPanelFallbackTemplate;
                    this._ElementRoot = template.GetVisualTree(xobj);
                }
                this._ElementRoot.IsItemsHost = true;
                if (!this.FinishApplyTemplateWithError(this._ElementRoot, error))
                    return false;
                ic.XamlNode._SetItemsPresenter(xobj);
                return true;
            };
            return ItemsPresenterNode;
        })(Fayde.FENode);
        Controls.ItemsPresenterNode = ItemsPresenterNode;
        Fayde.RegisterType(ItemsPresenterNode, {
            Name: "ItemsPresenterNode",
            Namespace: "Fayde.Controls"
        });
        var ItemsPresenter = (function (_super) {
            __extends(ItemsPresenter, _super);
            function ItemsPresenter() {
                _super.apply(this, arguments);
            }
            ItemsPresenter.prototype.CreateNode = function () {
                return new ItemsPresenterNode(this);
            };
            Object.defineProperty(ItemsPresenter.prototype, "ElementRoot", {
                get: function () {
                    return this.XamlNode.ElementRoot;
                },
                enumerable: true,
                configurable: true
            });
            return ItemsPresenter;
        })(Fayde.FrameworkElement);
        Controls.ItemsPresenter = ItemsPresenter;
        Fayde.RegisterType(ItemsPresenter, {
            Name: "ItemsPresenter",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var MENode = (function (_super) {
            __extends(MENode, _super);
            function MENode(xobj) {
                _super.call(this, xobj);
            }
            MENode.prototype.PostInsideObject = function (ctx, lu, x, y) {
                return false;
            };
            return MENode;
        })(Fayde.FENode);
        Controls.MENode = MENode;
        Fayde.RegisterType(MENode, {
            Name: "MENode",
            Namespace: "Fayde.Controls"
        });
        var MediaElement = (function (_super) {
            __extends(MediaElement, _super);
            function MediaElement() {
                _super.apply(this, arguments);
            }
            MediaElement.prototype.CreateNode = function () {
                return new MENode(this);
            };
            MediaElement.prototype._MeasureOverride = function (availableSize, error) {
                return availableSize;
            };
            MediaElement.prototype._ArrangeOverride = function (finalSize, error) {
                return finalSize;
            };
            return MediaElement;
        })(Fayde.FrameworkElement);
        Controls.MediaElement = MediaElement;
        Fayde.RegisterType(MediaElement, {
            Name: "MediaElement",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        function zIndexComparer(uin1, uin2) {
            var zi1 = Fayde.Controls.Panel.GetZIndex(uin1.XObject);
            var zi2 = Fayde.Controls.Panel.GetZIndex(uin2.XObject);
            if (zi1 === zi2) {
                var z1 = Fayde.Controls.Panel.GetZ(uin1.XObject);
                var z2 = Fayde.Controls.Panel.GetZ(uin2.XObject);
                if (isNaN(z1) || isNaN(z2))
                    return 0;
                return z1 > z2 ? 1 : (z1 < z2 ? -1 : 0);
            }
            return zi1 - zi2;
        }
        var PanelChildrenNode = (function (_super) {
            __extends(PanelChildrenNode, _super);
            function PanelChildrenNode() {
                _super.apply(this, arguments);
                this._Nodes = [];
                this._ZSorted = [];
            }
            PanelChildrenNode.prototype.AddNode = function (uin) {
                this._Nodes.push(uin);
            };
            PanelChildrenNode.prototype.RemoveNode = function (uin) {
                var nodes = this._Nodes;
                var index = nodes.indexOf(uin);
                if (index > -1)
                    nodes.splice(index, 1);
            };
            PanelChildrenNode.prototype.ResortByZIndex = function () {
                var zs = this._Nodes.slice(0);
                this._ZSorted = zs;
                if (zs.length > 1)
                    zs.sort(zIndexComparer);
            };
            PanelChildrenNode.prototype.GetVisualTreeEnumerator = function (direction) {
                switch (direction) {
                    default:
                    case Fayde.VisualTreeDirection.Logical:
                        return Fayde.ArrayEx.GetEnumerator(this._Nodes);
                    case Fayde.VisualTreeDirection.LogicalReverse:
                        return Fayde.ArrayEx.GetEnumerator(this._Nodes, true);
                    case Fayde.VisualTreeDirection.ZFoward:
                        if (this._ZSorted.length !== this._Nodes.length)
                            this.ResortByZIndex();
                        return Fayde.ArrayEx.GetEnumerator(this._ZSorted);
                    case Fayde.VisualTreeDirection.ZReverse:
                        if (this._ZSorted.length !== this._Nodes.length)
                            this.ResortByZIndex();
                        return Fayde.ArrayEx.GetEnumerator(this._ZSorted, true);
                }
            };
            return PanelChildrenNode;
        })(Fayde.XamlNode);
        Fayde.RegisterType(PanelChildrenNode, {
            Name: "PanelChildrenNode",
            Namespace: "Fayde.Controls"
        });
        var PanelChildrenCollection = (function (_super) {
            __extends(PanelChildrenCollection, _super);
            function PanelChildrenCollection() {
                _super.apply(this, arguments);
            }
            PanelChildrenCollection.prototype.CreateNode = function () {
                return new PanelChildrenNode(this);
            };
            PanelChildrenCollection.prototype.AddingToCollection = function (value, error) {
                var node = this.XamlNode;
                if (!node.ParentNode.AttachVisualChild(value, error))
                    return false;
                node.AddNode((value).XamlNode);
                return _super.prototype.AddingToCollection.call(this, value, error);
            };
            PanelChildrenCollection.prototype.RemovedFromCollection = function (value, isValueSafe) {
                var node = this.XamlNode;
                node.ParentNode.DetachVisualChild(value, null);
                node.RemoveNode((value).XamlNode);
                _super.prototype.RemovedFromCollection.call(this, value, isValueSafe);
            };
            return PanelChildrenCollection;
        })(Fayde.XamlObjectCollection);
        Fayde.RegisterType(PanelChildrenCollection, {
            Name: "PanelChildrenCollection",
            Namespace: "Fayde.Controls"
        });
        var PanelNode = (function (_super) {
            __extends(PanelNode, _super);
            function PanelNode(xobj) {
                _super.call(this, xobj);
                this.LayoutUpdater.SetContainerMode(true, true);
            }
            PanelNode.prototype.AttachVisualChild = function (uie, error) {
                this.OnVisualChildAttached(uie);
                uie.XamlNode.SetIsLoaded(this.IsLoaded);
                this._InvalidateChildrenZIndices();
                return true;
            };
            PanelNode.prototype.DetachVisualChild = function (uie, error) {
                this.OnVisualChildDetached(uie);
                uie.XamlNode.SetIsLoaded(false);
                this._InvalidateChildrenZIndices();
                return true;
            };
            PanelNode.prototype._InvalidateChildrenZIndices = function () {
                if (this.IsAttached) {
                }
            };
            PanelNode.prototype._ResortChildrenByZIndex = function () {
                (this.XObject.Children).XamlNode.ResortByZIndex();
            };
            PanelNode.prototype.OnIsAttachedChanged = function (newIsAttached) {
                this.SetSurfaceFromVisualParent();
                this.LayoutUpdater.OnIsAttachedChanged(newIsAttached, this.VisualParentNode);
                _super.prototype.OnIsAttachedChanged.call(this, newIsAttached);
            };
            PanelNode.prototype.PostInsideObject = function (ctx, lu, x, y) {
                return this.XObject.Background != null;
            };
            PanelNode.prototype.ComputeBounds = function (baseComputer, lu) {
                rect.clear(lu.Extents);
                rect.clear(lu.ExtentsWithChildren);
                var enumerator = this.GetVisualTreeEnumerator(Fayde.VisualTreeDirection.Logical);
                while (enumerator.MoveNext()) {
                    var item = enumerator.Current;
                    var itemlu = item.LayoutUpdater;
                    if (itemlu.TotalIsRenderVisible)
                        rect.union(lu.ExtentsWithChildren, itemlu.GlobalBoundsWithChildren);
                }
                if (this.XObject.Background) {
                    rect.set(lu.Extents, 0, 0, lu.ActualWidth, lu.ActualHeight);
                    rect.union(lu.ExtentsWithChildren, lu.Extents);
                }
                rect.copyGrowTransform(lu.Bounds, lu.Extents, lu.EffectPadding, lu.AbsoluteXform);
                rect.copyGrowTransform(lu.BoundsWithChildren, lu.ExtentsWithChildren, lu.EffectPadding, lu.AbsoluteXform);
                lu.ComputeGlobalBounds();
                lu.ComputeSurfaceBounds();
            };
            PanelNode.prototype.GetVisualTreeEnumerator = function (direction) {
                return this.XObject.Children.XamlNode.GetVisualTreeEnumerator(direction);
            };
            return PanelNode;
        })(Fayde.FENode);
        Controls.PanelNode = PanelNode;
        Fayde.RegisterType(PanelNode, {
            Name: "PanelNode",
            Namespace: "Fayde.Controls"
        });
        function zIndexPropertyChanged(dobj, args) {
            var xn = dobj.XamlNode;
            if (xn instanceof Fayde.UINode)
                (xn).LayoutUpdater.Invalidate();
            if (xn.IsAttached)
                (xn.ParentNode)._InvalidateChildrenZIndices();
        }
        var Panel = (function (_super) {
            __extends(Panel, _super);
            function Panel() {
                _super.call(this);
                var coll = Panel.ChildrenProperty.Initialize(this);
                var error = new BError();
                this.XamlNode.SetSubtreeNode(coll.XamlNode, error);
            }
            Panel.prototype.CreateNode = function () {
                return new PanelNode(this);
            };

            Panel.GetZIndex = function (uie) {
                return uie.GetValue(Panel.ZIndexProperty);
            };
            Panel.SetZIndex = function (uie, value) {
                uie.SetValue(Panel.ZIndexProperty, value);
            };
            Panel.GetZ = function (uie) {
                return uie.GetValue(Panel.ZProperty);
            };
            Panel.SetZ = function (uie, value) {
                uie.SetValue(Panel.ZProperty, value);
            };
            Panel.prototype._BackgroundChanged = function (args) {
                var lu = this.XamlNode.LayoutUpdater;
                var newBrush = args.NewValue;
                if (this._BackgroundListener)
                    this._BackgroundListener.Detach();
                this._BackgroundListener = null;
                if (newBrush)
                    this._BackgroundListener = newBrush.Listen(function (brush) {
                        return lu.Invalidate();
                    });
                lu.CanHitElement = newBrush != null;
                lu.UpdateBounds();
                lu.Invalidate();
            };
            Panel.prototype._MeasureOverride = function (availableSize, error) {
                return new size();
            };
            Panel.prototype.Render = function (ctx, lu, region) {
                var background = this.Background;
                if (!background)
                    return;
                var framework = lu.CoerceSize(size.fromRaw(this.ActualWidth, this.ActualHeight));
                if (framework.Width <= 0 || framework.Height <= 0)
                    return;
                var area = rect.fromSize(framework);
                ctx.Save();
                lu.RenderLayoutClip(ctx);
                ctx.FillRect(background, area);
                ctx.Restore();
            };
            Panel.ZIndexProperty = DependencyProperty.RegisterAttached("ZIndex", function () {
                return Number;
            }, Panel, 0, zIndexPropertyChanged);
            Panel.ZProperty = DependencyProperty.RegisterAttached("Z", function () {
                return Number;
            }, Panel, NaN);
            Panel.BackgroundProperty = DependencyProperty.Register("Background", function () {
                return Fayde.Media.Brush;
            }, Panel, undefined, function (d, args) {
                return (d)._BackgroundChanged(args);
            });
            Panel.IsItemsHostProperty = DependencyProperty.Register("IsItemHost", function () {
                return Boolean;
            }, Panel, false);
            Panel.ChildrenProperty = DependencyProperty.RegisterImmutable("Children", function () {
                return PanelChildrenCollection;
            }, Panel);

            Panel.Annotations = { ContentProperty: Panel.ChildrenProperty };
            return Panel;
        })(Fayde.FrameworkElement);
        Controls.Panel = Panel;
        Fayde.RegisterType(Panel, {
            Name: "Panel",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var _RichTextBoxView = (function () {
            function _RichTextBoxView() {
            }
            return _RichTextBoxView;
        })();
        Controls._RichTextBoxView = _RichTextBoxView;
        Fayde.RegisterType(_RichTextBoxView, {
            Name: "_RichTextBoxView",
            Namespace: "Fayde.Controls"
        });
        var RichTextBox = (function (_super) {
            __extends(RichTextBox, _super);
            function RichTextBox() {
                _super.apply(this, arguments);
            }
            return RichTextBox;
        })(Controls.Control);
        Controls.RichTextBox = RichTextBox;
        Fayde.RegisterType(RichTextBox, {
            Name: "RichTextBox",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ScrollContentPresenter = (function (_super) {
            __extends(ScrollContentPresenter, _super);
            function ScrollContentPresenter() {
                _super.apply(this, arguments);
                this._ScrollData = new Controls.Primitives.ScrollData();
                this._IsClipPropertySet = false;
                this._ClippingRectangle = null;
            }
            Object.defineProperty(ScrollContentPresenter.prototype, "ScrollOwner", {
                get: function () {
                    return this._ScrollData.ScrollOwner;
                },
                set: function (value) {
                    this._ScrollData.ScrollOwner = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "CanHorizontallyScroll", {
                get: function () {
                    return this._ScrollData.CanHorizontallyScroll;
                    ;
                },
                set: function (value) {
                    var sd = this._ScrollData;
                    if (sd.CanHorizontallyScroll !== value) {
                        sd.CanHorizontallyScroll = value;
                        this.XamlNode.LayoutUpdater.InvalidateMeasure();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "CanVerticallyScroll", {
                get: function () {
                    return this._ScrollData.CanVerticallyScroll;
                },
                set: function (value) {
                    var sd = this._ScrollData;
                    if (sd.CanVerticallyScroll !== value) {
                        sd.CanVerticallyScroll = value;
                        this.XamlNode.LayoutUpdater.InvalidateMeasure();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "ExtentWidth", {
                get: function () {
                    return this._ScrollData.ExtentWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "ExtentHeight", {
                get: function () {
                    return this._ScrollData.ExtentHeight;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "ViewportWidth", {
                get: function () {
                    return this._ScrollData.ViewportWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "ViewportHeight", {
                get: function () {
                    return this._ScrollData.ViewportHeight;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "HorizontalOffset", {
                get: function () {
                    return this._ScrollData.OffsetX;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScrollContentPresenter.prototype, "VerticalOffset", {
                get: function () {
                    return this._ScrollData.OffsetY;
                },
                enumerable: true,
                configurable: true
            });
            ScrollContentPresenter.prototype.LineUp = function () {
                this.SetVerticalOffset(this._ScrollData.OffsetY - 16);
            };
            ScrollContentPresenter.prototype.LineDown = function () {
                this.SetVerticalOffset(this._ScrollData.OffsetY + 16);
            };
            ScrollContentPresenter.prototype.LineLeft = function () {
                this.SetHorizontalOffset(this._ScrollData.OffsetX - 16);
            };
            ScrollContentPresenter.prototype.LineRight = function () {
                this.SetHorizontalOffset(this._ScrollData.OffsetX + 16);
            };
            ScrollContentPresenter.prototype.MouseWheelUp = function () {
                this.SetVerticalOffset(this._ScrollData.OffsetY - 48);
            };
            ScrollContentPresenter.prototype.MouseWheelDown = function () {
                this.SetVerticalOffset(this._ScrollData.OffsetY + 48);
            };
            ScrollContentPresenter.prototype.MouseWheelLeft = function () {
                this.SetHorizontalOffset(this._ScrollData.OffsetX - 48);
            };
            ScrollContentPresenter.prototype.MouseWheelRight = function () {
                this.SetHorizontalOffset(this._ScrollData.OffsetX + 48);
            };
            ScrollContentPresenter.prototype.PageUp = function () {
                this.SetVerticalOffset(this._ScrollData.OffsetY - this._ScrollData.ViewportHeight);
            };
            ScrollContentPresenter.prototype.PageDown = function () {
                this.SetVerticalOffset(this._ScrollData.OffsetY + this._ScrollData.ViewportHeight);
            };
            ScrollContentPresenter.prototype.PageLeft = function () {
                this.SetHorizontalOffset(this._ScrollData.OffsetX - this._ScrollData.ViewportWidth);
            };
            ScrollContentPresenter.prototype.PageRight = function () {
                this.SetHorizontalOffset(this._ScrollData.OffsetX + this._ScrollData.ViewportWidth);
            };
            ScrollContentPresenter.prototype.MakeVisible = function (uie, rectangle) {
                if (rect.isEmpty(rectangle) || !uie || uie === this || !this.XamlNode.IsAncestorOf(uie.XamlNode))
                    return new rect();
                var generalTransform = uie.TransformToVisual(this);
                var point = generalTransform.Transform(new Point(rectangle.X, rectangle.Y));
                rectangle = rect.copyTo(rectangle);
                rectangle.X = point.X;
                rectangle.Y = point.Y;
                return rectangle;
                var irect = new rect();
                rect.set(irect, this.HorizontalOffset, this.VerticalOffset, this.ViewportWidth, this.ViewportHeight);
                rectangle.X += irect.X;
                rectangle.Y += irect.Y;
                var num = computeScrollOffsetWithMinimalScroll(irect.X, irect.X + irect.Width, rectangle.X, rectangle.X + rectangle.Width);
                var num1 = computeScrollOffsetWithMinimalScroll(irect.Y, irect.Y + irect.Height, rectangle.Y, rectangle.Y + rectangle.Height);
                this.SetHorizontalOffset(num);
                this.SetVerticalOffset(num1);
                irect.X = num;
                irect.Y = num1;
                rect.intersection(rectangle, irect);
                if (!rect.isEmpty(rectangle)) {
                    rectangle.X -= irect.X;
                    rectangle.Y -= irect.Y;
                }
                return rectangle;
            };
            ScrollContentPresenter.prototype.SetHorizontalOffset = function (offset) {
                if (!this.CanHorizontallyScroll)
                    return;
                var valid = validateInputOffset(offset);
                if (areNumbersClose(this._ScrollData.OffsetX, valid))
                    return;
                this._ScrollData.CachedOffsetX = valid;
                this.XamlNode.LayoutUpdater.InvalidateArrange();
            };
            ScrollContentPresenter.prototype.SetVerticalOffset = function (offset) {
                if (!this.CanVerticallyScroll)
                    return;
                var valid = validateInputOffset(offset);
                if (areNumbersClose(this._ScrollData.OffsetY, valid))
                    return;
                this._ScrollData.CachedOffsetY = valid;
                this.XamlNode.LayoutUpdater.InvalidateArrange();
            };
            ScrollContentPresenter.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                var sv;
                if (this.TemplateOwner instanceof Controls.ScrollViewer)
                    sv = this.TemplateOwner;
else
                    return;
                var content = this.Content;
                var info;
                if (Nullstone.ImplementsInterface(content, Controls.Primitives.IScrollInfo_))
                    info = content;
                if (!info) {
                    if (content instanceof Controls.ItemsPresenter) {
                        var presenter = content;
                        var er = presenter.ElementRoot;
                        if (Nullstone.ImplementsInterface(er, Controls.Primitives.IScrollInfo_))
                            info = er;
                    }
                }
                if (!info)
                    info = this;
                info.CanHorizontallyScroll = sv.HorizontalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                info.CanVerticallyScroll = sv.VerticalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                info.ScrollOwner = sv;
                sv.ScrollInfo = info;
                sv.InvalidateScrollInfo();
            };
            ScrollContentPresenter.prototype._MeasureOverride = function (availableSize, error) {
                var scrollOwner = this.ScrollOwner;
                var cr = (this.XamlNode).ContentRoot;
                if (!scrollOwner || !cr)
                    return (_super.prototype)._MeasureOverride.call(this, availableSize, error);
                var ideal = size.createInfinite();
                if (!this.CanHorizontallyScroll)
                    ideal.Width = availableSize.Width;
                if (!this.CanVerticallyScroll)
                    ideal.Height = availableSize.Height;
                cr.Measure(ideal);
                var crds = cr.DesiredSize;
                this._UpdateExtents(availableSize, crds.Width, crds.Height);
                var desired = size.copyTo(availableSize);
                var sd = this._ScrollData;
                desired.Width = Math.min(desired.Width, sd.ExtentWidth);
                desired.Height = Math.min(desired.Height, sd.ExtentHeight);
                return desired;
            };
            ScrollContentPresenter.prototype._ArrangeOverride = function (finalSize, error) {
                var scrollOwner = this.ScrollOwner;
                var cr = (this.XamlNode).ContentRoot;
                if (!scrollOwner || !cr)
                    return (_super.prototype)._ArrangeOverride.call(this, finalSize, error);
                if (this._ClampOffsets())
                    scrollOwner.InvalidateScrollInfo();
                var desired = cr.DesiredSize;
                var start = new Point(-this.HorizontalOffset, -this.VerticalOffset);
                var offerSize = size.copyTo(desired);
                size.max(offerSize, finalSize);
                var childRect = rect.fromSize(offerSize);
                childRect.X = start.X;
                childRect.Y = start.Y;
                cr.Arrange(childRect);
                this._UpdateClip(finalSize);
                var sd = this._ScrollData;
                this._UpdateExtents(finalSize, sd.ExtentWidth, sd.ExtentHeight);
                return finalSize;
            };
            ScrollContentPresenter.prototype._UpdateExtents = function (viewport, extentWidth, extentHeight) {
                var sd = this._ScrollData;
                var changed = sd.ViewportWidth !== viewport.Width || sd.ViewportHeight !== viewport.Height || sd.ExtentWidth !== extentWidth || sd.ExtentHeight !== extentHeight;
                sd.ViewportWidth = viewport.Width;
                sd.ViewportHeight = viewport.Height;
                sd.ExtentWidth = extentWidth;
                sd.ExtentHeight = extentHeight;
                if (this._ClampOffsets())
                    changed = true;
                if (changed)
                    this.ScrollOwner.InvalidateScrollInfo();
            };
            ScrollContentPresenter.prototype._ClampOffsets = function () {
                var changed = false;
                var sd = this._ScrollData;
                var result = this.CanHorizontallyScroll ? Math.min(sd.CachedOffsetX, sd.ExtentWidth - sd.ViewportWidth) : 0;
                result = Math.max(0, result);
                if (!areNumbersClose(result, this.HorizontalOffset)) {
                    sd.OffsetX = result;
                    changed = true;
                }
                result = this.CanVerticallyScroll ? Math.min(sd.CachedOffsetY, sd.ExtentHeight - sd.ViewportHeight) : 0;
                result = Math.max(0, result);
                if (!areNumbersClose(result, this.VerticalOffset)) {
                    sd.OffsetY = result;
                    changed = true;
                }
                return changed;
            };
            ScrollContentPresenter.prototype._UpdateClip = function (arrangeSize) {
                if (!this._IsClipPropertySet) {
                    this._ClippingRectangle = new Fayde.Media.RectangleGeometry();
                    this.Clip = this._ClippingRectangle;
                    this._IsClipPropertySet = true;
                }
                var content;
                if (this.TemplateOwner instanceof Fayde.Controls.ScrollViewer && (content = this.Content) && (content instanceof Fayde.Controls.Internal.TextBoxView || content instanceof Fayde.Controls._RichTextBoxView)) {
                    this._ClippingRectangle.Rect = this._CalculateTextBoxClipRect(arrangeSize);
                } else {
                    this._ClippingRectangle.Rect = rect.fromSize(arrangeSize);
                }
            };
            ScrollContentPresenter.prototype._CalculateTextBoxClipRect = function (arrangeSize) {
                var left = 0;
                var right = 0;
                var sd = this._ScrollData;
                var width = sd.ExtentWidth;
                var num = sd.ViewportWidth;
                var x = sd.OffsetX;
                var templatedParent;
                if (this.TemplateOwner instanceof Controls.ScrollViewer)
                    templatedParent = this.TemplateOwner;
                var to = templatedParent.TemplateOwner;
                var textWrapping = Controls.TextWrapping.NoWrap;
                var horizontalScrollBarVisibility = Controls.ScrollBarVisibility.Disabled;
                if (to instanceof Controls.TextBox) {
                    var textbox = to;
                    textWrapping = textbox.TextWrapping;
                    horizontalScrollBarVisibility = textbox.HorizontalScrollBarVisibility;
                } else if (to instanceof Controls.RichTextBox) {
                    var richtextbox = to;
                    textWrapping = richtextbox.TextWrapping;
                    horizontalScrollBarVisibility = richtextbox.HorizontalScrollBarVisibility;
                }
                var padding = templatedParent.Padding;
                if (textWrapping !== Controls.TextWrapping.Wrap) {
                    if (num > width || x === 0)
                        left = padding.Left + 1;
                    if (num > width || horizontalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled && Math.abs(width - x + num) <= 1)
                        right = padding.Right + 1;
                } else {
                    left = padding.Left + 1;
                    right = padding.Right + 1;
                }
                left = Math.max(0, left);
                right = Math.max(0, right);
                var r = new rect();
                rect.set(r, -left, 0, arrangeSize.Width + left + right, arrangeSize.Height);
                return r;
            };
            return ScrollContentPresenter;
        })(Controls.ContentPresenter);
        Controls.ScrollContentPresenter = ScrollContentPresenter;
        Fayde.RegisterType(ScrollContentPresenter, {
            Name: "ScrollContentPresenter",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS,
            Interfaces: [Controls.Primitives.IScrollInfo_]
        });
        function validateInputOffset(offset) {
            if (!isNaN(offset))
                return Math.max(0, offset);
            throw new ArgumentException("Offset is not a number.");
        }
        function areNumbersClose(val1, val2) {
            if (val1 === val2)
                return true;
            var num1 = (Math.abs(val1) + Math.abs(val2) + 10) * 1.11022302462516E-16;
            var num2 = val1 - val2;
            return -num1 < num2 && num1 > num2;
        }
        function isNumberLessThan(val1, val2) {
            if (val1 >= val2)
                return false;
            return !areNumbersClose(val1, val2);
        }
        function isNumberGreaterThan(val1, val2) {
            if (val1 <= val2)
                return false;
            return !areNumbersClose(val1, val2);
        }
        function computeScrollOffsetWithMinimalScroll(topView, bottomView, topChild, bottomChild) {
            var flag = isNumberLessThan(topChild, topView) && isNumberLessThan(bottomChild, bottomView);
            var flag1 = isNumberGreaterThan(topChild, topView) && isNumberGreaterThan(bottomChild, bottomView);
            var flag4 = (bottomChild - topChild) > (bottomView - topView);
            if ((!flag || flag4) && (!flag1 || !flag4)) {
                if (flag || flag1)
                    return bottomChild - bottomView - topView;
                return topView;
            }
            return topChild;
        }
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var StackPanel = (function (_super) {
            __extends(StackPanel, _super);
            function StackPanel() {
                _super.apply(this, arguments);
            }
            StackPanel.prototype._OrientationChanged = function (args) {
                var lu = this.XamlNode.LayoutUpdater;
                lu.InvalidateMeasure();
                lu.InvalidateArrange();
            };
            StackPanel.prototype._MeasureOverride = function (availableSize, error) {
                var childAvailable = size.createInfinite();
                var measured = new size();
                var isVertical = this.Orientation === Fayde.Orientation.Vertical;
                if (isVertical) {
                    childAvailable.Width = availableSize.Width;
                    var width = this.Width;
                    if (!isNaN(width))
                        childAvailable.Width = width;
                    childAvailable.Width = Math.min(childAvailable.Width, this.MaxWidth);
                    childAvailable.Width = Math.max(childAvailable.Width, this.MinWidth);
                } else {
                    childAvailable.Height = availableSize.Height;
                    var height = this.Height;
                    if (!isNaN(height))
                        childAvailable.Height = height;
                    childAvailable.Height = Math.min(childAvailable.Height, this.MaxHeight);
                    childAvailable.Height = Math.max(childAvailable.Height, this.MinHeight);
                }
                var enumerator = this.Children.GetEnumerator();
                var child;
                var childNode;
                var childLu;
                while (enumerator.MoveNext()) {
                    child = enumerator.Current;
                    childNode = child.XamlNode;
                    var childLu = childNode.LayoutUpdater;
                    childLu._Measure(childAvailable, error);
                    var s = childLu.DesiredSize;
                    if (isVertical) {
                        measured.Height += s.Height;
                        measured.Width = Math.max(measured.Width, s.Width);
                    } else {
                        measured.Width += s.Width;
                        measured.Height = Math.max(measured.Height, s.Height);
                    }
                }
                return measured;
            };
            StackPanel.prototype._ArrangeOverride = function (finalSize, error) {
                var arranged = size.copyTo(finalSize);
                var isVertical = this.Orientation === Fayde.Orientation.Vertical;
                if (isVertical)
                    arranged.Height = 0;
else
                    arranged.Width = 0;
                var enumerator = this.Children.GetEnumerator();
                var child;
                var childNode;
                var childLu;
                while (enumerator.MoveNext()) {
                    child = enumerator.Current;
                    childNode = child.XamlNode;
                    var childLu = childNode.LayoutUpdater;
                    var s = size.copyTo(childLu.DesiredSize);
                    if (isVertical) {
                        s.Width = finalSize.Width;
                        var childFinal = rect.fromSize(s);
                        childFinal.Y = arranged.Height;
                        if (rect.isEmpty(childFinal))
                            rect.clear(childFinal);
                        childLu._Arrange(childFinal, error);
                        arranged.Width = Math.max(arranged.Width, s.Width);
                        arranged.Height += s.Height;
                    } else {
                        s.Height = finalSize.Height;
                        var childFinal = rect.fromSize(s);
                        childFinal.X = arranged.Width;
                        if (rect.isEmpty(childFinal))
                            rect.clear(childFinal);
                        childLu._Arrange(childFinal, error);
                        arranged.Width += s.Width;
                        arranged.Height = Math.max(arranged.Height, s.Height);
                    }
                }
                if (isVertical)
                    arranged.Height = Math.max(arranged.Height, finalSize.Height);
else
                    arranged.Width = Math.max(arranged.Width, finalSize.Width);
                return arranged;
            };
            StackPanel.OrientationProperty = DependencyProperty.Register("Orientation", function () {
                return new Enum(Fayde.Orientation);
            }, StackPanel, Fayde.Orientation.Vertical, function (d, args) {
                return (d)._OrientationChanged(args);
            });
            return StackPanel;
        })(Controls.Panel);
        Controls.StackPanel = StackPanel;
        Fayde.RegisterType(StackPanel, {
            Name: "StackPanel",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var TextBlockNode = (function (_super) {
            __extends(TextBlockNode, _super);
            function TextBlockNode(xobj) {
                _super.call(this, xobj);
                this._ActualWidth = 0.0;
                this._ActualHeight = 0.0;
                this._Layout = new Fayde.Text.TextLayout();
                this._WasSet = true;
                this._Dirty = true;
                this._Font = new Font();
                this._SetsValue = true;
                this.LayoutUpdater.CanHitElement = true;
            }
            TextBlockNode.prototype.GetInheritedEnumerator = function () {
                var xobj = this.XObject;
                var inlines = xobj.Inlines;
                if (inlines)
                    return inlines.GetNodeEnumerator();
            };
            TextBlockNode.prototype.ComputeBounds = function (baseComputer, lu) {
                rect.copyTo(this._Layout.RenderExtents, lu.Extents);
                var padding = this.XObject.Padding;
                if (padding) {
                    lu.Extents.X += padding.Left;
                    lu.Extents.Y += padding.Top;
                }
                rect.copyTo(lu.Extents, lu.ExtentsWithChildren);
                lu.IntersectBoundsWithClipPath(lu.Bounds, lu.AbsoluteXform);
                rect.copyTo(lu.Bounds, lu.BoundsWithChildren);
                lu.ComputeGlobalBounds();
                lu.ComputeSurfaceBounds();
            };
            TextBlockNode.prototype.Measure = function (constraint) {
                this.Layout(constraint);
                return size.fromRaw(this._ActualWidth, this._ActualHeight);
            };
            TextBlockNode.prototype.Arrange = function (constraint, padding) {
                this.Layout(constraint);
                var arranged = size.fromRaw(this._ActualWidth, this._ActualHeight);
                size.max(arranged, constraint);
                this._Layout.AvailableWidth = constraint.Width;
                if (padding)
                    size.growByThickness(arranged, padding);
            };
            TextBlockNode.prototype.Layout = function (constraint) {
                if (this._WasSet) {
                    if (false) {
                        this._ActualHeight = this._Font.GetActualHeight();
                        this._ActualWidth = 0.0;
                    } else {
                        this._Layout.MaxWidth = constraint.Width;
                        this._Layout.Layout();
                        var actuals = this._Layout.ActualExtents;
                        this._ActualWidth = actuals.Width;
                        this._ActualHeight = actuals.Height;
                    }
                } else {
                    this._ActualHeight = 0.0;
                    this._ActualWidth = 0.0;
                }
                this._Dirty = false;
            };
            TextBlockNode.prototype.ComputeActualSize = function (lu, padding) {
                var constraint = lu.CoerceSize(size.createInfinite());
                if (lu.PreviousConstraint !== undefined || lu.LayoutSlot !== undefined) {
                    this._Layout.Layout();
                    var actuals = this._Layout.ActualExtents;
                    this._ActualWidth = actuals.Width;
                    this._ActualHeight = actuals.Height;
                } else {
                    if (padding)
                        size.shrinkByThickness(constraint, padding);
                    this.Layout(constraint);
                }
                var result = size.fromRaw(this._ActualWidth, this._ActualHeight);
                if (padding)
                    size.growByThickness(result, padding);
                return result;
            };
            TextBlockNode.prototype._FontChanged = function (args) {
                this._UpdateFonts(false);
                this._InvalidateDirty();
            };
            TextBlockNode.prototype._TextChanged = function (args) {
                if (this._SetsValue) {
                    this._SetTextInternal(args.NewValue);
                    this._UpdateLayoutAttributes();
                    this._InvalidateDirty(true);
                } else {
                    this._UpdateLayoutAttributes();
                }
            };
            TextBlockNode.prototype._LineStackingStrategyChanged = function (args) {
                this._Dirty = this._Layout.SetLineStackingStategy(args.NewValue);
                this._InvalidateDirty();
            };
            TextBlockNode.prototype._LineHeightChanged = function (args) {
                this._Dirty = this._Layout.SetLineHeight(args.NewValue);
                this._InvalidateDirty();
            };
            TextBlockNode.prototype._TextAlignmentChanged = function (args) {
                this._Dirty = this._Layout.SetTextAlignment(args.NewValue);
                this._InvalidateDirty();
            };
            TextBlockNode.prototype._TextTrimmingChanged = function (args) {
                this._Dirty = this._Layout.SetTextTrimming(args.NewValue);
                this._InvalidateDirty();
            };
            TextBlockNode.prototype._TextWrappingChanged = function (args) {
                this._Dirty = this._Layout.SetTextWrapping(args.NewValue);
                this._InvalidateDirty();
            };
            TextBlockNode.prototype._InvalidateDirty = function (setDirty) {
                if (setDirty)
                    this._Dirty = true;
                var lu = this.LayoutUpdater;
                if (this._Dirty) {
                    lu.InvalidateMeasure();
                    lu.InvalidateArrange();
                    lu.UpdateBounds(true);
                }
                lu.Invalidate();
            };
            TextBlockNode.prototype._UpdateFont = function (force) {
                var f = this._Font;
                var xobj = this.XObject;
                f.Family = xobj.FontFamily;
                f.Stretch = xobj.FontStretch;
                f.Style = xobj.FontStyle;
                f.Weight = xobj.FontWeight;
                f.Size = xobj.FontSize;
                return f.IsChanged || force;
            };
            TextBlockNode.prototype._UpdateFonts = function (force) {
                if (!this._UpdateFont(force))
                    return false;
                var lu = this.LayoutUpdater;
                lu.InvalidateMeasure();
                lu.InvalidateArrange();
                lu.UpdateBounds(true);
                this._Dirty = true;
                return true;
            };
            TextBlockNode.prototype._UpdateLayoutAttributes = function () {
                var xobj = this.XObject;
                var inlines = xobj.Inlines;
                var lu = this.LayoutUpdater;
                lu.InvalidateMeasure();
                lu.InvalidateArrange();
                this._UpdateFont(false);
                var length = 0;
                var runs = [];
                var count = inlines.Count;
                var enumerator = inlines.GetEnumerator();
                while (enumerator.MoveNext()) {
                    length = this._UpdateLayoutAttributesForInline(enumerator.Current, length, runs);
                }
                if (count > 0)
                    this._WasSet = true;
                this._Layout.Text = xobj.Text;
                this._Layout.TextAttributes = runs;
            };
            TextBlockNode.prototype._UpdateLayoutAttributesForInline = function (item, length, runs) {
                if (item instanceof Fayde.Documents.Run) {
                    var text = (item).Text;
                    if (text && text.length) {
                        runs.push(new Fayde.Text.TextLayoutAttributes(item, length));
                        length += text.length;
                    }
                } else if (item instanceof Fayde.Documents.LineBreak) {
                    runs.push(new Fayde.Text.TextLayoutAttributes(item, length));
                    length += 1;
                } else if (item instanceof Fayde.Documents.Span) {
                    var inlines = (item).Inlines;
                    var enumerator = inlines.GetEnumerator();
                    while (enumerator.MoveNext()) {
                        length = this._UpdateLayoutAttributesForInline(enumerator.Current, length, runs);
                    }
                }
                return length;
            };
            TextBlockNode.prototype._GetTextInternal = function (inlines) {
                if (!inlines)
                    return "";
                var block = "";
                var enumerator = inlines.GetEnumerator();
                while (enumerator.MoveNext()) {
                    block += (enumerator.Current)._SerializeText();
                }
                return block;
            };
            TextBlockNode.prototype._SetTextInternal = function (text) {
                this._SetsValue = false;
                var value = null;
                var xobj = this.XObject;
                var inlines = xobj.Inlines;
                if (text) {
                    var count = inlines.Count;
                    var run = null;
                    if (count > 0 && (value = inlines.GetValueAt(0)) && value instanceof Fayde.Documents.Run) {
                        run = value;
                        if (run.Autogen) {
                            while (count > 1) {
                                inlines.RemoveAt(count - 1);
                                count--;
                            }
                        } else {
                            run = null;
                        }
                    }
                    if (!run) {
                        inlines.Clear();
                        run = new Fayde.Documents.Run();
                        run.Autogen = true;
                        inlines.Add(run);
                    }
                    run.Text = text;
                    Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(xobj, run.XamlNode);
                } else {
                    inlines.Clear();
                    xobj.Text = "";
                }
                this._SetsValue = true;
            };
            TextBlockNode.prototype.InlinesChanged = function (newInline, isAdd) {
                if (!this._SetsValue)
                    return;
                var xobj = this.XObject;
                if (isAdd)
                    Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(xobj, newInline.XamlNode);
                var inlines = xobj.Inlines;
                this._SetsValue = false;
                xobj.SetStoreValue(TextBlock.TextProperty, this._GetTextInternal(inlines));
                this._SetsValue = true;
                this._UpdateLayoutAttributes();
                var lu = this.LayoutUpdater;
                lu.InvalidateMeasure();
                lu.InvalidateArrange();
                lu.UpdateBounds(true);
                lu.Invalidate();
            };
            return TextBlockNode;
        })(Fayde.FENode);
        Controls.TextBlockNode = TextBlockNode;
        Fayde.RegisterType(TextBlockNode, {
            Name: "TextBlockNode",
            Namespace: "Fayde.Controls"
        });
        var TextBlock = (function (_super) {
            __extends(TextBlock, _super);
            function TextBlock() {
                _super.call(this);
                var inlines = TextBlock.InlinesProperty.Initialize(this);
                inlines.AttachTo(this);
                inlines.Listen(this.XamlNode);
            }
            TextBlock.prototype.CreateNode = function () {
                return new TextBlockNode(this);
            };

            TextBlock.prototype._MeasureOverride = function (availableSize, error) {
                var constraint = size.copyTo(availableSize);
                var padding = this.Padding;
                if (padding)
                    size.shrinkByThickness(constraint, padding);
                var desired = this.XamlNode.Measure(constraint);
                if (padding)
                    size.growByThickness(desired, padding);
                return desired;
            };
            TextBlock.prototype._ArrangeOverride = function (finalSize, error) {
                var constraint = size.copyTo(finalSize);
                var padding = this.Padding;
                if (padding)
                    size.shrinkByThickness(constraint, padding);
                this.XamlNode.Arrange(constraint, padding);
                return finalSize;
            };
            TextBlock.prototype.Render = function (ctx, lu, region) {
                ctx.Save();
                lu.RenderLayoutClip(ctx);
                var padding = this.Padding;
                var offset = null;
                if (padding)
                    offset = new Point(padding.Left, padding.Top);
                if (this.FlowDirection === Fayde.FlowDirection.RightToLeft) {
                    NotImplemented("TextBlock._Render: Right to left");
                }
                this.XamlNode._Layout.Render(ctx, null, offset);
                ctx.Restore();
            };
            TextBlock.prototype.ComputeActualSize = function (baseComputer, lu) {
                return this.XamlNode.ComputeActualSize(lu, this.Padding);
            };

            TextBlock.prototype.FontChanged = function (args) {
                var node = this.XamlNode;
                if (args.Property === Fayde.InheritableOwner.TextDecorationsProperty) {
                    node._InvalidateDirty();
                } else if (args.Property === Fayde.InheritableOwner.ForegroundProperty) {
                    var lu = node.LayoutUpdater;
                    var newBrush = args.NewValue;
                    if (this._ForegroundListener)
                        this._ForegroundListener.Detach();
                    this._ForegroundListener = null;
                    if (newBrush)
                        this._ForegroundListener = newBrush.Listen(function (brush) {
                            return lu.Invalidate();
                        });
                    lu.Invalidate();
                } else {
                    this.XamlNode._FontChanged(args);
                }
            };
            TextBlock.prototype.IsInheritable = function (propd) {
                if (TextBlockInheritedProps.indexOf(propd) > -1)
                    return true;
                return (_super.prototype).IsInheritable.call(this, propd);
            };
            TextBlock.PaddingProperty = DependencyProperty.RegisterCore("Padding", function () {
                return Thickness;
            }, TextBlock, undefined, function (d, args) {
                return (d).XamlNode._InvalidateDirty(true);
            });
            TextBlock.FontFamilyProperty = Fayde.InheritableOwner.FontFamilyProperty.ExtendTo(TextBlock);
            TextBlock.FontSizeProperty = Fayde.InheritableOwner.FontSizeProperty.ExtendTo(TextBlock);
            TextBlock.FontStretchProperty = Fayde.InheritableOwner.FontStretchProperty.ExtendTo(TextBlock);
            TextBlock.FontStyleProperty = Fayde.InheritableOwner.FontStyleProperty.ExtendTo(TextBlock);
            TextBlock.FontWeightProperty = Fayde.InheritableOwner.FontWeightProperty.ExtendTo(TextBlock);
            TextBlock.ForegroundProperty = Fayde.InheritableOwner.ForegroundProperty.ExtendTo(TextBlock);
            TextBlock.TextDecorationsProperty = Fayde.InheritableOwner.TextDecorationsProperty.ExtendTo(TextBlock);
            TextBlock.TextProperty = DependencyProperty.Register("Text", function () {
                return String;
            }, TextBlock, "", function (d, args) {
                return (d).XamlNode._TextChanged(args);
            });
            TextBlock.InlinesProperty = DependencyProperty.RegisterImmutable("Inlines", function () {
                return Fayde.Documents.InlineCollection;
            }, TextBlock);
            TextBlock.LineStackingStrategyProperty = DependencyProperty.RegisterCore("LineStackingStrategy", function () {
                return new Enum(Fayde.LineStackingStrategy);
            }, TextBlock, Fayde.LineStackingStrategy.MaxHeight, function (d, args) {
                return (d).XamlNode._LineStackingStrategyChanged(args);
            });
            TextBlock.LineHeightProperty = DependencyProperty.RegisterCore("LineHeight", function () {
                return Number;
            }, TextBlock, NaN, function (d, args) {
                return (d).XamlNode._LineHeightChanged(args);
            });
            TextBlock.TextAlignmentProperty = DependencyProperty.RegisterCore("TextAlignment", function () {
                return new Enum(Fayde.TextAlignment);
            }, TextBlock, Fayde.TextAlignment.Left, function (d, args) {
                return (d).XamlNode._TextAlignmentChanged(args);
            });
            TextBlock.TextTrimmingProperty = DependencyProperty.RegisterCore("TextTrimming", function () {
                return new Enum(Controls.TextTrimming);
            }, TextBlock, Controls.TextTrimming.None, function (d, args) {
                return (d).XamlNode._TextTrimmingChanged(args);
            });
            TextBlock.TextWrappingProperty = DependencyProperty.RegisterCore("TextWrapping", function () {
                return new Enum(Controls.TextWrapping);
            }, TextBlock, Controls.TextWrapping.NoWrap, function (d, args) {
                return (d).XamlNode._TextWrappingChanged(args);
            });

            TextBlock.Annotations = { ContentProperty: TextBlock.InlinesProperty };
            return TextBlock;
        })(Fayde.FrameworkElement);
        Controls.TextBlock = TextBlock;
        Fayde.RegisterType(TextBlock, {
            Name: "TextBlock",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
        var TextBlockInheritedProps = [
            TextBlock.FontFamilyProperty,
            TextBlock.FontSizeProperty,
            TextBlock.FontStretchProperty,
            TextBlock.FontStyleProperty,
            TextBlock.FontWeightProperty,
            TextBlock.ForegroundProperty
        ];
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (TextBoxModelChangedType) {
            TextBoxModelChangedType[TextBoxModelChangedType["Nothing"] = 0] = "Nothing";
            TextBoxModelChangedType[TextBoxModelChangedType["TextAlignment"] = 1] = "TextAlignment";
            TextBoxModelChangedType[TextBoxModelChangedType["TextWrapping"] = 2] = "TextWrapping";
            TextBoxModelChangedType[TextBoxModelChangedType["Selection"] = 3] = "Selection";
            TextBoxModelChangedType[TextBoxModelChangedType["Brush"] = 4] = "Brush";
            TextBoxModelChangedType[TextBoxModelChangedType["Font"] = 5] = "Font";
            TextBoxModelChangedType[TextBoxModelChangedType["Text"] = 6] = "Text";
        })(Controls.TextBoxModelChangedType || (Controls.TextBoxModelChangedType = {}));
        var TextBoxModelChangedType = Controls.TextBoxModelChangedType;
        (function (TextBoxEmitChangedType) {
            TextBoxEmitChangedType[TextBoxEmitChangedType["NOTHING"] = 0] = "NOTHING";
            TextBoxEmitChangedType[TextBoxEmitChangedType["SELECTION"] = 1 << 0] = "SELECTION";
            TextBoxEmitChangedType[TextBoxEmitChangedType["TEXT"] = 1 << 1] = "TEXT";
        })(Controls.TextBoxEmitChangedType || (Controls.TextBoxEmitChangedType = {}));
        var TextBoxEmitChangedType = Controls.TextBoxEmitChangedType;

        var Key = Fayde.Input.Key;
        var MAX_UNDO_COUNT = 10;
        var TextBoxBase = (function (_super) {
            __extends(TextBoxBase, _super);
            function TextBoxBase(eventsMask, textPropd) {
                _super.call(this);
                this._Undo = [];
                this._Redo = [];
                this._Buffer = "";
                this._Emit = TextBoxEmitChangedType.NOTHING;
                this._NeedIMReset = false;
                this._Selecting = false;
                this._Captured = false;
                this._SettingValue = true;
                this._SelectionCursor = 0;
                this._SelectionAnchor = 0;
                this._Font = new Font();
                this._CursorOffset = 0;
                this._Batch = 0;
                this.$IsReadOnly = false;
                this.$IsFocused = false;
                this.$AcceptsReturn = false;
                this.$MaxLength = 0;
                this.$HasOffset = false;
                this._ModelListener = null;
                this._EventsMask = eventsMask;
                this._TextProperty = textPropd;
            }
            Object.defineProperty(TextBoxBase.prototype, "Cursor", {
                get: function () {
                    var cursor = this.GetValue(Fayde.FrameworkElement.CursorProperty);
                    if (cursor === Fayde.CursorType.Default)
                        return Fayde.CursorType.IBeam;
                    return cursor;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "SelectionCursor", {
                get: function () {
                    return this._SelectionCursor;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "HasSelectedText", {
                get: function () {
                    return this._SelectionCursor !== this._SelectionAnchor;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "CaretBrush", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "TextAlignment", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "TextWrapping", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "SelectionStart", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "SelectionLength", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "DisplayText", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "SelectionBackground", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "Background", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "SelectionForeground", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "Foreground", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "Font", {
                get: function () {
                    return this._Font;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "Direction", {
                get: function () {
                    return undefined;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TextBoxBase.prototype, "TextDecorations", {
                get: function () {
                    return Fayde.TextDecorations.None;
                },
                enumerable: true,
                configurable: true
            });
            TextBoxBase.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                var ce = this.$ContentElement = this.GetTemplateChild("ContentElement");
                if (!ce)
                    return;
                var view = this.$View;
                if (view)
                    view.SetTextBox(null);
                view = this.$View = new Controls.Internal.TextBoxView();
                view.SetEnableCursor(!this.$IsReadOnly);
                view.SetTextBox(this);
                if (ce instanceof Controls.ContentPresenter) {
                    (ce).SetValue(Controls.ContentPresenter.ContentProperty, view);
                } else if (ce instanceof Controls.ContentControl) {
                    (ce).SetValue(Controls.ContentControl.ContentProperty, view);
                } else if (ce instanceof Controls.Border) {
                    (ce).SetValue(Controls.Border.ChildProperty, view);
                } else if (ce instanceof Controls.Panel) {
                    (ce).Children.Add(view);
                } else {
                    Warn("TextBox does not have a valid content element.");
                    view.SetTextBox(null);
                    this.$View = view = null;
                }
            };

            TextBoxBase.prototype.Listen = function (listener) {
                this._ModelListener = listener;
            };
            TextBoxBase.prototype.Unlisten = function (listener) {
                if (this._ModelListener === listener)
                    this._ModelListener = null;
            };
            TextBoxBase.prototype._ModelChanged = function (type, newValue) {
                var listener = this._ModelListener;
                if (!listener)
                    return;
                listener.OnTextModelChanged({
                    Changed: type,
                    NewValue: newValue
                });
            };
            TextBoxBase.prototype._SelectedTextChanged = function (newValue) {
                if (!this._SettingValue)
                    return;
                var text = newValue || "";
                if (!text)
                    return;
                var length = Math.abs(this._SelectionCursor - this._SelectionAnchor);
                var start = Math.min(this._SelectionAnchor, this._SelectionCursor);
                var action;
                if (length > 0) {
                    action = new Fayde.Text.TextBoxUndoActionReplace(this._SelectionAnchor, this._SelectionCursor, this._Buffer, start, length, text);
                    this._Buffer = Fayde.Text.TextBuffer.Replace(this._Buffer, start, length, text);
                } else if (text.length > 0) {
                    action = new Fayde.Text.TextBoxUndoActionInsert(this._SelectionAnchor, this._SelectionCursor, start, text);
                    this._Buffer = Fayde.Text.TextBuffer.Insert(this._Buffer, start, text);
                }
                if (action) {
                    this._Emit |= TextBoxEmitChangedType.TEXT;
                    this._Undo.push(action);
                    this._Redo = [];
                    this.ClearSelection(start + text.length);
                    this._ResetIMContext();
                    this._SyncAndEmit();
                }
            };
            TextBoxBase.prototype._SelectionStartChanged = function (newValue) {
                var changed = TextBoxModelChangedType.Nothing;
                var length = Math.abs(this._SelectionCursor - this._SelectionAnchor);
                var start = newValue;
                if (start > this._Buffer.length) {
                    this.SelectionStart = this._Buffer.length;
                    return;
                }
                if (start + length > this._Buffer.length) {
                    this._BatchPush();
                    length = this._Buffer.length - start;
                    this.SelectionLength = length;
                    this._BatchPop();
                }
                if (this._SelectionAnchor != start) {
                    changed = TextBoxModelChangedType.Selection;
                    this.$HasOffset = false;
                }
                this._SelectionCursor = start + length;
                this._SelectionAnchor = start;
                this._Emit |= TextBoxEmitChangedType.SELECTION;
                this._SyncAndEmit();
                if (changed !== TextBoxModelChangedType.Nothing)
                    this._ModelChanged(changed, newValue);
            };
            TextBoxBase.prototype._SelectionLengthChanged = function (newValue) {
                var changed = TextBoxModelChangedType.Nothing;
                var start = Math.min(this._SelectionAnchor, this._SelectionCursor);
                var length = newValue;
                if (start + length > this._Buffer.length) {
                    length = this._Buffer.length - start;
                    this.SelectionLength = length;
                    return;
                }
                if (this._SelectionCursor != (start + length)) {
                    changed = TextBoxModelChangedType.Selection;
                    this.$HasOffset = false;
                }
                this._SelectionCursor = start + length;
                this._SelectionAnchor = start;
                this._Emit |= TextBoxEmitChangedType.SELECTION;
                this._SyncAndEmit();
                if (changed !== TextBoxModelChangedType.Nothing)
                    this._ModelChanged(changed, newValue);
            };
            TextBoxBase.prototype._TextChanged = function (newValue) {
                var text = newValue || "";
                if (this._SettingValue) {
                    if (text) {
                        var action;
                        if (this._Buffer.length > 0) {
                            action = new Fayde.Text.TextBoxUndoActionReplace(this._SelectionAnchor, this._SelectionCursor, this._Buffer, 0, this._Buffer.length, text);
                            this._Buffer = Fayde.Text.TextBuffer.Replace(this._Buffer, 0, this._Buffer.length, text);
                        } else {
                            action = new Fayde.Text.TextBoxUndoActionInsert(this._SelectionAnchor, this._SelectionCursor, 0, text);
                            this._Buffer = text + this._Buffer;
                        }
                        this._Undo.push(action);
                        this._Redo = [];
                        this._Emit |= TextBoxEmitChangedType.TEXT;
                        this.ClearSelection(0);
                        this._ResetIMContext();
                        this._SyncAndEmit(false);
                    }
                }
                this._ModelChanged(TextBoxModelChangedType.Text, newValue);
            };
            TextBoxBase.prototype._BatchPush = function () {
                this._Batch++;
            };
            TextBoxBase.prototype._BatchPop = function () {
                if (this._Batch < 1) {
                    Warn("TextBoxBase._Batch underflow");
                    return;
                }
                this._Batch--;
            };
            TextBoxBase.prototype._SyncAndEmit = function (syncText) {
                if (syncText === undefined)
                    syncText = true;
                if (this._Batch != 0 || this._Emit === TextBoxEmitChangedType.NOTHING)
                    return;
                if (syncText && (this._Emit & TextBoxEmitChangedType.TEXT))
                    this._SyncText();
                if (this._Emit & TextBoxEmitChangedType.SELECTION)
                    this._SyncSelectedText();
                if (this.XamlNode.IsLoaded) {
                    this._Emit &= this._EventsMask;
                    if (this._Emit & TextBoxEmitChangedType.TEXT)
                        this._EmitTextChanged();
                    if (this._Emit & TextBoxEmitChangedType.SELECTION)
                        this._EmitSelectionChanged();
                }
                this._Emit = TextBoxEmitChangedType.NOTHING;
            };
            TextBoxBase.prototype._SyncText = function () {
                this._SettingValue = false;
                this.SetStoreValue(this._TextProperty, this._Buffer);
                this._SettingValue = true;
            };
            TextBoxBase.prototype._EmitTextChanged = function () {
            };
            TextBoxBase.prototype.SelectAll = function () {
                this.Select(0, this._Buffer.length);
            };
            TextBoxBase.prototype.ClearSelection = function (start) {
                this._BatchPush();
                this.SelectionStart = start;
                this.SelectionLength = 0;
                this._BatchPop();
            };
            TextBoxBase.prototype.Select = function (start, length) {
                if (start < 0)
                    throw new ArgumentException("start < 0");
                if (length < 0)
                    throw new ArgumentException("length < 0");
                if (start > this._Buffer.length)
                    start = this._Buffer.length;
                if (length > (this._Buffer.length - start))
                    length = this._Buffer.length - start;
                this._BatchPush();
                this.SelectionStart = start;
                this.SelectionLength = length;
                this._BatchPop();
                this._ResetIMContext();
                this._SyncAndEmit();
                return true;
            };
            TextBoxBase.prototype._SyncSelectedText = function () {
                if (this._SelectionCursor !== this._SelectionAnchor) {
                    var start = Math.min(this._SelectionAnchor, this._SelectionCursor);
                    var len = Math.abs(this._SelectionCursor - this._SelectionAnchor);
                    var text = !this._Buffer ? '' : this._Buffer.substr(start, len);
                    this._SettingValue = false;
                    this._SelectedText = text;
                    this._SelectedTextChanged(text);
                    this._SettingValue = true;
                } else {
                    this._SettingValue = false;
                    this._SelectedText = "";
                    this._SelectedTextChanged("");
                    this._SettingValue = true;
                }
            };
            TextBoxBase.prototype._EmitSelectionChanged = function () {
            };
            TextBoxBase.prototype._ResetIMContext = function () {
                if (this._NeedIMReset) {
                    this._NeedIMReset = false;
                }
            };
            TextBoxBase.prototype.CanUndo = function () {
                return this._Undo.length > 0;
            };
            TextBoxBase.prototype.Undo = function () {
                if (this._Undo.length < 1)
                    return;
                var action = this._Undo.pop();
                if (this._Redo.push(action) > MAX_UNDO_COUNT)
                    this._Redo.shift();
                action.Undo(this);
                var anchor = action.SelectionAnchor;
                var cursor = action.SelectionCursor;
                this._BatchPush();
                this.SelectionStart = Math.min(anchor, cursor);
                this.SelectionLength = Math.abs(cursor - anchor);
                this._Emit = TextBoxEmitChangedType.TEXT | TextBoxEmitChangedType.SELECTION;
                this._SelectionAnchor = anchor;
                this._SelectionCursor = cursor;
                this._BatchPop();
                this._SyncAndEmit();
            };
            TextBoxBase.prototype.CanRedo = function () {
                return this._Redo.length > 0;
            };
            TextBoxBase.prototype.Redo = function () {
                if (this._Redo.length < 1)
                    return;
                var action = this._Redo.pop();
                if (this._Undo.push(action) > MAX_UNDO_COUNT)
                    this._Undo.shift();
                var anchor = action.Redo(this);
                var cursor = anchor;
                this._BatchPush();
                this.SelectionStart = Math.min(anchor, cursor);
                this.SelectionLength = Math.abs(cursor - anchor);
                this._Emit = TextBoxEmitChangedType.TEXT | TextBoxEmitChangedType.SELECTION;
                this._SelectionAnchor = anchor;
                this._SelectionCursor = cursor;
                this._BatchPop();
                this._SyncAndEmit();
            };
            TextBoxBase.prototype.OnLostFocus = function (e) {
                this.$IsFocused = false;
                if (this.$View)
                    this.$View.OnLostFocus(e);
                if (!this.$IsReadOnly) {
                    this._NeedIMReset = true;
                }
            };
            TextBoxBase.prototype.OnGotFocus = function (e) {
                this.$IsFocused = true;
                if (this.$View)
                    this.$View.OnGotFocus(e);
                if (!this.$IsReadOnly) {
                    this._NeedIMReset = true;
                }
            };
            TextBoxBase.prototype.OnMouseLeftButtonDown = function (e) {
                e.Handled = true;
                this.Focus();
                if (this.$View) {
                    var p = e.GetPosition(this.$View);
                    var cursor = this.$View.GetCursorFromXY(p.X, p.Y);
                    this._ResetIMContext();
                    this._Captured = this.CaptureMouse();
                    this._Selecting = true;
                    this._BatchPush();
                    this._Emit = TextBoxEmitChangedType.NOTHING;
                    this.SelectionStart = cursor;
                    this.SelectionLength = 0;
                    this._BatchPop();
                    this._SyncAndEmit();
                }
            };
            TextBoxBase.prototype.OnMouseLeftButtonUp = function (e) {
                if (this._Captured) {
                    this.ReleaseMouseCapture();
                }
                e.Handled = true;
                this._Selecting = false;
                this._Captured = false;
            };
            TextBoxBase.prototype.OnMouseMove = function (e) {
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                if (this._Selecting) {
                    var p = e.GetPosition(this.$View);
                    e.Handled = true;
                    cursor = this.$View.GetCursorFromXY(p.X, p.Y);
                    this._BatchPush();
                    this._Emit = TextBoxEmitChangedType.NOTHING;
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._BatchPop();
                    this._SyncAndEmit();
                }
            };
            TextBoxBase.prototype.CursorDown = function (cursor, isPage) {
                return cursor;
            };
            TextBoxBase.prototype.CursorUp = function (cursor, isPage) {
                return cursor;
            };
            TextBoxBase.prototype.CursorNextWord = function (cursor) {
                return cursor;
            };
            TextBoxBase.prototype.CursorPrevWord = function (cursor) {
                return cursor;
            };
            TextBoxBase.prototype.CursorLineBegin = function (cursor) {
                return cursor;
            };
            TextBoxBase.prototype.CursorLineEnd = function (cursor) {
                return cursor;
            };
            TextBoxBase.prototype._EmitCursorPositionChanged = function (height, x, y) {
            };
            TextBoxBase.prototype.OnKeyDown = function (args) {
                switch (args.Key) {
                    case Key.Shift:
                    case Key.Ctrl:
                    case Key.Alt:
                        return;
                }
                var handled = false;
                this._Emit = TextBoxEmitChangedType.NOTHING;
                this._BatchPush();
                switch (args.Key) {
                    case Key.Back:
                        if (this.$IsReadOnly)
                            break;
                        handled = this._KeyDownBackSpace(args.Modifiers);
                        break;
                    case Key.Delete:
                        if (this.$IsReadOnly)
                            break;
                        if (args.Modifiers.Shift) {
                            handled = true;
                        } else {
                            handled = this._KeyDownDelete(args.Modifiers);
                        }
                        break;
                    case Key.Insert:
                        if (args.Modifiers.Shift) {
                            handled = true;
                        } else if (args.Modifiers.Ctrl) {
                            handled = true;
                        }
                        break;
                    case Key.PageDown:
                        handled = this._KeyDownPageDown(args.Modifiers);
                        break;
                    case Key.PageUp:
                        handled = this._KeyDownPageUp(args.Modifiers);
                        break;
                    case Key.Home:
                        handled = this._KeyDownHome(args.Modifiers);
                        break;
                    case Key.End:
                        handled = this._KeyDownEnd(args.Modifiers);
                        break;
                    case Key.Left:
                        handled = this._KeyDownLeft(args.Modifiers);
                        break;
                    case Key.Right:
                        handled = this._KeyDownRight(args.Modifiers);
                        break;
                    case Key.Down:
                        handled = this._KeyDownDown(args.Modifiers);
                        break;
                    case Key.Up:
                        handled = this._KeyDownUp(args.Modifiers);
                        break;
                    default:
                        if (args.Modifiers.Ctrl) {
                            switch (args.Key) {
                                case Key.A:
                                    handled = true;
                                    this.SelectAll();
                                    break;
                                case Key.C:
                                    handled = true;
                                    break;
                                case Key.X:
                                    if (this.$IsReadOnly)
                                        break;
                                    this._SelectedText = "";
                                    this._SelectedTextChanged("");
                                    handled = true;
                                    break;
                                case Key.Y:
                                    if (!this.$IsReadOnly) {
                                        handled = true;
                                        this.Redo();
                                    }
                                    break;
                                case Key.Z:
                                    if (!this.$IsReadOnly) {
                                        handled = true;
                                        this.Undo();
                                    }
                                    break;
                            }
                        }
                        break;
                }
                if (handled) {
                    args.Handled = handled;
                    this._ResetIMContext();
                }
                this._BatchPop();
                this._SyncAndEmit();
                if (!args.Handled)
                    this.PostOnKeyDown(args);
            };
            TextBoxBase.prototype.PostOnKeyDown = function (args) {
                if (args.Handled)
                    return;

                if (this.$IsReadOnly || args.Modifiers.Alt || args.Modifiers.Ctrl)
                    return;
                this._Emit = TextBoxEmitChangedType.NOTHING;
                this._BatchPush();
                if (args.Key === Key.Enter) {
                    this._KeyDownChar('\r');
                } else if (args.Char != null && !args.Modifiers.Ctrl && !args.Modifiers.Alt) {
                    this._KeyDownChar(args.Char);
                }
                this._BatchPop();
                this._SyncAndEmit();
            };
            TextBoxBase.prototype._KeyDownBackSpace = function (modifiers) {
                if (modifiers.Shift || modifiers.Alt)
                    return false;
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                var start = 0;
                var length = 0;
                if (cursor !== anchor) {
                    length = Math.abs(cursor - anchor);
                    start = Math.min(anchor, cursor);
                } else if (modifiers.Ctrl) {
                    start = this.CursorPrevWord(cursor);
                    length = cursor - start;
                } else if (cursor > 0) {
                    if (cursor >= 2 && this._Buffer && this._Buffer.charAt(cursor - 2) === '\r' && this._Buffer.charAt(cursor - 1) === '\n') {
                        start = cursor - 2;
                        length = 2;
                    } else {
                        start = cursor - 1;
                        length = 1;
                    }
                }
                if (length > 0) {
                    this._Undo.push(new Fayde.Text.TextBoxUndoActionDelete(this._SelectionAnchor, this._SelectionCursor, this._Buffer, start, length));
                    this._Redo = [];
                    this._Buffer = Fayde.Text.TextBuffer.Cut(this._Buffer, start, length);
                    this._Emit |= TextBoxEmitChangedType.TEXT;
                    anchor = start;
                    cursor = start;
                }
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                }
                return true;
            };
            TextBoxBase.prototype._KeyDownDelete = function (modifiers) {
                if (modifiers.Shift || modifiers.Alt)
                    return false;
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                var start = 0;
                var length = 0;
                var handled = false;
                if (cursor !== anchor) {
                    length = Math.abs(cursor - anchor);
                    start = Math.min(anchor, cursor);
                } else if (modifiers.Ctrl) {
                    length = this.CursorNextWord(cursor) - cursor;
                    start = cursor;
                } else if (this._Buffer && cursor < this._Buffer.length) {
                    if (this._Buffer.charAt(cursor) === '\r' && this._Buffer.charAt(cursor + 1) === '\n')
                        length = 2;
else
                        length = 1;
                    start = cursor;
                }
                if (length > 0) {
                    this._Undo.push(new Fayde.Text.TextBoxUndoActionDelete(this._SelectionAnchor, this._SelectionCursor, this._Buffer, start, length));
                    this._Redo = [];
                    this._Buffer = Fayde.Text.TextBuffer.Cut(this._Buffer, start, length);
                    this._Emit |= TextBoxEmitChangedType.TEXT;
                    handled = true;
                }
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                    handled = true;
                }
                return handled;
            };
            TextBoxBase.prototype._KeyDownPageDown = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                cursor = this.CursorDown(cursor, true);
                var have = this.$HasOffset;
                if (!modifiers.Shift) {
                    anchor = cursor;
                }
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                    this.$HasOffset = have;
                }
                return true;
            };
            TextBoxBase.prototype._KeyDownPageUp = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                cursor = this.CursorUp(cursor, true);
                var have = this.$HasOffset;
                if (!modifiers.Shift) {
                    anchor = cursor;
                }
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                    this.$HasOffset = have;
                }
                return true;
            };
            TextBoxBase.prototype._KeyDownHome = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                var handled = false;
                if (modifiers.Ctrl) {
                    cursor = 0;
                } else {
                    cursor = this.CursorLineBegin(cursor);
                }
                if (!modifiers.Shift) {
                    anchor = cursor;
                }
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                    this.$HasOffset = false;
                    handled = true;
                }
                return handled;
            };
            TextBoxBase.prototype._KeyDownEnd = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                var handled = false;
                if (modifiers.Ctrl) {
                    cursor = this._Buffer.length;
                } else {
                    cursor = this.CursorLineEnd(cursor);
                }
                if (!modifiers.Shift) {
                    anchor = cursor;
                }
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                    this.$HasOffset = false;
                    handled = true;
                }
                return handled;
            };
            TextBoxBase.prototype._KeyDownLeft = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                var handled = false;
                if (modifiers.Ctrl) {
                    cursor = this.CursorPrevWord(cursor);
                } else if (!modifiers.Shift && anchor !== cursor) {
                    cursor = Math.min(anchor, cursor);
                } else {
                    if (cursor >= 2 && this._Buffer && this._Buffer.charAt(cursor - 2) === '\r' && this._Buffer.charAt(cursor - 1) === '\n')
                        cursor -= 2;
else if (cursor > 0)
                        cursor--;
                }
                if (!modifiers.Shift)
                    anchor = cursor;
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                    handled = true;
                }
                return handled;
            };
            TextBoxBase.prototype._KeyDownRight = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                var handled = false;
                if (modifiers.Ctrl) {
                    cursor = this.CursorNextWord(cursor);
                } else if (!modifiers.Shift && anchor !== cursor) {
                    cursor = Math.max(anchor, cursor);
                } else {
                    if (this._Buffer && this._Buffer.charAt(cursor) === '\r' && this._Buffer.charAt(cursor + 1) === '\n')
                        cursor += 2;
else if (cursor < this._Buffer.length)
                        cursor++;
                }
                if (!modifiers.Shift)
                    anchor = cursor;
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                    handled = true;
                }
                return handled;
            };
            TextBoxBase.prototype._KeyDownDown = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                var handled = false;
                cursor = this.CursorDown(cursor, false);
                var have = this.$HasOffset;
                if (!modifiers.Shift) {
                    anchor = cursor;
                }
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                    this.$HasOffset = have;
                    handled = true;
                }
                return handled;
            };
            TextBoxBase.prototype._KeyDownUp = function (modifiers) {
                if (modifiers.Alt)
                    return false;
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                var handled = false;
                cursor = this.CursorUp(cursor, false);
                var have = this.$HasOffset;
                if (!modifiers.Shift) {
                    anchor = cursor;
                }
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                    this.$HasOffset = have;
                    handled = true;
                }
                return handled;
            };
            TextBoxBase.prototype._KeyDownChar = function (c) {
                var anchor = this._SelectionAnchor;
                var cursor = this._SelectionCursor;
                var length = Math.abs(cursor - anchor);
                var start = Math.min(anchor, cursor);
                if ((this.$MaxLength > 0 && this._Buffer.length >= this.$MaxLength) || (c === '\r') && !this.$AcceptsReturn)
                    return false;
                if (length > 0) {
                    this._Undo.push(new Fayde.Text.TextBoxUndoActionReplace(anchor, cursor, this._Buffer, start, length, c));
                    this._Redo = [];
                    this._Buffer = Fayde.Text.TextBuffer.Replace(this._Buffer, start, length, c);
                } else {
                    var ins = null;
                    var action = this._Undo[this._Undo.length - 1];
                    if (action instanceof Fayde.Text.TextBoxUndoActionInsert) {
                        ins = action;
                        if (!ins.Insert(start, c))
                            ins = null;
                    }
                    if (!ins) {
                        ins = new Fayde.Text.TextBoxUndoActionInsert(anchor, cursor, start, c);
                        this._Undo.push(ins);
                    }
                    this._Redo = [];
                    this._Buffer = Fayde.Text.TextBuffer.Insert(this._Buffer, start, c);
                }
                this._Emit |= TextBoxEmitChangedType.TEXT;
                cursor = start + 1;
                anchor = cursor;
                if (this._SelectionAnchor !== anchor || this._SelectionCursor !== cursor) {
                    this.SelectionStart = Math.min(anchor, cursor);
                    this.SelectionLength = Math.abs(cursor - anchor);
                    this._SelectionAnchor = anchor;
                    this._SelectionCursor = cursor;
                    this._Emit |= TextBoxEmitChangedType.SELECTION;
                }
                return true;
            };
            return TextBoxBase;
        })(Controls.Control);
        Controls.TextBoxBase = TextBoxBase;
        Fayde.RegisterType(TextBoxBase, {
            Name: "TextBoxBase",
            Namespace: "Fayde.Controls"
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Internal) {
            var CURSOR_BLINK_DIVIDER = 3;
            var CURSOR_BLINK_OFF_MULTIPLIER = 2;
            var CURSOR_BLINK_DELAY_MULTIPLIER = 3;
            var CURSOR_BLINK_ON_MULTIPLIER = 4;
            var CURSOR_BLINK_TIMEOUT_DEFAULT = 900;
            var TextBoxViewNode = (function (_super) {
                __extends(TextBoxViewNode, _super);
                function TextBoxViewNode(xobj) {
                    _super.call(this, xobj);
                }
                return TextBoxViewNode;
            })(Fayde.FENode);
            Internal.TextBoxViewNode = TextBoxViewNode;
            Fayde.RegisterType(TextBoxViewNode, {
                Name: "TextBoxViewNode",
                Namespace: "Fayde.Controls"
            });
            var TextBoxView = (function (_super) {
                __extends(TextBoxView, _super);
                function TextBoxView() {
                    _super.apply(this, arguments);
                    this._Cursor = new rect();
                    this._Layout = new Fayde.Text.TextLayout();
                    this._SelectionChanged = false;
                    this._HadSelectedText = false;
                    this._CursorVisible = false;
                    this._EnableCursor = true;
                    this._BlinkTimeout = 0;
                    this._TextBox = null;
                    this._Dirty = false;
                }
                TextBoxView.prototype.CreateNode = function () {
                    return new TextBoxViewNode(this);
                };

                TextBoxView.prototype.SetTextBox = function (textBox) {
                    if (this._TextBox === textBox)
                        return;
                    if (this._TextBox)
                        this._TextBox.Unlisten(this);
                    this._TextBox = textBox;
                    if (textBox) {
                        textBox.Listen(this);
                        this._Layout.TextAttributes = [new Fayde.Text.TextLayoutAttributes(textBox)];
                        this._Layout.TextAlignment = textBox.TextAlignment;
                        this._Layout.TextWrapping = textBox.TextWrapping;
                        this._HadSelectedText = textBox.HasSelectedText;
                        this._SelectionChanged = true;
                        this._UpdateText();
                    } else {
                        this._Layout.TextAttributes = null;
                        this._Layout.Text = null;
                    }
                    var lu = this.XamlNode.LayoutUpdater;
                    lu.UpdateBounds(true);
                    lu.InvalidateMeasure();
                    lu.Invalidate();
                    this._Dirty = true;
                };
                TextBoxView.prototype.SetEnableCursor = function (value) {
                    if (this._EnableCursor === value)
                        return;
                    this._EnableCursor = value;
                    if (value)
                        this._ResetCursorBlink(false);
else
                        this._EndCursorBlink();
                };
                TextBoxView.prototype._Blink = function () {
                    var multiplier;
                    if (this._CursorVisible) {
                        multiplier = CURSOR_BLINK_OFF_MULTIPLIER;
                        this._HideCursor();
                    } else {
                        multiplier = CURSOR_BLINK_ON_MULTIPLIER;
                        this._ShowCursor();
                    }
                    this._ConnectBlinkTimeout(multiplier);
                    return false;
                };
                TextBoxView.prototype._ConnectBlinkTimeout = function (multiplier) {
                    var _this = this;
                    if (!this.XamlNode.IsAttached)
                        return;
                    var timeout = this._GetCursorBlinkTimeout() * multiplier / CURSOR_BLINK_DIVIDER;
                    this._BlinkTimeout = setTimeout(function () {
                        return _this._Blink();
                    }, timeout);
                };
                TextBoxView.prototype._DisconnectBlinkTimeout = function () {
                    if (this._BlinkTimeout !== 0) {
                        if (!this.XamlNode.IsAttached)
                            return;
                        clearTimeout(this._BlinkTimeout);
                        this._BlinkTimeout = 0;
                    }
                };
                TextBoxView.prototype._GetCursorBlinkTimeout = function () {
                    return CURSOR_BLINK_TIMEOUT_DEFAULT;
                };
                TextBoxView.prototype._ResetCursorBlink = function (delay) {
                    if (this._TextBox.$IsFocused && !this._TextBox.HasSelectedText) {
                        if (this._EnableCursor) {
                            if (delay)
                                this._DelayCursorBlink();
else
                                this._BeginCursorBlink();
                        } else {
                            this._UpdateCursor(false);
                        }
                    } else {
                        this._EndCursorBlink();
                    }
                };
                TextBoxView.prototype._DelayCursorBlink = function () {
                    this._DisconnectBlinkTimeout();
                    this._ConnectBlinkTimeout(CURSOR_BLINK_DELAY_MULTIPLIER);
                    this._UpdateCursor(true);
                    this._ShowCursor();
                };
                TextBoxView.prototype._BeginCursorBlink = function () {
                    if (this._BlinkTimeout === 0) {
                        this._ConnectBlinkTimeout(CURSOR_BLINK_ON_MULTIPLIER);
                        this._UpdateCursor(true);
                        this._ShowCursor();
                    }
                };
                TextBoxView.prototype._EndCursorBlink = function () {
                    this._DisconnectBlinkTimeout();
                    if (this._CursorVisible)
                        this._HideCursor();
                };
                TextBoxView.prototype._InvalidateCursor = function () {
                    var lu = this.XamlNode.LayoutUpdater;
                    lu.Invalidate(rect.transform(this._Cursor, lu.AbsoluteXform));
                };
                TextBoxView.prototype._ShowCursor = function () {
                    this._CursorVisible = true;
                    this._InvalidateCursor();
                };
                TextBoxView.prototype._HideCursor = function () {
                    this._CursorVisible = false;
                    this._InvalidateCursor();
                };
                TextBoxView.prototype._UpdateCursor = function (invalidate) {
                    var cur = this._TextBox.SelectionCursor;
                    var current = this._Cursor;
                    if (invalidate && this._CursorVisible)
                        this._InvalidateCursor();
                    this._Cursor = this._Layout.GetSelectionCursor(null, cur);
                    if (!rect.isEqual(this._Cursor, current))
                        this._TextBox._EmitCursorPositionChanged(this._Cursor.Height, this._Cursor.X, this._Cursor.Y);
                    if (invalidate && this._CursorVisible)
                        this._InvalidateCursor();
                };
                TextBoxView.prototype._UpdateText = function () {
                    var text = this._TextBox.DisplayText;
                    this._Layout.Text = text ? text : "", -1;
                };
                TextBoxView.prototype.ComputeActualSize = function (baseComputer, lu) {
                    if (lu.LayoutSlot !== undefined)
                        return baseComputer.call(lu);
                    this.Layout(size.createInfinite());
                    return this._Layout.ActualExtents;
                };
                TextBoxView.prototype._MeasureOverride = function (availableSize, error) {
                    this.Layout(availableSize);
                    var desired = size.copyTo(this._Layout.ActualExtents);
                    if (!isFinite(availableSize.Width))
                        desired.Width = Math.max(desired.Width, 11);
                    size.min(desired, availableSize);
                    return desired;
                };
                TextBoxView.prototype._ArrangeOverride = function (finalSize, error) {
                    this.Layout(finalSize);
                    var arranged = size.copyTo(this._Layout.ActualExtents);
                    size.max(arranged, finalSize);
                    return arranged;
                };
                TextBoxView.prototype.Layout = function (constraint) {
                    this._Layout.MaxWidth = constraint.Width;
                    this._Layout.Layout();
                    this._Dirty = false;
                };
                TextBoxView.prototype.GetBaselineOffset = function () {
                    return this._Layout.GetBaselineOffset();
                };
                TextBoxView.prototype.GetLineFromY = function (y) {
                    return this._Layout.GetLineFromY(null, y);
                };
                TextBoxView.prototype.GetLineFromIndex = function (index) {
                    return this._Layout.GetLineFromIndex(index);
                };
                TextBoxView.prototype.GetCursorFromXY = function (x, y) {
                    return this._Layout.GetCursorFromXY(null, x, y);
                };
                TextBoxView.prototype.Render = function (ctx, lu, region) {
                    var renderSize = lu.RenderSize;
                    this._UpdateCursor(false);
                    if (this._SelectionChanged) {
                        this._Layout.Select(this._TextBox.SelectionStart, this._TextBox.SelectionLength);
                        this._SelectionChanged = false;
                    }
                    ctx.Save();
                    lu.RenderLayoutClip(ctx);
                    this._Layout.AvailableWidth = renderSize.Width;
                    this._RenderImpl(ctx, region);
                    ctx.Restore();
                };
                TextBoxView.prototype._RenderImpl = function (ctx, region) {
                    ctx.Save();
                    if (this.FlowDirection === Fayde.FlowDirection.RightToLeft) {
                    }
                    this._Layout.Render(ctx);
                    if (this._CursorVisible) {
                        var canvasCtx = ctx.CanvasContext;
                        var rect = this._Cursor;
                        canvasCtx.beginPath();
                        canvasCtx.moveTo(rect.X + 0.5, rect.Y);
                        canvasCtx.lineTo(rect.X + 0.5, rect.Y + rect.Height);
                        canvasCtx.lineWidth = 1.0;
                        var caretBrush = this._TextBox.CaretBrush;
                        if (caretBrush) {
                            caretBrush.SetupBrush(canvasCtx, rect);
                            canvasCtx.strokeStyle = caretBrush.ToHtml5Object();
                        } else {
                            canvasCtx.strokeStyle = "#000000";
                        }
                        canvasCtx.stroke();
                    }
                    ctx.Restore();
                };
                TextBoxView.prototype.OnLostFocus = function (e) {
                    this._EndCursorBlink();
                };
                TextBoxView.prototype.OnGotFocus = function (e) {
                    this._ResetCursorBlink(false);
                };
                TextBoxView.prototype.OnMouseLeftButtonDown = function (e) {
                    this._TextBox.OnMouseLeftButtonDown(e);
                };
                TextBoxView.prototype.OnMouseLeftButtonUp = function (e) {
                    this._TextBox.OnMouseLeftButtonUp(e);
                };
                TextBoxView.prototype.OnTextModelChanged = function (args) {
                    var lu = this.XamlNode.LayoutUpdater;
                    switch (args.Changed) {
                        case Controls.TextBoxModelChangedType.TextAlignment:
                            if (this._Layout.SetTextAlignment(args.NewValue))
                                this._Dirty = true;
                            break;
                        case Controls.TextBoxModelChangedType.TextWrapping:
                            if (this._Layout.SetTextWrapping(args.NewValue))
                                this._Dirty = true;
                            break;
                        case Controls.TextBoxModelChangedType.Selection:
                            if (this._HadSelectedText || this._TextBox.HasSelectedText) {
                                this._HadSelectedText = this._TextBox.HasSelectedText;
                                this._SelectionChanged = true;
                                this._ResetCursorBlink(false);
                            } else {
                                this._ResetCursorBlink(true);
                                return;
                            }
                            break;
                        case Controls.TextBoxModelChangedType.Brush:
                            break;
                        case Controls.TextBoxModelChangedType.Font:
                            this._Layout.ResetState();
                            this._Dirty = true;
                            break;
                        case Controls.TextBoxModelChangedType.Text:
                            this._UpdateText();
                            this._Dirty = true;
                            break;
                        default:
                            return;
                    }
                    if (this._Dirty) {
                        lu.InvalidateMeasure();
                        lu.UpdateBounds(true);
                    }
                    lu.Invalidate();
                };
                return TextBoxView;
            })(Fayde.FrameworkElement);
            Internal.TextBoxView = TextBoxView;
            Fayde.RegisterType(TextBoxView, {
                Name: "TextBoxView",
                Namespace: "Fayde.Controls"
            });
        })(Controls.Internal || (Controls.Internal = {}));
        var Internal = Controls.Internal;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var UCNode = (function (_super) {
            __extends(UCNode, _super);
            function UCNode(xobj) {
                _super.call(this, xobj);
                this._IsParsing = false;
                this.LayoutUpdater.BreaksLayoutClipRender = true;
                this.LayoutUpdater.SetContainerMode(true);
            }
            return UCNode;
        })(Controls.ControlNode);
        Controls.UCNode = UCNode;
        Fayde.RegisterType(UCNode, {
            Name: "UCNode",
            Namespace: "Fayde.Controls"
        });
        var UserControl = (function (_super) {
            __extends(UserControl, _super);
            function UserControl() {
                _super.apply(this, arguments);
            }
            UserControl.prototype.CreateNode = function () {
                return new UCNode(this);
            };
            UserControl.prototype.InitializeComponent = function () {
                this.ApplyTemplate();
            };
            UserControl.prototype._InvalidateContent = function (args) {
                var node = this.XamlNode;
                if (node._IsParsing)
                    return;
                var error = new BError();
                if (args.OldValue instanceof Fayde.UIElement)
                    node.DetachVisualChild(args.OldValue, error);
                if (args.NewValue instanceof Fayde.UIElement)
                    node.AttachVisualChild(args.NewValue, error);
                if (error.Message)
                    error.ThrowException();
                node.LayoutUpdater.UpdateBounds();
            };
            UserControl.prototype._MeasureOverride = function (availableSize, error) {
                var desired;
                availableSize = size.copyTo(availableSize);
                var padding = this.Padding;
                var borderThickness = this.BorderThickness;
                var border = null;
                if (!padding)
                    border = borderThickness;
else if (!borderThickness)
                    border = padding;
else
                    border = padding.Plus(borderThickness);
                if (border)
                    size.shrinkByThickness(availableSize, border);
                var enumerator = this.XamlNode.GetVisualTreeEnumerator();
                while (enumerator.MoveNext()) {
                    var childLu = (enumerator.Current).LayoutUpdater;
                    childLu._Measure(availableSize, error);
                    desired = size.copyTo(childLu.DesiredSize);
                }
                if (!desired)
                    desired = new size();
                if (border)
                    size.growByThickness(desired, border);
                return desired;
            };
            UserControl.prototype._ArrangeOverride = function (finalSize, error) {
                var padding = this.Padding;
                var borderThickness = this.BorderThickness;
                var border = null;
                if (!padding)
                    border = borderThickness;
else if (!borderThickness)
                    border = padding;
else
                    border = padding.Plus(borderThickness);
                var arranged = null;
                var enumerator = this.XamlNode.GetVisualTreeEnumerator();
                while (enumerator.MoveNext()) {
                    var childLu = (enumerator.Current).LayoutUpdater;
                    var childRect = rect.fromSize(finalSize);
                    if (border)
                        rect.shrinkByThickness(childRect, border);
                    childLu._Arrange(childRect, error);
                    arranged = size.fromRect(childRect);
                    if (border)
                        size.growByThickness(arranged, border);
                }
                if (arranged)
                    return arranged;
                return finalSize;
            };
            UserControl.ContentProperty = DependencyProperty.Register("Content", function () {
                return Object;
            }, UserControl, undefined, function (d, args) {
                return (d)._InvalidateContent(args);
            });

            UserControl.Annotations = { ContentProperty: UserControl.ContentProperty };
            return UserControl;
        })(Controls.Control);
        Controls.UserControl = UserControl;
        Fayde.RegisterType(UserControl, {
            Name: "UserControl",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var VirtualizingPanel = (function (_super) {
            __extends(VirtualizingPanel, _super);
            function VirtualizingPanel() {
                _super.apply(this, arguments);
                this._ICG = null;
            }
            Object.defineProperty(VirtualizingPanel.prototype, "ItemContainerGenerator", {
                get: function () {
                    var icg = this._ICG;
                    if (!icg) {
                        var icOwner = Controls.ItemsControl.GetItemsOwner(this);
                        if (!icOwner)
                            throw new InvalidOperationException("VirtualizingPanels must be in the Template of an ItemsControl in order to generate items");
                        var icg = this._ICG = icOwner.ItemContainerGenerator;
                        icg.ItemsChanged.Subscribe(this.OnItemContainerGeneratorChanged, this);
                    }
                    return icg;
                },
                enumerable: true,
                configurable: true
            });
            VirtualizingPanel.prototype.AddInternalChild = function (child) {
                this.Children.Add(child);
            };
            VirtualizingPanel.prototype.InsertInternalChild = function (index, child) {
                this.Children.Insert(index, child);
            };
            VirtualizingPanel.prototype.RemoveInternalChildRange = function (index, range) {
                var children = this.Children;
                for (var i = 0; i < range; i++) {
                    children.RemoveAt(index);
                }
            };
            VirtualizingPanel.prototype.BringIndexIntoView = function (index) {
            };
            VirtualizingPanel.prototype.OnClearChildren = function () {
            };
            VirtualizingPanel.prototype.OnItemContainerGeneratorChanged = function (sender, e) {
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
                if (e.Action === Fayde.Collections.NotifyCollectionChangedAction.Reset) {
                    this.Children.Clear();
                    this.ItemContainerGenerator.RemoveAll();
                    this.OnClearChildren();
                }
            };
            return VirtualizingPanel;
        })(Controls.Panel);
        Controls.VirtualizingPanel = VirtualizingPanel;
        Fayde.RegisterType(VirtualizingPanel, {
            Name: "VirtualizingPanel",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var LineDelta = 14.7;
        var Wheelitude = 3;
        (function (VirtualizationMode) {
            VirtualizationMode[VirtualizationMode["Standard"] = 0] = "Standard";
            VirtualizationMode[VirtualizationMode["Recycling"] = 1] = "Recycling";
        })(Controls.VirtualizationMode || (Controls.VirtualizationMode = {}));
        var VirtualizationMode = Controls.VirtualizationMode;

        var CleanUpVirtualizedItemEventArgs = (function (_super) {
            __extends(CleanUpVirtualizedItemEventArgs, _super);
            function CleanUpVirtualizedItemEventArgs(uiElement, value) {
                _super.call(this);
                this.Cancel = false;
                Object.defineProperty(this, "UIElement", { value: uiElement, writable: false });
                Object.defineProperty(this, "Value", { value: value, writable: false });
            }
            return CleanUpVirtualizedItemEventArgs;
        })(Fayde.RoutedEventArgs);
        Controls.CleanUpVirtualizedItemEventArgs = CleanUpVirtualizedItemEventArgs;
        var VirtualizingStackPanel = (function (_super) {
            __extends(VirtualizingStackPanel, _super);
            function VirtualizingStackPanel() {
                _super.apply(this, arguments);
                this._CanHorizontallyScroll = false;
                this._CanVerticallyScroll = false;
                this._HorizontalOffset = 0;
                this._VerticalOffset = 0;
                this._ExtentWidth = 0;
                this._ExtentHeight = 0;
                this._ViewportWidth = 0;
                this._ViewportHeight = 0;
                this.CleanUpVirtualizedItemEvent = new Fayde.RoutedEvent();
            }
            Object.defineProperty(VirtualizingStackPanel.prototype, "CanHorizontallyScroll", {
                get: function () {
                    return this._CanHorizontallyScroll;
                },
                set: function (value) {
                    this._CanHorizontallyScroll = value;
                    this.XamlNode.LayoutUpdater.InvalidateMeasure();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "CanVerticallyScroll", {
                get: function () {
                    return this._CanVerticallyScroll;
                },
                set: function (value) {
                    this._CanVerticallyScroll = value;
                    this.XamlNode.LayoutUpdater.InvalidateMeasure();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "ExtentWidth", {
                get: function () {
                    return this._ExtentWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "ExtentHeight", {
                get: function () {
                    return this._ExtentHeight;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "ViewportWidth", {
                get: function () {
                    return this._ViewportWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "ViewportHeight", {
                get: function () {
                    return this._ViewportHeight;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "HorizontalOffset", {
                get: function () {
                    return this._HorizontalOffset;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VirtualizingStackPanel.prototype, "VerticalOffset", {
                get: function () {
                    return this._VerticalOffset;
                },
                enumerable: true,
                configurable: true
            });
            VirtualizingStackPanel.prototype.LineUp = function () {
                if (this.Orientation === Fayde.Orientation.Horizontal)
                    this.SetVerticalOffset(this._VerticalOffset - LineDelta);
else
                    this.SetVerticalOffset(this._VerticalOffset - 1);
            };
            VirtualizingStackPanel.prototype.LineDown = function () {
                if (this.Orientation === Fayde.Orientation.Horizontal)
                    this.SetVerticalOffset(this._VerticalOffset + LineDelta);
else
                    this.SetVerticalOffset(this._VerticalOffset + 1);
            };
            VirtualizingStackPanel.prototype.LineLeft = function () {
                if (this.Orientation === Fayde.Orientation.Vertical)
                    this.SetHorizontalOffset(this._HorizontalOffset - LineDelta);
else
                    this.SetHorizontalOffset(this._HorizontalOffset - 1);
            };
            VirtualizingStackPanel.prototype.LineRight = function () {
                if (this.Orientation === Fayde.Orientation.Vertical)
                    this.SetHorizontalOffset(this._HorizontalOffset + LineDelta);
else
                    this.SetHorizontalOffset(this._HorizontalOffset + 1);
            };
            VirtualizingStackPanel.prototype.MouseWheelUp = function () {
                if (this.Orientation === Fayde.Orientation.Horizontal)
                    this.SetVerticalOffset(this._VerticalOffset - LineDelta * Wheelitude);
else
                    this.SetVerticalOffset(this._VerticalOffset - Wheelitude);
            };
            VirtualizingStackPanel.prototype.MouseWheelDown = function () {
                if (this.Orientation === Fayde.Orientation.Horizontal)
                    this.SetVerticalOffset(this._VerticalOffset + LineDelta * Wheelitude);
else
                    this.SetVerticalOffset(this._VerticalOffset + Wheelitude);
            };
            VirtualizingStackPanel.prototype.MouseWheelLeft = function () {
                if (this.Orientation === Fayde.Orientation.Vertical)
                    this.SetHorizontalOffset(this._HorizontalOffset - LineDelta * Wheelitude);
else
                    this.SetHorizontalOffset(this._HorizontalOffset - Wheelitude);
            };
            VirtualizingStackPanel.prototype.MouseWheelRight = function () {
                if (this.Orientation === Fayde.Orientation.Vertical)
                    this.SetHorizontalOffset(this._HorizontalOffset + LineDelta * Wheelitude);
else
                    this.SetHorizontalOffset(this._HorizontalOffset + Wheelitude);
            };
            VirtualizingStackPanel.prototype.PageUp = function () {
                this.SetVerticalOffset(this._VerticalOffset - this._ViewportHeight);
            };
            VirtualizingStackPanel.prototype.PageDown = function () {
                this.SetVerticalOffset(this._VerticalOffset + this._ViewportHeight);
            };
            VirtualizingStackPanel.prototype.PageLeft = function () {
                this.SetHorizontalOffset(this._HorizontalOffset - this._ViewportWidth);
            };
            VirtualizingStackPanel.prototype.PageRight = function () {
                this.SetHorizontalOffset(this._HorizontalOffset + this._ViewportWidth);
            };
            VirtualizingStackPanel.prototype.MakeVisible = function (uie, rectangle) {
                var exposed = new rect();
                var uin = uie.XamlNode;
                var isVertical = this.Orientation === Fayde.Orientation.Vertical;
                var enumerator = this.Children.GetEnumerator();
                while (enumerator.MoveNext()) {
                    var child = enumerator.Current;
                    var childNode = child.XamlNode;
                    var childRenderSize = childNode.LayoutUpdater.RenderSize;
                    if (uin === childNode) {
                        if (isVertical) {
                            if (rectangle.X !== this._HorizontalOffset)
                                this.SetHorizontalOffset(rectangle.X);
                            exposed.Width = Math.min(childRenderSize.Width, this._ViewportWidth);
                            exposed.Height = childRenderSize.Height;
                            exposed.X = this._HorizontalOffset;
                        } else {
                            if (rectangle.Y !== this._VerticalOffset)
                                this.SetVerticalOffset(rectangle.Y);
                            exposed.Height = Math.min(childRenderSize.Height, this._ViewportHeight);
                            exposed.Width = childRenderSize.Width;
                            exposed.Y = this._VerticalOffset;
                        }
                        return exposed;
                    }
                    if (isVertical)
                        exposed.Y += childRenderSize.Height;
else
                        exposed.X += childRenderSize.Width;
                }
                throw new ArgumentException("Visual is not a child of this Panel");
            };
            VirtualizingStackPanel.prototype.SetHorizontalOffset = function (offset) {
                if (offset < 0 || this._ViewportWidth >= this._ExtentWidth)
                    offset = 0;
else if ((offset + this._ViewportWidth) >= this._ExtentWidth)
                    offset = this._ExtentWidth - this._ViewportWidth;
                if (this._HorizontalOffset === offset)
                    return;
                this._HorizontalOffset = offset;
                if (this.Orientation === Fayde.Orientation.Horizontal)
                    this.XamlNode.LayoutUpdater.InvalidateMeasure();
else
                    this.XamlNode.LayoutUpdater.InvalidateArrange();
                var scrollOwner = this.ScrollOwner;
                if (scrollOwner)
                    scrollOwner.InvalidateScrollInfo();
            };
            VirtualizingStackPanel.prototype.SetVerticalOffset = function (offset) {
                if (offset < 0 || this._ViewportHeight >= this._ExtentHeight)
                    offset = 0;
else if ((offset + this._ViewportHeight) >= this._ExtentHeight)
                    offset = this._ExtentHeight - this._ViewportHeight;
                if (this._VerticalOffset === offset)
                    return;
                this._VerticalOffset = offset;
                if (this.Orientation === Fayde.Orientation.Vertical)
                    this.XamlNode.LayoutUpdater.InvalidateMeasure();
else
                    this.XamlNode.LayoutUpdater.InvalidateArrange();
                var scrollOwner = this.ScrollOwner;
                if (scrollOwner)
                    scrollOwner.InvalidateScrollInfo();
            };

            VirtualizingStackPanel.GetIsVirtualizing = function (d) {
                return d.GetValue(VirtualizingStackPanel.IsVirtualizingProperty);
            };
            VirtualizingStackPanel.SetIsVirtualizing = function (d, value) {
                d.SetValue(VirtualizingStackPanel.IsVirtualizingProperty, value);
            };

            VirtualizingStackPanel.GetVirtualizationMode = function (d) {
                return d.GetValue(VirtualizingStackPanel.VirtualizationModeProperty);
            };
            VirtualizingStackPanel.SetVirtualizationMode = function (d, value) {
                d.SetValue(VirtualizingStackPanel.VirtualizationModeProperty, value);
            };
            VirtualizingStackPanel.prototype._MeasureOverride = function (availableSize, error) {
                var owner = Controls.ItemsControl.GetItemsOwner(this);
                var measured = new size();
                var invalidate = false;
                var nvisible = 0;
                var beyond = 0;
                var index;
                var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                if (isHorizontal)
                    index = Math.floor(this._HorizontalOffset);
else
                    index = Math.floor(this._VerticalOffset);
                var itemCount = owner.Items.Count;
                var generator = this.ItemContainerGenerator;
                if (itemCount > 0) {
                    var children = this.Children;
                    var childAvailable = size.copyTo(availableSize);
                    if (this._CanHorizontallyScroll || isHorizontal)
                        childAvailable.Width = Number.POSITIVE_INFINITY;
                    if (this._CanVerticallyScroll || !isHorizontal)
                        childAvailable.Height = Number.POSITIVE_INFINITY;
                    var start = generator.GeneratorPositionFromIndex(index);
                    var insertAt = (start.Offset === 0) ? start.Index : start.Index + 1;
                    var state = generator.StartAt(start, true, true);
                    try  {
                        var isNewlyRealized = { Value: false };
                        var child;
                        var childlu;
                        for (var i = 0; i < itemCount && beyond < 2; i++, insertAt++) {
                            child = generator.GenerateNext(isNewlyRealized);
                            childlu = child.XamlNode.LayoutUpdater;
                            if (isNewlyRealized.Value || insertAt >= children.Count || children.GetValueAt(insertAt) !== child) {
                                if (insertAt < children.Count)
                                    this.InsertInternalChild(insertAt, child);
else
                                    this.AddInternalChild(child);
                                generator.PrepareItemContainer(child);
                            }
                            child.Measure(childAvailable);
                            var s = childlu.DesiredSize;
                            nvisible++;
                            if (!isHorizontal) {
                                measured.Width = Math.max(measured.Width, s.Width);
                                measured.Height += s.Height;
                                if (measured.Height > availableSize.Height)
                                    beyond++;
                            } else {
                                measured.Height = Math.max(measured.Height, s.Height);
                                measured.Width += s.Width;
                                if (measured.Width > availableSize.Width)
                                    beyond++;
                            }
                        }
                    } finally {
                        state.Dispose();
                    }
                }
                VirtualizingStackPanel.SetIsVirtualizing(owner, true);
                if (nvisible > 0)
                    this.RemoveUnusedContainers(index, nvisible);
                nvisible -= beyond;
                if (!isHorizontal) {
                    if (this._ExtentHeight !== itemCount) {
                        this._ExtentHeight = itemCount;
                        invalidate = true;
                    }
                    if (this._ExtentWidth !== measured.Width) {
                        this._ExtentWidth = measured.Width;
                        invalidate = true;
                    }
                    if (this._ViewportHeight !== nvisible) {
                        this._ViewportHeight = nvisible;
                        invalidate = true;
                    }
                    if (this._ViewportWidth != availableSize.Width) {
                        this._ViewportWidth = availableSize.Width;
                        invalidate = true;
                    }
                } else {
                    if (this._ExtentHeight !== measured.Height) {
                        this._ExtentHeight = measured.Height;
                        invalidate = true;
                    }
                    if (this._ExtentWidth !== itemCount) {
                        this._ExtentWidth = itemCount;
                        invalidate = true;
                    }
                    if (this._ViewportHeight !== availableSize.Height) {
                        this._ViewportHeight = availableSize.Height;
                        invalidate = true;
                    }
                    if (this._ViewportWidth !== nvisible) {
                        this._ViewportWidth = nvisible;
                        invalidate = true;
                    }
                }
                var scrollOwner = this.ScrollOwner;
                if (invalidate && scrollOwner != null)
                    scrollOwner.InvalidateScrollInfo();
                return measured;
            };
            VirtualizingStackPanel.prototype._ArrangeOverride = function (finalSize, error) {
                var arranged = size.copyTo(finalSize);
                var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                if (!isHorizontal)
                    arranged.Height = 0;
else
                    arranged.Width = 0;
                var enumerator = this.Children.GetEnumerator();
                while (enumerator.MoveNext()) {
                    var child = enumerator.Current;
                    var childNode = child.XamlNode;
                    var childLu = childNode.LayoutUpdater;
                    var s = childLu.DesiredSize;
                    if (!isHorizontal) {
                        s.Width = finalSize.Width;
                        var childFinal = rect.fromSize(s);
                        if (rect.isEmpty(childFinal)) {
                            rect.clear(childFinal);
                        } else {
                            childFinal.X = -this._HorizontalOffset;
                            childFinal.Y = arranged.Height;
                        }
                        childLu._Arrange(childFinal, error);
                        arranged.Width = Math.max(arranged.Width, s.Width);
                        arranged.Height += s.Height;
                    } else {
                        s.Height = finalSize.Height;
                        var childFinal = rect.fromSize(s);
                        if (rect.isEmpty(childFinal)) {
                            rect.clear(childFinal);
                        } else {
                            childFinal.X = arranged.Width;
                            childFinal.Y = -this._VerticalOffset;
                        }
                        childNode.XObject.Arrange(childFinal);
                        arranged.Width += s.Width;
                        arranged.Height = Math.max(arranged.Height, s.Height);
                    }
                }
                if (!isHorizontal)
                    arranged.Height = Math.max(arranged.Height, finalSize.Height);
else
                    arranged.Width = Math.max(arranged.Width, finalSize.Width);
                return arranged;
            };
            VirtualizingStackPanel.prototype.RemoveUnusedContainers = function (first, count) {
                var generator = this.ItemContainerGenerator;
                var owner = Controls.ItemsControl.GetItemsOwner(this);
                var mode = VirtualizingStackPanel.GetVirtualizationMode(this);
                var last = first + count - 1;
                var item;
                var args;
                var children = this.Children;
                var pos = { Index: children.Count - 1, Offset: 0 };
                while (pos.Index >= 0) {
                    item = generator.IndexFromGeneratorPosition(pos);
                    if (item < first || item > last) {
                        var args = this.OnCleanUpVirtualizedItem(children.GetValueAt(pos.Index), owner.Items.GetValueAt(item));
                        if (!args.Cancel) {
                            this.RemoveInternalChildRange(pos.Index, 1);
                            if (mode === VirtualizationMode.Recycling)
                                generator.Recycle(pos, 1);
else
                                generator.Remove(pos, 1);
                        }
                    }
                    pos.Index--;
                }
            };
            VirtualizingStackPanel.prototype.OnCleanUpVirtualizedItem = function (uie, value) {
                var args = new CleanUpVirtualizedItemEventArgs(uie, value);
                this.CleanUpVirtualizedItemEvent.Raise(this, args);
                return args;
            };
            VirtualizingStackPanel.prototype.OnClearChildren = function () {
                _super.prototype.OnClearChildren.call(this);
                this._HorizontalOffset = 0;
                this._VerticalOffset = 0;
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
                var scrollOwner = this.ScrollOwner;
                if (scrollOwner)
                    scrollOwner.InvalidateScrollInfo();
            };
            VirtualizingStackPanel.prototype.OnItemContainerGeneratorChanged = function (sender, e) {
                _super.prototype.OnItemContainerGeneratorChanged.call(this, sender, e);
                var generator = this.ItemContainerGenerator;
                var owner = Controls.ItemsControl.GetItemsOwner(this);
                var orientation = this.Orientation;
                var index;
                var offset;
                var viewable;
                switch (e.Action) {
                    case Fayde.Collections.NotifyCollectionChangedAction.Add:
                        var index = generator.IndexFromGeneratorPosition(e.Position);
                        if (orientation === Fayde.Orientation.Horizontal)
                            offset = this.HorizontalOffset;
else
                            offset = this.VerticalOffset;
                        if (index <= offset) {
                            offset += e.ItemCount;
                        }
                        if (orientation === Fayde.Orientation.Horizontal)
                            this.SetHorizontalOffset(offset);
else
                            this.SetVerticalOffset(offset);
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                        index = generator.IndexFromGeneratorPosition(e.Position);
                        if (orientation === Fayde.Orientation.Horizontal) {
                            offset = this.HorizontalOffset;
                            viewable = this.ViewportWidth;
                        } else {
                            offset = this.VerticalOffset;
                            viewable = this.ViewportHeight;
                        }
                        if (index < offset) {
                            offset = Math.max(offset - e.ItemCount, 0);
                        }
                        offset = Math.min(offset, owner.Items.Count - viewable);
                        offset = Math.max(offset, 0);
                        if (orientation === Fayde.Orientation.Horizontal)
                            this.SetHorizontalOffset(offset);
else
                            this.SetVerticalOffset(offset);
                        this.RemoveInternalChildRange(e.Position.Index, e.ItemUICount);
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                        this.RemoveInternalChildRange(e.Position.Index, e.ItemUICount);
                        break;
                    case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                        break;
                }
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
                var scrollOwner = this.ScrollOwner;
                if (scrollOwner)
                    scrollOwner.InvalidateScrollInfo();
            };
            VirtualizingStackPanel.OrientationProperty = DependencyProperty.Register("Orientation", function () {
                return new Enum(Fayde.Orientation);
            }, VirtualizingStackPanel, Fayde.Orientation.Vertical, function (d, args) {
                return (d).XamlNode.LayoutUpdater.InvalidateMeasure();
            });

            VirtualizingStackPanel.IsVirtualizingProperty = DependencyProperty.RegisterAttached("IsVirtualizing", function () {
                return new Boolean();
            }, VirtualizingStackPanel, false);

            VirtualizingStackPanel.VirtualizationModeProperty = DependencyProperty.RegisterAttached("VirtualizationMode", function () {
                return new Enum(VirtualizationMode);
            }, VirtualizingStackPanel, VirtualizationMode.Recycling);
            return VirtualizingStackPanel;
        })(Controls.VirtualizingPanel);
        Controls.VirtualizingStackPanel = VirtualizingStackPanel;
        Fayde.RegisterType(VirtualizingStackPanel, {
            Name: "VirtualizingStackPanel",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS,
            Interfaces: [Controls.Primitives.IScrollInfo_]
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var PopupNode = (function (_super) {
                __extends(PopupNode, _super);
                function PopupNode() {
                    _super.apply(this, arguments);
                    this._HorizontalOffset = 0;
                    this._VerticalOffset = 0;
                    this._IsVisible = false;
                    this._IsCatchingClick = false;
                    this._Catcher = null;
                }
                PopupNode.prototype.GetInheritedEnumerator = function () {
                    var popup = (this.XObject);
                    if (!popup)
                        return Fayde.ArrayEx.EmptyEnumerator;
                    var child = popup.Child;
                    if (!child)
                        return Fayde.ArrayEx.EmptyEnumerator;
                    return Fayde.ArrayEx.GetEnumerator([popup.Child.XamlNode]);
                };
                PopupNode.prototype.ComputeBounds = function (baseComputer, lu) {
                };
                PopupNode.prototype.OnIsAttachedChanged = function (newIsAttached) {
                    _super.prototype.OnIsAttachedChanged.call(this, newIsAttached);
                    if (!newIsAttached && this.XObject.IsOpen)
                        this.XObject.IsOpen = false;
                };

                PopupNode.prototype._ChildChanged = function (oldChild, newChild) {
                    var popup = this.XObject;
                    this._Hide();
                    if (oldChild)
                        Fayde.Providers.InheritedStore.ClearInheritedOnRemove(popup, oldChild.XamlNode);
                    this._PrepareVisualChild(newChild);
                    if (newChild) {
                        Fayde.Providers.InheritedStore.PropagateInheritedOnAdd(popup, newChild.XamlNode);
                        if (popup.IsOpen)
                            this._Show();
                    }
                };
                PopupNode.prototype._PrepareVisualChild = function (newChild) {
                    if (!newChild)
                        return;
                    if (this._IsCatchingClick) {
                        var root = this._VisualChild;
                        if (!root) {
                            var root = new Controls.Canvas();
                            var clickCatcher = new Controls.Canvas();
                            clickCatcher.Background = Fayde.Media.SolidColorBrush.FromColor(Color.FromRgba(255, 255, 255, 0));
                            clickCatcher.LayoutUpdated.Subscribe(this._UpdateCatcher, this);
                            clickCatcher.MouseLeftButtonDown.Subscribe(this._RaiseClickedOutside, this);
                            root.Children.Add(clickCatcher);
                            this._Catcher = clickCatcher;
                            this._VisualChild = root;
                        } else {
                            root.Children.RemoveAt(1);
                        }
                        root.Children.Add(newChild);
                    } else {
                        this._VisualChild = newChild;
                    }
                };
                PopupNode.prototype.CatchClickedOutside = function () {
                    if (!this._IsCatchingClick)
                        this._VisualChild = null;
                    this._IsCatchingClick = true;
                    this._PrepareVisualChild(this.XObject.Child);
                };
                PopupNode.prototype._UpdateCatcher = function () {
                    var root = this._VisualChild;
                    if (!root)
                        return;
                    var surfaceExtents = this._Surface.Extents;
                    root.Width = surfaceExtents.Width;
                    root.Height = surfaceExtents.Height;
                    var catcher = this._Catcher;
                    if (!catcher)
                        return;
                    catcher.Width = root.Width;
                    catcher.Height = root.Height;
                };
                PopupNode.prototype._RaiseClickedOutside = function (sender, e) {
                    this.XObject.ClickedOutside.Raise(this, EventArgs.Empty);
                };
                PopupNode.prototype.PostCompute = function (lu, hasLocalProjection) {
                    var child = this.XObject.Child;
                    if (!child)
                        return;
                    var childLu = child.XamlNode.LayoutUpdater;
                    var popup = this.XObject;
                    if (lu.TotalRenderProjection) {
                        var projection = mat4.clone(lu.AbsoluteProjection);
                        var m = mat4.createTranslate(popup.HorizontalOffset, popup.VerticalOffset, 0.0);
                        mat4.multiply(m, projection, projection);
                        childLu.CarrierProjection = projection;
                        childLu.CarrierXform = null;
                        childLu.UpdateProjection();
                    } else {
                        var xform = mat3.clone(lu.AbsoluteXform);
                        mat3.translate(xform, popup.HorizontalOffset, popup.VerticalOffset);
                        childLu.CarrierProjection = null;
                        childLu.CarrierXform = xform;
                        childLu.UpdateTransform();
                    }
                };
                PopupNode.prototype.OnHorizontalOffsetChanged = function (args) {
                    var child = this.XObject.Child;
                    if (!child)
                        return;
                    var childLu = child.XamlNode.LayoutUpdater;
                    var tween = args.NewValue - this._HorizontalOffset;
                    if (tween === 0)
                        return;
                    this._HorizontalOffset = args.NewValue;
                    if (childLu.CarrierProjection) {
                        var m = mat4.createTranslate(tween, 0.0, 0.0);
                        mat4.multiply(m, childLu.CarrierProjection, childLu.CarrierProjection);
                    } else if (childLu.CarrierXform) {
                        mat3.translate(childLu.CarrierXform, tween, 0.0);
                    }
                    this._VisualChild.InvalidateMeasure();
                };
                PopupNode.prototype.OnVerticalOffsetChanged = function (args) {
                    var child = this.XObject.Child;
                    if (!child)
                        return;
                    var childLu = child.XamlNode.LayoutUpdater;
                    var tween = args.NewValue - this._VerticalOffset;
                    if (tween === 0)
                        return;
                    this._VerticalOffset = args.NewValue;
                    if (childLu.CarrierProjection) {
                        var m = mat4.createTranslate(0.0, tween, 0.0);
                        mat4.multiply(m, childLu.CarrierProjection, childLu.CarrierProjection);
                    } else if (childLu.CarrierXform) {
                        mat3.translate(childLu.CarrierXform, 0.0, tween);
                    }
                    this._VisualChild.InvalidateMeasure();
                };
                PopupNode.prototype._Hide = function () {
                    var child = this._VisualChild;
                    if (!this._IsVisible || !child)
                        return;
                    this._IsVisible = false;
                    this.LayoutUpdater.ShouldSkipHitTest = true;
                    this._Surface.DetachLayer(child);
                };
                PopupNode.prototype._Show = function () {
                    this._UpdateCatcher();
                    var child = this._VisualChild;
                    if (this._IsVisible || !child)
                        return;
                    this._IsVisible = true;
                    this.LayoutUpdater.ShouldSkipHitTest = false;
                    this._Surface.AttachLayer(child);
                };
                return PopupNode;
            })(Fayde.FENode);
            Primitives.PopupNode = PopupNode;
            Fayde.RegisterType(PopupNode, {
                Name: "PopupNode",
                Namespace: "Fayde.Controls.Primitives"
            });
            var Popup = (function (_super) {
                __extends(Popup, _super);
                function Popup() {
                    _super.apply(this, arguments);
                    this.Opened = new MulticastEvent();
                    this.Closed = new MulticastEvent();
                    this.ClickedOutside = new MulticastEvent();
                }
                Popup.prototype.CreateNode = function () {
                    return new PopupNode(this);
                };

                Popup.prototype._OnChildChanged = function (args) {
                    var oldFE;
                    if (args.OldValue instanceof Fayde.FrameworkElement)
                        oldFE = args.OldValue;
                    var newFE;
                    if (args.NewValue instanceof Fayde.FrameworkElement)
                        newFE = args.NewValue;
                    this.XamlNode._ChildChanged(oldFE, newFE);
                };
                Popup.prototype._OnIsOpenChanged = function (args) {
                    if (args.NewValue) {
                        this.XamlNode._Show();
                        this.Opened.RaiseAsync(this, EventArgs.Empty);
                    } else {
                        this.XamlNode._Hide();
                        this.Closed.RaiseAsync(this, EventArgs.Empty);
                    }
                };
                Popup.ChildProperty = DependencyProperty.Register("Child", function () {
                    return Fayde.UIElement;
                }, Popup, undefined, function (d, args) {
                    return (d)._OnChildChanged(args);
                });
                Popup.HorizontalOffsetProperty = DependencyProperty.Register("HorizontalOffset", function () {
                    return Number;
                }, Popup, 0.0, function (d, args) {
                    return (d).XamlNode.OnHorizontalOffsetChanged(args);
                });
                Popup.VerticalOffsetProperty = DependencyProperty.Register("VerticalOffset", function () {
                    return Number;
                }, Popup, 0.0, function (d, args) {
                    return (d).XamlNode.OnVerticalOffsetChanged(args);
                });
                Popup.IsOpenProperty = DependencyProperty.Register("IsOpen", function () {
                    return Boolean;
                }, Popup, false, function (d, args) {
                    return (d)._OnIsOpenChanged(args);
                });

                Popup.Annotations = { ContentProperty: Popup.ChildProperty };
                return Popup;
            })(Fayde.FrameworkElement);
            Primitives.Popup = Popup;
            Fayde.RegisterType(Popup, {
                Name: "Popup",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var RangeBase = (function (_super) {
                __extends(RangeBase, _super);
                function RangeBase() {
                    _super.apply(this, arguments);
                    this._LevelsFromRootCall = 0;
                    this._InitialMax = 0;
                    this._InitialVal = 0;
                    this._RequestedMax = 0;
                    this._RequestedVal = 0;
                    this.ValueChanged = new Fayde.RoutedPropertyChangedEvent();
                }
                RangeBase.prototype._OnMinimumChanged = function (args) {
                    if (!isValidDoubleValue(args.NewValue))
                        throw new ArgumentException("Invalid double value for Minimum property.");
                    if (this._LevelsFromRootCall === 0) {
                        this._InitialMax = this.Maximum;
                        this._InitialVal = this.Value;
                    }
                    this._LevelsFromRootCall++;
                    this._CoerceMaximum();
                    this._CoerceValue();
                    this._LevelsFromRootCall--;
                    if (this._LevelsFromRootCall === 0) {
                        this.OnMinimumChanged(args.OldValue, args.OldValue);
                        var max = this.Maximum;
                        if (!areNumbersClose(this._InitialMax, max)) {
                            this.OnMaximumChanged(this._InitialMax, max);
                        }
                        var val = this.Value;
                        if (!areNumbersClose(this._InitialVal, val)) {
                            this.RaiseValueChanged(this._InitialVal, val);
                        }
                    }
                };
                RangeBase.prototype._OnMaximumChanged = function (args) {
                    if (!isValidDoubleValue(args.NewValue))
                        throw new ArgumentException("Invalid double value for Maximum property.");
                    if (this._LevelsFromRootCall === 0) {
                        this._RequestedMax = args.NewValue;
                        this._InitialMax = args.OldValue;
                        this._InitialVal = this.Value;
                    }
                    this._LevelsFromRootCall++;
                    this._CoerceMaximum();
                    this._CoerceValue();
                    this._LevelsFromRootCall--;
                    if (this._LevelsFromRootCall === 0) {
                        var max = this.Maximum;
                        if (!areNumbersClose(this._InitialMax, max)) {
                            this.OnMaximumChanged(this._InitialMax, max);
                        }
                        var val = this.Value;
                        if (!areNumbersClose(this._InitialVal, val)) {
                            this.RaiseValueChanged(this._InitialVal, val);
                        }
                    }
                };
                RangeBase.prototype._OnLargeChangeChanged = function (args) {
                    if (!isValidChange(args.NewValue))
                        throw new ArgumentException("Invalid Large Change Value.");
                };
                RangeBase.prototype._OnSmallChangeChanged = function (args) {
                    if (!isValidChange(args.NewValue))
                        throw new ArgumentException("Invalid Small Change Value.");
                };
                RangeBase.prototype._OnValueChanged = function (args) {
                    if (!isValidDoubleValue(args.NewValue))
                        throw new ArgumentException("Invalid double value for Value property.");
                    if (this._LevelsFromRootCall === 0) {
                        this._RequestedVal = args.NewValue;
                        this._InitialVal = args.OldValue;
                    }
                    this._LevelsFromRootCall++;
                    this._CoerceValue();
                    this._LevelsFromRootCall--;
                    if (this._LevelsFromRootCall === 0) {
                        var val = this.Value;
                        if (!areNumbersClose(this._InitialVal, val)) {
                            this.RaiseValueChanged(this._InitialVal, val);
                        }
                    }
                };
                RangeBase.prototype._CoerceMaximum = function () {
                    var min = this.Minimum;
                    var max = this.Maximum;
                    if (!areNumbersClose(this._RequestedMax, max) && this._RequestedMax >= min) {
                        this.Maximum = this._RequestedMax;
                        return;
                    }
                    if (max < min)
                        this.Maximum = min;
                };
                RangeBase.prototype._CoerceValue = function () {
                    var min = this.Minimum;
                    var max = this.Maximum;
                    var val = this.Value;
                    if (!areNumbersClose(this._RequestedVal, val) && this._RequestedVal >= min && this._RequestedVal <= max) {
                        this.Value = this._RequestedVal;
                        return;
                    }
                    if (val < min)
                        this.Value = min;
                    if (val > max)
                        this.Value = max;
                };
                RangeBase.prototype.OnMinimumChanged = function (oldMin, newMin) {
                };
                RangeBase.prototype.OnMaximumChanged = function (oldMax, newMax) {
                };
                RangeBase.prototype.RaiseValueChanged = function (oldVal, newVal) {
                    this.ValueChanged.Raise(this, new Fayde.RoutedPropertyChangedEventArgs(oldVal, newVal));
                    this.OnValueChanged(oldVal, newVal);
                };
                RangeBase.prototype.OnValueChanged = function (oldVal, newVal) {
                };
                RangeBase.MinimumProperty = DependencyProperty.Register("Minimum", function () {
                    return Number;
                }, RangeBase, 0, function (d, args) {
                    return (d)._OnMinimumChanged(args);
                });
                RangeBase.MaximumProperty = DependencyProperty.Register("Maximum", function () {
                    return Number;
                }, RangeBase, 1, function (d, args) {
                    return (d)._OnMaximumChanged(args);
                });
                RangeBase.LargeChangeProperty = DependencyProperty.Register("LargeChange", function () {
                    return Number;
                }, RangeBase, 1, function (d, args) {
                    return (d)._OnLargeChangeChanged(args);
                });
                RangeBase.SmallChangeProperty = DependencyProperty.Register("SmallChange", function () {
                    return Number;
                }, RangeBase, 0.1, function (d, args) {
                    return (d)._OnSmallChangeChanged(args);
                });
                RangeBase.ValueProperty = DependencyProperty.Register("Value", function () {
                    return Number;
                }, RangeBase, 0, function (d, args) {
                    return (d)._OnValueChanged(args);
                });
                return RangeBase;
            })(Fayde.Controls.Control);
            Primitives.RangeBase = RangeBase;
            Fayde.RegisterType(RangeBase, {
                Name: "RangeBase",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
            function areNumbersClose(val1, val2) {
                if (val1 === val2)
                    return true;
                var num1 = (Math.abs(val1) + Math.abs(val2) + 10) * 1.11022302462516E-16;
                var num2 = val1 - val2;
                return -num1 < num2 && num1 > num2;
            }
            function isValidChange(value) {
                if (!isValidDoubleValue(value))
                    return false;
                return value >= 0;
            }
            function isValidDoubleValue(value) {
                if (typeof value !== "number")
                    return false;
                if (isNaN(value))
                    return false;
                if (!isFinite(value))
                    return false;
                return true;
            }
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var ScrollBar = (function (_super) {
                __extends(ScrollBar, _super);
                function ScrollBar() {
                    _super.call(this);
                    this._DragValue = 0;
                    this.Scroll = new Fayde.RoutedEvent();
                    this.DefaultStyleKey = (this).constructor;
                    this.SizeChanged.Subscribe(this._HandleSizeChanged, this);
                }
                Object.defineProperty(ScrollBar.prototype, "IsDragging", {
                    get: function () {
                        if (this.$HorizontalThumb)
                            return this.$HorizontalThumb.IsDragging;
                        if (this.$VerticalThumb)
                            return this.$VerticalThumb.IsDragging;
                        return false;
                    },
                    enumerable: true,
                    configurable: true
                });

                ScrollBar.prototype._GetChildOfType = function (name, type) {
                    var temp = this.GetTemplateChild(name);
                    if (temp instanceof type)
                        return temp;
                };
                ScrollBar.prototype.OnApplyTemplate = function () {
                    _super.prototype.OnApplyTemplate.call(this);
                    this.$HorizontalTemplate = this._GetChildOfType("HorizontalRoot", Fayde.FrameworkElement);
                    this.$HorizontalLargeIncrease = this._GetChildOfType("HorizontalLargeIncrease", Primitives.RepeatButton);
                    this.$HorizontalLargeDecrease = this._GetChildOfType("HorizontalLargeDecrease", Primitives.RepeatButton);
                    this.$HorizontalSmallIncrease = this._GetChildOfType("HorizontalSmallIncrease", Primitives.RepeatButton);
                    this.$HorizontalSmallDecrease = this._GetChildOfType("HorizontalSmallDecrease", Primitives.RepeatButton);
                    this.$HorizontalThumb = this._GetChildOfType("HorizontalThumb", Primitives.Thumb);
                    this.$VerticalTemplate = this._GetChildOfType("VerticalRoot", Fayde.FrameworkElement);
                    this.$VerticalLargeIncrease = this._GetChildOfType("VerticalLargeIncrease", Primitives.RepeatButton);
                    this.$VerticalLargeDecrease = this._GetChildOfType("VerticalLargeDecrease", Primitives.RepeatButton);
                    this.$VerticalSmallIncrease = this._GetChildOfType("VerticalSmallIncrease", Primitives.RepeatButton);
                    this.$VerticalSmallDecrease = this._GetChildOfType("VerticalSmallDecrease", Primitives.RepeatButton);
                    this.$VerticalThumb = this._GetChildOfType("VerticalThumb", Primitives.Thumb);
                    if (this.$HorizontalThumb) {
                        this.$HorizontalThumb.DragStarted.Subscribe(this._OnThumbDragStarted, this);
                        this.$HorizontalThumb.DragDelta.Subscribe(this._OnThumbDragDelta, this);
                        this.$HorizontalThumb.DragCompleted.Subscribe(this._OnThumbDragCompleted, this);
                    }
                    if (this.$HorizontalLargeIncrease) {
                        this.$HorizontalLargeIncrease.Click.Subscribe(this._LargeIncrement, this);
                    }
                    if (this.$HorizontalLargeDecrease) {
                        this.$HorizontalLargeDecrease.Click.Subscribe(this._LargeDecrement, this);
                    }
                    if (this.$HorizontalSmallIncrease) {
                        this.$HorizontalSmallIncrease.Click.Subscribe(this._SmallIncrement, this);
                    }
                    if (this.$HorizontalSmallDecrease) {
                        this.$HorizontalSmallDecrease.Click.Subscribe(this._SmallDecrement, this);
                    }
                    if (this.$VerticalThumb) {
                        this.$VerticalThumb.DragStarted.Subscribe(this._OnThumbDragStarted, this);
                        this.$VerticalThumb.DragDelta.Subscribe(this._OnThumbDragDelta, this);
                        this.$VerticalThumb.DragCompleted.Subscribe(this._OnThumbDragCompleted, this);
                    }
                    if (this.$VerticalLargeIncrease) {
                        this.$VerticalLargeIncrease.Click.Subscribe(this._LargeIncrement, this);
                    }
                    if (this.$VerticalLargeDecrease) {
                        this.$VerticalLargeDecrease.Click.Subscribe(this._LargeDecrement, this);
                    }
                    if (this.$VerticalSmallIncrease) {
                        this.$VerticalSmallIncrease.Click.Subscribe(this._SmallIncrement, this);
                    }
                    if (this.$VerticalSmallDecrease) {
                        this.$VerticalSmallDecrease.Click.Subscribe(this._SmallDecrement, this);
                    }
                    this._OnOrientationChanged();
                    this.UpdateVisualState(false);
                };
                ScrollBar.prototype.OnMaximumChanged = function (oldMax, newMax) {
                    var trackLength = this._GetTrackLength();
                    _super.prototype.OnMaximumChanged.call(this, oldMax, newMax);
                    this._UpdateTrackLayout(trackLength);
                };
                ScrollBar.prototype.OnMinimumChanged = function (oldMin, newMin) {
                    var trackLength = this._GetTrackLength();
                    _super.prototype.OnMinimumChanged.call(this, oldMin, newMin);
                    this._UpdateTrackLayout(trackLength);
                };
                ScrollBar.prototype.OnValueChanged = function (oldValue, newValue) {
                    var trackLength = this._GetTrackLength();
                    _super.prototype.OnValueChanged.call(this, oldValue, newValue);
                    this._UpdateTrackLayout(trackLength);
                };
                ScrollBar.prototype._OnThumbDragStarted = function (sender, e) {
                    this._DragValue = this.Value;
                };
                ScrollBar.prototype._OnThumbDragDelta = function (sender, e) {
                    var change = 0;
                    var zoomFactor = 1;
                    var num = zoomFactor;
                    var max = this.Maximum;
                    var min = this.Minimum;
                    var diff = max - min;
                    var trackLength = this._GetTrackLength();
                    var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                    if (this.$VerticalThumb && !isHorizontal) {
                        change = num * e.VerticalChange / (trackLength - this.$VerticalThumb.ActualHeight) * diff;
                    }
                    if (this.$HorizontalThumb && isHorizontal) {
                        change = num * e.HorizontalChange / (trackLength - this.$HorizontalThumb.ActualWidth) * diff;
                    }
                    if (!isNaN(change) && isFinite(change)) {
                        this._DragValue += change;
                        var num1 = Math.min(max, Math.max(min, this._DragValue));
                        if (num1 !== this.Value) {
                            this.Value = num1;
                            this._RaiseScroll(Primitives.ScrollEventType.ThumbTrack);
                        }
                    }
                };
                ScrollBar.prototype._OnThumbDragCompleted = function (sender, e) {
                    this._RaiseScroll(Primitives.ScrollEventType.EndScroll);
                };
                ScrollBar.prototype._SmallDecrement = function (sender, e) {
                    var curValue = this.Value;
                    var num = Math.max(curValue - this.SmallChange, this.Minimum);
                    if (curValue !== num) {
                        this.Value = num;
                        this._RaiseScroll(Primitives.ScrollEventType.SmallDecrement);
                    }
                };
                ScrollBar.prototype._SmallIncrement = function (sender, e) {
                    var curValue = this.Value;
                    var num = Math.min(curValue + this.SmallChange, this.Maximum);
                    if (curValue !== num) {
                        this.Value = num;
                        this._RaiseScroll(Primitives.ScrollEventType.SmallIncrement);
                    }
                };
                ScrollBar.prototype._LargeDecrement = function (sender, e) {
                    var curValue = this.Value;
                    var num = Math.max(curValue - this.LargeChange, this.Minimum);
                    if (curValue !== num) {
                        this.Value = num;
                        this._RaiseScroll(Primitives.ScrollEventType.LargeDecrement);
                    }
                };
                ScrollBar.prototype._LargeIncrement = function (sender, e) {
                    var curValue = this.Value;
                    var num = Math.min(curValue + this.LargeChange, this.Maximum);
                    if (curValue !== num) {
                        this.Value = num;
                        this._RaiseScroll(Primitives.ScrollEventType.LargeIncrement);
                    }
                };
                ScrollBar.prototype._HandleSizeChanged = function (sender, e) {
                    this._UpdateTrackLayout(this._GetTrackLength());
                };
                ScrollBar.prototype._OnOrientationChanged = function () {
                    var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                    if (this.$HorizontalTemplate) {
                        this.$HorizontalTemplate.Visibility = isHorizontal ? Fayde.Visibility.Visible : Fayde.Visibility.Collapsed;
                    }
                    if (this.$VerticalTemplate) {
                        this.$VerticalTemplate.Visibility = isHorizontal ? Fayde.Visibility.Collapsed : Fayde.Visibility.Visible;
                    }
                    this._UpdateTrackLayout(this._GetTrackLength());
                };
                ScrollBar.prototype._UpdateTrackLayout = function (trackLength) {
                    var max = this.Maximum;
                    var min = this.Minimum;
                    var val = this.Value;
                    var multiplier = (val - min) / (max - min);
                    var thumbSize = this._UpdateThumbSize(trackLength);
                    var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                    if (isHorizontal && this.$HorizontalLargeDecrease && this.$HorizontalThumb) {
                        this.$HorizontalLargeDecrease.Width = Math.max(0, multiplier * (trackLength - thumbSize));
                    } else if (!isHorizontal && this.$VerticalLargeDecrease && this.$VerticalThumb) {
                        this.$VerticalLargeDecrease.Height = Math.max(0, multiplier * (trackLength - thumbSize));
                    }
                };
                ScrollBar.prototype._UpdateThumbSize = function (trackLength) {
                    var result = Number.NaN;
                    var hideThumb = trackLength <= 0;
                    if (trackLength > 0) {
                        var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                        var max = this.Maximum;
                        var min = this.Minimum;
                        if (isHorizontal && this.$HorizontalThumb) {
                            if (max - min !== 0)
                                result = Math.max(this.$HorizontalThumb.MinWidth, this._ConvertViewportSizeToDisplayUnits(trackLength));
                            if (max - min === 0 || result > this.ActualWidth || trackLength <= this.$HorizontalThumb.MinWidth) {
                                hideThumb = true;
                            } else {
                                this.$HorizontalThumb.Visibility = Fayde.Visibility.Visible;
                                this.$HorizontalThumb.Width = result;
                            }
                        } else if (!isHorizontal && this.$VerticalThumb) {
                            if (max - min !== 0)
                                result = Math.max(this.$VerticalThumb.MinHeight, this._ConvertViewportSizeToDisplayUnits(trackLength));
                            if (max - min === 0 || result > this.ActualHeight || trackLength <= this.$VerticalThumb.MinHeight) {
                                hideThumb = true;
                            } else {
                                this.$VerticalThumb.Visibility = Fayde.Visibility.Visible;
                                this.$VerticalThumb.Height = result;
                            }
                        }
                    }
                    if (hideThumb) {
                        if (this.$HorizontalThumb) {
                            this.$HorizontalThumb.Visibility = Fayde.Visibility.Collapsed;
                        }
                        if (this.$VerticalThumb) {
                            this.$VerticalThumb.Visibility = Fayde.Visibility.Collapsed;
                        }
                    }
                    return result;
                };
                ScrollBar.prototype._GetTrackLength = function () {
                    var actual = NaN;
                    if (this.Orientation === Fayde.Orientation.Horizontal) {
                        actual = this.ActualWidth;
                        if (this.$HorizontalSmallDecrease) {
                            var thickness = this.$HorizontalSmallDecrease.Margin;
                            actual = actual - (this.$HorizontalSmallDecrease.ActualWidth + thickness.Left + thickness.Right);
                        }
                        if (this.$HorizontalSmallIncrease) {
                            var thickness = this.$HorizontalSmallIncrease.Margin;
                            actual = actual - (this.$HorizontalSmallIncrease.ActualWidth + thickness.Left + thickness.Right);
                        }
                    } else {
                        actual = this.ActualHeight;
                        if (this.$VerticalSmallDecrease) {
                            var thickness = this.$VerticalSmallDecrease.Margin;
                            actual = actual - (this.$VerticalSmallDecrease.ActualHeight + thickness.Top + thickness.Bottom);
                        }
                        if (this.$VerticalSmallIncrease) {
                            var thickness = this.$VerticalSmallIncrease.Margin;
                            actual = actual - (this.$VerticalSmallIncrease.ActualHeight + thickness.Top + thickness.Bottom);
                        }
                    }
                    return actual;
                };
                ScrollBar.prototype._ConvertViewportSizeToDisplayUnits = function (trackLength) {
                    var viewportSize = this.ViewportSize;
                    return trackLength * viewportSize / (viewportSize + this.Maximum - this.Minimum);
                };
                ScrollBar.prototype._RaiseScroll = function (type) {
                    var args = new Primitives.ScrollEventArgs(type, this.Value);
                    args.OriginalSource = this;
                    this.Scroll.Raise(this, args);
                };
                ScrollBar.OrientationProperty = DependencyProperty.Register("Orientation", function () {
                    return new Enum(Fayde.Orientation);
                }, ScrollBar, Fayde.Orientation.Horizontal, function (d, args) {
                    return (d)._OnOrientationChanged();
                });
                ScrollBar.ViewportSizeProperty = DependencyProperty.Register("ViewportSize", function () {
                    return Number;
                }, ScrollBar, 0, function (d, args) {
                    return (d)._UpdateTrackLayout((d)._GetTrackLength());
                });
                return ScrollBar;
            })(Primitives.RangeBase);
            Primitives.ScrollBar = ScrollBar;
            Fayde.RegisterType(ScrollBar, {
                Name: "ScrollBar",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var Selector = (function (_super) {
                __extends(Selector, _super);
                function Selector() {
                    _super.call(this);
                    this.SelectionChanged = new Fayde.RoutedEvent();
                    this._SelectedItems = new Fayde.Collections.ObservableCollection();
                    this._Initializing = false;
                    this._SelectedItemsIsInvalid = false;
                    this.$TemplateScrollViewer = null;
                    this._SelectedValueWalker = null;
                    this._Selection = new Primitives.SelectorSelection(this);
                }
                Object.defineProperty(Selector.prototype, "SynchronizeWithCurrentItem", {
                    get: function () {
                        if (!Nullstone.ImplementsInterface(this.ItemsSource, Fayde.Data.ICollectionView_))
                            return false;
                        return this.IsSynchronizedWithCurrentItem !== false;
                    },
                    enumerable: true,
                    configurable: true
                });

                Object.defineProperty(Selector.prototype, "SelectedItems", {
                    get: function () {
                        if (this._SelectedItemsIsInvalid)
                            this._Selection.RepopulateSelectedItems();
                        return this._SelectedItems;
                    },
                    enumerable: true,
                    configurable: true
                });
                Selector.prototype._OnIsSynchronizedWithCurrentItemChanged = function (args) {
                    if (args.NewValue === true)
                        throw new ArgumentException("Setting IsSynchronizedWithCurrentItem to 'true' is not supported");
                    if (args.NewValue == null && Nullstone.ImplementsInterface(this.ItemsSource, Fayde.Data.ICollectionView_))
                        this.SelectedItem = (this.ItemsSource).CurrentItem;
else
                        this.SelectedItem = null;
                };
                Selector.prototype._OnSelectedIndexChanged = function (args) {
                    if (this._Selection.IsUpdating || this._Initializing)
                        return;
                    var items = this.Items;
                    if (args.NewValue < 0 || args.NewValue >= items.Count)
                        this._Selection.ClearSelection();
else
                        this._Selection.Select(items.GetValueAt(args.NewValue));
                };
                Selector.prototype._OnSelectedItemChanged = function (args) {
                    if (this._Selection.IsUpdating || this._Initializing)
                        return;
                    if (args.NewValue == null)
                        this._Selection.ClearSelection();
else if (this.Items.IndexOf(args.NewValue) != -1)
                        this._Selection.Select(args.NewValue);
else if (this.Items.IndexOf(args.OldValue) != -1)
                        this._Selection.Select(args.OldValue);
else
                        this._Selection.ClearSelection();
                };
                Selector.prototype._OnSelectedValueChanged = function (args) {
                    if (this._Selection.IsUpdating || this._Initializing)
                        return;
                    this._SelectItemFromValue(args.NewValue, false);
                };
                Selector.prototype._OnSelectedValuePathChanged = function (args) {
                    this._SelectedValueWalker = !args.NewValue ? null : new Fayde.Data.PropertyPathWalker(args.NewValue);
                    if (this._Initializing)
                        return;
                    this._SelectItemFromValue(this.SelectedValue, true);
                };
                Selector.prototype.OnApplyTemplate = function () {
                    _super.prototype.OnApplyTemplate.call(this);
                    var temp = this.GetTemplateChild("ScrollViewer");
                    var tsv = (temp instanceof Controls.ScrollViewer) ? temp : null;
                    this.$TemplateScrollViewer = tsv;
                    if (tsv) {
                        tsv.$TemplatedParentHandlesScrolling = true;
                        tsv.HorizontalScrollBarVisibility = Fayde.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(this);
                        tsv.VerticalScrollBarVisibility = Fayde.Controls.ScrollViewer.GetVerticalScrollBarVisibility(this);
                    }
                };
                Selector.prototype.OnItemsChanged = function (e) {
                    if (this._Initializing) {
                        _super.prototype.OnItemsChanged.call(this, e);
                        return;
                    }
                    var item;
                    switch (e.Action) {
                        case Fayde.Collections.NotifyCollectionChangedAction.Add:
                            var lbi;
                            if (e.NewItems[0] instanceof Controls.ListBoxItem)
                                lbi = e.NewItems[0];
                            if (lbi != null && lbi.IsSelected && !this.SelectedItems.Contains(lbi)) {
                                this._Selection.Select(lbi);
                            } else if (this.SelectedItem != null) {
                                this._Selection.Select(this.SelectedItem);
                            }
                            break;
                        case Fayde.Collections.NotifyCollectionChangedAction.Reset:
                            var o;
                            var itemsSource = this.ItemsSource;
                            if (Nullstone.ImplementsInterface(itemsSource, Fayde.Data.ICollectionView_) && this.SynchronizeWithCurrentItem)
                                o = (itemsSource).CurrentItem;
else
                                o = this.SelectedItem;
                            if (this.Items.Contains(o))
                                this._Selection.Select(o);
else
                                this._Selection.ClearSelection();
                            break;
                        case Fayde.Collections.NotifyCollectionChangedAction.Remove:
                            item = e.OldItems[0];
                            if (this.SelectedItems.Contains(item))
                                this._Selection.Unselect(item);
else if (e.OldStartingIndex <= this.SelectedIndex)
                                this._Selection.Select(this.SelectedItem);
                            break;
                        case Fayde.Collections.NotifyCollectionChangedAction.Replace:
                            item = e.OldItems[0];
                            this._Selection.Unselect(item);
                            break;
                        default:
                            throw new NotSupportedException("Collection changed action '" + e.Action + "' not supported");
                    }
                    _super.prototype.OnItemsChanged.call(this, e);
                };
                Selector.prototype.OnItemsSourceChanged = function (args) {
                    _super.prototype.OnItemsSourceChanged.call(this, args);
                    var view;
                    if (Nullstone.ImplementsInterface(args.OldValue, Fayde.Data.ICollectionView_))
                        view = args.OldValue;
                    if (view)
                        view.CurrentChanged.Unsubscribe(this._OnCurrentItemChanged, this);
                    if (Nullstone.ImplementsInterface(args.NewValue, Fayde.Data.ICollectionView_))
                        view = args.NewValue;
                    if (view) {
                        view.CurrentChanged.Subscribe(this._OnCurrentItemChanged, this);
                        if (this.SynchronizeWithCurrentItem)
                            this._Selection.SelectOnly(view.CurrentItem);
else
                            this._Selection.ClearSelection();
                    } else {
                        this._Selection.ClearSelection();
                    }
                };
                Selector.prototype.OnItemContainerStyleChanged = function (oldStyle, newStyle) {
                };
                Selector.prototype.ClearContainerForItem = function (element, item) {
                    _super.prototype.ClearContainerForItem.call(this, element, item);
                    var lbi = element;
                    lbi.ParentSelector = null;
                    if (lbi !== item)
                        lbi.Content = null;
                };
                Selector.prototype.PrepareContainerForItem = function (element, item) {
                    _super.prototype.PrepareContainerForItem.call(this, element, item);
                    var lbi = element;
                    lbi.ParentSelector = this;
                    if (this.SelectedItems.Contains(item))
                        lbi.IsSelected = true;
                    if (lbi.IsSelected && !this.SelectedItems.Contains(item))
                        this._Selection.Select(item);
                };
                Selector.prototype._GetValueFromItem = function (item) {
                    if (this._SelectedValueWalker == null)
                        return item;
                    if (item == null)
                        return item;
                    return this._SelectedValueWalker.GetValue(item);
                };
                Selector.prototype._SelectItemFromValue = function (selectedValue, ignoreSelectedValue) {
                    if (selectedValue == null) {
                        this._Selection.ClearSelection(ignoreSelectedValue);
                        return;
                    }
                    var items = this.Items;
                    var count = items.Count;
                    for (var i = 0; i < count; i++) {
                        var item = items.GetValueAt(i);
                        var val = this._GetValueFromItem(item);
                        if (Nullstone.Equals(selectedValue, val)) {
                            if (!this.SelectedItems.Contains(item))
                                this._Selection.Select(item, ignoreSelectedValue);
                            return;
                        }
                    }
                    this._Selection.ClearSelection(ignoreSelectedValue);
                };
                Selector.prototype._OnCurrentItemChanged = function (sender, e) {
                    if (!this._Selection.IsUpdating && this.SynchronizeWithCurrentItem) {
                        var icv = this.ItemsSource;
                        if (!Nullstone.Equals(icv.CurrentItem, this.SelectedItem))
                            this._Selection.SelectOnly(icv.CurrentItem);
                    }
                };
                Selector.prototype._RaiseSelectionChanged = function (oldVals, newVals) {
                    if (!oldVals)
                        oldVals = [];
                    if (!newVals)
                        newVals = [];
                    var lbi;
                    var oldCount = oldVals.length;
                    var oldValue;
                    for (var i = 0; i < oldCount; i++) {
                        oldValue = oldVals[i];
                        if (oldValue == null)
                            continue;
                        lbi = null;
                        if (oldValue instanceof Controls.ListBoxItem)
                            lbi = oldValue;
                        lbi = lbi || this.ItemContainerGenerator.ContainerFromItem(oldValue);
                        if (lbi)
                            lbi.IsSelected = false;
                    }
                    var newCount = newVals.length;
                    var newValue;
                    for (var i = 0; i < newCount; i++) {
                        newValue = newVals[i];
                        if (newValue == null)
                            continue;
                        lbi = null;
                        if (newValue instanceof Controls.ListBoxItem)
                            lbi = newValue;
                        lbi = lbi || this.ItemContainerGenerator.ContainerFromItem(newValue);
                        if (lbi) {
                            lbi.IsSelected = true;
                            lbi.Focus();
                        }
                    }
                    var args = new Primitives.SelectionChangedEventArgs(oldVals, newVals);
                    this.OnSelectionChanged(args);
                    this.SelectionChanged.Raise(this, args);
                };
                Selector.prototype.OnSelectionChanged = function (args) {
                };
                Selector.prototype.NotifyListItemClicked = function (lbi) {
                    this._Selection.Select(this.ItemContainerGenerator.ItemFromContainer(lbi));
                };
                Selector.prototype.NotifyListItemLoaded = function (lbi) {
                    if (this.ItemContainerGenerator.ItemFromContainer(lbi) === this.SelectedItem) {
                        lbi.IsSelected = true;
                        lbi.Focus();
                    }
                };
                Selector.prototype.NotifyListItemGotFocus = function (lbi) {
                };
                Selector.prototype.NotifyListItemLostFocus = function (lbi) {
                };
                Selector.IsSynchronizedWithCurrentItemProperty = DependencyProperty.Register("IsSynchronizedWithCurrentItem", function () {
                    return Boolean;
                }, Selector, null, function (d, args) {
                    return (d)._OnIsSynchronizedWithCurrentItemChanged(args);
                });
                Selector.SelectedIndexProperty = DependencyProperty.Register("SelectedIndex", function () {
                    return Number;
                }, Selector, -1, function (d, args) {
                    return (d)._OnSelectedIndexChanged(args);
                });
                Selector.SelectedItemProperty = DependencyProperty.Register("SelectedItem", function () {
                    return Object;
                }, Selector, undefined, function (d, args) {
                    return (d)._OnSelectedItemChanged(args);
                });
                Selector.SelectedValueProperty = DependencyProperty.Register("SelectedValue", function () {
                    return Object;
                }, Selector, undefined, function (d, args) {
                    return (d)._OnSelectedValueChanged(args);
                });
                Selector.SelectedValuePathProperty = DependencyProperty.Register("SelectedValuePath", function () {
                    return String;
                }, Selector, "", function (d, args) {
                    return (d)._OnSelectedValuePathChanged(args);
                });
                Selector.IsSelectionActiveProperty = DependencyProperty.RegisterReadOnlyCore("IsSelectionActive", function () {
                    return Boolean;
                }, Selector);
                return Selector;
            })(Controls.ItemsControl);
            Primitives.Selector = Selector;
            Fayde.RegisterType(Selector, {
                Name: "Selector",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var Thumb = (function (_super) {
                __extends(Thumb, _super);
                function Thumb() {
                    _super.call(this);
                    this._PreviousPosition = null;
                    this._Origin = null;
                    this.DragCompleted = new Fayde.RoutedEvent();
                    this.DragDelta = new Fayde.RoutedEvent();
                    this.DragStarted = new Fayde.RoutedEvent();
                    this.DefaultStyleKey = (this).constructor;
                }
                Thumb.prototype.OnApplyTemplate = function () {
                    _super.prototype.OnApplyTemplate.call(this);
                    this.UpdateVisualState(false);
                };
                Thumb.prototype.OnDraggingChanged = function (args) {
                    this.UpdateVisualState();
                };
                Thumb.prototype.OnGotFocus = function (e) {
                    _super.prototype.OnGotFocus.call(this, e);
                    this._FocusChanged(this.XamlNode._HasFocus());
                };
                Thumb.prototype.OnLostFocus = function (e) {
                    _super.prototype.OnLostFocus.call(this, e);
                    this._FocusChanged(this.XamlNode._HasFocus());
                };
                Thumb.prototype._FocusChanged = function (hasFocus) {
                    this.SetStoreValue(Thumb.IsFocusedProperty, hasFocus);
                    this.UpdateVisualState();
                };
                Thumb.prototype.OnLostMouseCapture = function (e) {
                    if (!this.IsDragging || !this.IsEnabled)
                        return;
                    this.SetStoreValue(Thumb.IsDraggingProperty, false);
                    this._RaiseDragCompleted(false);
                };
                Thumb.prototype.OnMouseEnter = function (e) {
                    if (this.IsEnabled)
                        this.UpdateVisualState();
                };
                Thumb.prototype.OnMouseLeave = function (e) {
                    if (this.IsEnabled)
                        this.UpdateVisualState();
                };
                Thumb.prototype.OnMouseLeftButtonDown = function (e) {
                    _super.prototype.OnMouseLeftButtonDown.call(this, e);
                    if (e.Handled || this.IsDragging || !this.IsEnabled)
                        return;
                    e.Handled = true;
                    this.CaptureMouse();
                    this.SetStoreValue(Thumb.IsDraggingProperty, true);
                    var vpNode = this.XamlNode.VisualParentNode;
                    this._Origin = this._PreviousPosition = e.GetPosition((vpNode) ? vpNode.XObject : undefined);
                    var success = false;
                    try  {
                        this._RaiseDragStarted();
                        success = true;
                    } finally {
                        if (!success)
                            this.CancelDrag();
                    }
                };
                Thumb.prototype.OnMouseMove = function (e) {
                    if (!this.IsDragging)
                        return;
                    var vpNode = this.XamlNode.VisualParentNode;
                    var p = e.GetPosition((vpNode) ? vpNode.XObject : undefined);
                    if (!Point.Equals(p, this._PreviousPosition)) {
                        this._RaiseDragDelta(p.X - this._PreviousPosition.X, p.Y - this._PreviousPosition.Y);
                        this._PreviousPosition = p;
                    }
                };
                Thumb.prototype.CancelDrag = function () {
                    if (!this.IsDragging)
                        return;
                    this.SetStoreValue(Thumb.IsDraggingProperty, false);
                    this._RaiseDragCompleted(true);
                };
                Thumb.prototype._RaiseDragStarted = function () {
                    this.DragStarted.Raise(this, new Primitives.DragStartedEventArgs(this._Origin.X, this._Origin.Y));
                };
                Thumb.prototype._RaiseDragDelta = function (x, y) {
                    this.DragDelta.Raise(this, new Primitives.DragDeltaEventArgs(x, y));
                };
                Thumb.prototype._RaiseDragCompleted = function (canceled) {
                    this.DragCompleted.Raise(this, new Primitives.DragCompletedEventArgs(this._PreviousPosition.X - this._Origin.X, this._PreviousPosition.Y - this._Origin.Y, canceled));
                };
                Thumb.prototype.GetVisualStateCommon = function () {
                    if (!this.IsEnabled) {
                        return "Disabled";
                    } else if (this.IsDragging) {
                        return "Pressed";
                    } else if (this.IsMouseOver) {
                        return "MouseOver";
                    } else {
                        return "Normal";
                    }
                };
                Thumb.IsDraggingProperty = DependencyProperty.RegisterReadOnly("IsDragging", function () {
                    return Boolean;
                }, Thumb, false, function (d, args) {
                    return (d).OnDraggingChanged(args);
                });
                Thumb.IsFocusedProperty = DependencyProperty.RegisterReadOnly("IsFocused", function () {
                    return Boolean;
                }, Thumb);
                return Thumb;
            })(Controls.Control);
            Primitives.Thumb = Thumb;
            Fayde.RegisterType(Thumb, {
                Name: "Thumb",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Data) {
        var lookupNamespaces;
        function lookupType(name) {
            if (!lookupNamespaces) {
                lookupNamespaces = [
                    Fayde,
                    Fayde.Controls,
                    Fayde.Media,
                    Fayde.Controls.Primitives,
                    Fayde.Shapes,
                    window
                ];
            }
            var len = lookupNamespaces.length;
            for (var i = 0; i < len; i++) {
                var potentialType = lookupNamespaces[i][name];
                if (potentialType)
                    return potentialType;
            }
            return eval(name);
        }
        function handlePeriod(data) {
            if (data.tickOpen)
                return true;
            if (data.res != null) {
                var value = null;
                if ((value = data.lu.GetValue(data.res)) == null)
                    return false;
                if (!(value instanceof Fayde.DependencyObject))
                    return false;
                var newLu = value;
                if (data.promotedValues && data.promotedValues[value._ID] == null && !(value instanceof Fayde.UIElement)) {
                    var clonedValue = Fayde.Clone(value);
                    if (clonedValue instanceof Fayde.DependencyObject) {
                        newLu = clonedValue;
                        data.lu.SetStoreValue(data.res, clonedValue);
                        clonedValue = data.lu.GetValue(data.res);
                        data.promotedValues[clonedValue._ID] = clonedValue;
                    }
                }
                data.lu = newLu;
            }
            data.expressionFound = false;
            data.prop = data.path.substr(data.index);
            return true;
        }
        function handleLeftBracket(data) {
            if (data.index >= data.end)
                return;
            var hasLeadingZeroes = false;
            while (data.path.charAt(data.index) === '0') {
                hasLeadingZeroes = true;
                data.index++;
            }
            data.i = parseInt(data.path.substr(data.index), 10);
            if (!isNaN(data.i))
                data.index += data.i.toString().length;
            if (isNaN(data.i) && hasLeadingZeroes)
                data.i = 0;
            if (data.path.charAt(data.index) !== ']' || data.path.charAt(data.index + 1) !== '.')
                return true;
            data.prop = data.path = data.path.substr(data.index + 2);
            data.index = 0;
            data.end = data.path.length;
            var value = null;
            if (data.expressionFound) {
                data.expressionFound = false;
                if ((value = data.lu.GetValue(data.res)) == null)
                    return false;
            }
            if (value instanceof Fayde.XamlObjectCollection) {
                data.collection = value;
            } else {
                data.collection = null;
                return false;
            }
            if ((value = (data.collection).GetValueAt(data.i)) == null)
                return false;
            if (value instanceof Fayde.DependencyObject) {
                data.lu = value;
            } else {
                data.lu = null;
                return false;
            }
            return true;
        }
        function handleDefault(data) {
            var explicitType = false;
            data.expressionFound = true;
            var start = data.index - 1;
            var c;
            while (data.index < data.end) {
                c = data.path.charAt(data.index);
                if (!((c !== '.' || data.tickOpen) && (!data.parenOpen || c !== ')') && c !== '['))
                    break;
                data.index++;
                if (c === '\'') {
                    data.tickOpen = !data.tickOpen;
                    if (!data.tickOpen)
                        break;
                }
            }
            if (data.index === data.end) {
                data.type = (data.lu).constructor;
            } else {
                c = data.path.charAt(data.index);
                if (c === '.') {
                    if ((data.index - start) === 11 && data.path.substr(start, 11).toLowerCase() === "textelement") {
                        data.type = Fayde.Controls.TextBlock;
                        data.explicitType = true;
                    } else {
                        var s = data.index;
                        if (data.path.charAt(data.index - 1) === '\'' && !data.tickOpen) {
                            s = data.index - 1;
                        }
                        var name = data.path.slice(start, s);
                        data.type = lookupType(name);
                        data.explicitType = true;
                        if (!data.type)
                            data.type = (data.lu).constructor;
                    }
                    data.index++;
                    start = data.index;
                    while (data.index < data.end) {
                        c = data.path.charAt(data.index);
                        if (!((!data.parenOpen || c !== ')') && (c !== '.' || data.tickOpen)))
                            break;
                        data.index++;
                        if (c === '\'') {
                            data.tickOpen = !data.tickOpen;
                            if (!data.tickOpen)
                                break;
                        }
                    }
                    if (data.index === start)
                        return false;
                } else {
                    data.type = (data.lu).constructor;
                    data.explicitType = false;
                }
                c = data.path.charAt(data.index);
                if ((c !== ')' && data.parenOpen) || data.type == null)
                    return false;
            }
            name = data.path.slice(start, data.index);
            if ((data.res = DependencyProperty.GetDependencyProperty(data.type, name)) == null && data.lu)
                data.res = DependencyProperty.GetDependencyProperty((data.lu).constructor, name);
            if (data.res == null)
                return false;
            if (!data.res.IsAttached && !(data.lu instanceof data.type)) {
                if ((data.res = DependencyProperty.GetDependencyProperty((data.lu).constructor, name)) == null)
                    return false;
            }
            if (data.res.IsAttached && data.explicitType && !data.parenOpen)
                return false;
            return true;
        }
        var PropertyPath = (function () {
            function PropertyPath(path, expandedPath) {
                this._Propd = null;
                this._Path = path;
                this._ExpandedPath = expandedPath;
            }
            PropertyPath.CreateFromParameter = function (parameter) {
                var p = new PropertyPath();
                if (parameter instanceof DependencyProperty)
                    p._Propd = parameter;
                p._Path = null;
                if (parameter instanceof String)
                    p._Path = parameter;
                return p;
            };
            PropertyPath.prototype.TryResolveDependencyProperty = function (refobj, promotedValues) {
                if (this._Propd)
                    return this._Propd;
                var ov = refobj.Value;
                var propd = PropertyPath.ResolvePropertyPath(refobj, this, promotedValues);
                if (ov === refobj.Value)
                    this._Propd = propd;
                return propd;
            };
            Object.defineProperty(PropertyPath.prototype, "Path", {
                get: function () {
                    return this._Path;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPath.prototype, "ExpandedPath", {
                get: function () {
                    return this._ExpandedPath;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPath.prototype, "ParsePath", {
                get: function () {
                    if (this._Propd)
                        return "(0)";
                    if (this._ExpandedPath)
                        return this._ExpandedPath;
                    return this._Path;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPath.prototype, "HasDependencyProperty", {
                get: function () {
                    return this._Propd != null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PropertyPath.prototype, "DependencyProperty", {
                get: function () {
                    return this._Propd;
                },
                enumerable: true,
                configurable: true
            });
            PropertyPath.ResolvePropertyPath = function (refobj, propertyPath, promotedValues) {
                var path = propertyPath.Path;
                var expanded = propertyPath.ExpandedPath;
                if (expanded != null)
                    path = expanded;
                var data = {
                    index: 0,
                    i: 0,
                    end: path.length,
                    path: path,
                    parenOpen: false,
                    tickOpen: false,
                    prop: path,
                    res: null,
                    cloned: false,
                    expressionFound: false,
                    lu: refobj.Value,
                    collection: null,
                    promotedValues: promotedValues,
                    explicitType: false,
                    type: null
                };
                var success;
                while (data.index < data.end) {
                    success = true;
                    var c = data.path.charAt(data.index);
                    data.index++;
                    if (c === '(') {
                        data.parenOpen = true;
                    } else if (c === ')') {
                        data.parenOpen = false;
                    } else if (c === '\'') {
                        if (!propertyPath.ExpandedPath)
                            Warn("The ' character is not legal in property paths.");
else
                            data.tickOpen = !data.tickOpen;
                    } else if (c === '.') {
                        success = handlePeriod(data);
                    } else if (c === '[') {
                        success = handleLeftBracket(data);
                    } else {
                        success = handleDefault(data);
                    }
                    if (!success) {
                        refobj.Value = null;
                        return null;
                    }
                }
                refobj.Value = data.lu;
                return data.res;
            };
            PropertyPath.prototype.Clone = function () {
                return new PropertyPath(this._Path, this._ExpandedPath);
            };
            return PropertyPath;
        })();
        Data.PropertyPath = PropertyPath;
        Fayde.RegisterType(PropertyPath, {
            Name: "PropertyPath",
            Namespace: "Fayde.Data",
            XmlNamespace: Fayde.XMLNS
        });
        Fayde.RegisterTypeConverter(PropertyPath, function (val) {
            if (!val)
                return new PropertyPath();
            if (val instanceof PropertyPath)
                return val;
            return new PropertyPath(val.toString());
        });
    })(Fayde.Data || (Fayde.Data = {}));
    var Data = Fayde.Data;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        var Ellipse = (function (_super) {
            __extends(Ellipse, _super);
            function Ellipse() {
                _super.call(this);
                this.Stretch = Fayde.Media.Stretch.Fill;
            }
            Ellipse.prototype._BuildPath = function () {
                var stretch = this.Stretch;
                var t = this._Stroke != null ? this.StrokeThickness : 0.0;
                var irect = new rect();
                irect.Width = this.ActualWidth;
                irect.Height = this.ActualHeight;
                switch (stretch) {
                    case Fayde.Media.Stretch.None:
                        irect.Width = irect.Height = 0;
                        break;
                    case Fayde.Media.Stretch.Uniform:
                        irect.Width = irect.Height = Math.min(irect.Width, irect.Height);
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        irect.Width = irect.Height = Math.max(irect.Width, irect.Height);
                        break;
                    case Fayde.Media.Stretch.Fill:
                        break;
                }
                if (t >= irect.Width || t >= irect.Height) {
                    irect.Width = Math.max(irect.Width, t + t * 0.001);
                    irect.Height = Math.max(irect.Height, t + t * 0.001);
                    this._ShapeFlags = Shapes.ShapeFlags.Degenerate;
                } else {
                    this._ShapeFlags = Shapes.ShapeFlags.Normal;
                }
                var ht = -t / 2;
                rect.growBy(irect, ht, ht, ht, ht);
                var path = new Fayde.Shapes.RawPath();
                path.Ellipse(irect.X, irect.Y, irect.Width, irect.Height);
                return path;
            };
            Ellipse.prototype._ComputeStretchBounds = function () {
                return this._ComputeShapeBounds(false);
            };
            Ellipse.prototype._ComputeShapeBounds = function (logical) {
                var irect = new rect();
                irect.Width = this.ActualWidth;
                irect.Height = this.ActualHeight;
                this._ShapeFlags = Shapes.ShapeFlags.Normal;
                var width = this.Width;
                var height = this.Height;
                if (irect.Width < 0.0 || irect.Height < 0.0 || width <= 0.0 || height <= 0.0) {
                    this._ShapeFlags = Shapes.ShapeFlags.Empty;
                    return new rect();
                }
                var node = this.XamlNode;
                var vpNode = node.VisualParentNode;
                if (vpNode instanceof Fayde.Controls.CanvasNode) {
                    if (isNaN(width) !== isNaN(height)) {
                        this._ShapeFlags = Shapes.ShapeFlags.Empty;
                        return new rect();
                    }
                }
                var t = this._Stroke != null ? this.StrokeThickness : 0.0;
                switch (this.Stretch) {
                    case Fayde.Media.Stretch.None:
                        irect.Width = irect.Height = 0.0;
                        break;
                    case Fayde.Media.Stretch.Uniform:
                        irect.Width = irect.Height = Math.min(irect.Width, irect.Height);
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        irect.Width = irect.Height = Math.max(irect.Width, irect.Height);
                        break;
                    case Fayde.Media.Stretch.Fill:
                        break;
                }
                if (t >= irect.Width || t >= irect.Height) {
                    irect.Width = Math.max(irect.Width, t + t * 0.001);
                    irect.Height = Math.max(irect.Height, t + t * 0.001);
                    this._ShapeFlags = Shapes.ShapeFlags.Degenerate;
                } else {
                    this._ShapeFlags = Shapes.ShapeFlags.Normal;
                }
                return irect;
            };
            Ellipse.prototype._ComputeShapeBoundsImpl = function (logical, matrix) {
                var r = new rect();
                if (logical) {
                    r.Width = 1.0;
                    r.Height = 1.0;
                }
                return r;
            };
            return Ellipse;
        })(Shapes.Shape);
        Shapes.Ellipse = Ellipse;
        Fayde.RegisterType(Ellipse, {
            Name: "Ellipse",
            Namespace: "Fayde.Shapes",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        var Line = (function (_super) {
            __extends(Line, _super);
            function Line() {
                _super.apply(this, arguments);
            }
            Line.prototype._BuildPath = function () {
                this._ShapeFlags = Shapes.ShapeFlags.Normal;
                var x1 = this.X1;
                var y1 = this.Y1;
                var x2 = this.X2;
                var y2 = this.Y2;
                var path = new Shapes.RawPath();
                path.Move(x1, y1);
                path.Line(x2, y2);
                return path;
            };
            Line.prototype._ComputeShapeBounds = function (logical) {
                var shapeBounds = new rect();
                var thickness = 0;
                if (!logical)
                    thickness = this.StrokeThickness;
                if (thickness <= 0.0 && !logical)
                    return shapeBounds;
                var x1 = this.X1;
                var y1 = this.Y1;
                var x2 = this.X2;
                var y2 = this.Y2;
                rect.set(shapeBounds, Math.min(x1, x2), Math.min(y1, y2), Math.abs(x2 - x1), Math.abs(y2 - y1));
                return shapeBounds;
            };
            Line.X1Property = DependencyProperty.Register("X1", function () {
                return Number;
            }, Line, 0.0, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            Line.Y1Property = DependencyProperty.Register("Y1", function () {
                return Number;
            }, Line, 0.0, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            Line.X2Property = DependencyProperty.Register("X2", function () {
                return Number;
            }, Line, 0.0, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            Line.Y2Property = DependencyProperty.Register("Y2", function () {
                return Number;
            }, Line, 0.0, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            });
            return Line;
        })(Shapes.Shape);
        Shapes.Line = Line;
        Fayde.RegisterType(Line, {
            Name: "Line",
            Namespace: "Fayde.Shapes",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        var Path = (function (_super) {
            __extends(Path, _super);
            function Path() {
                _super.apply(this, arguments);
            }
            Path._DataCoercer = function (d, propd, value) {
                if (typeof value === "string")
                    return Fayde.Media.ParseGeometry(value);
                return value;
            };

            Path.prototype._GetFillRule = function () {
                var geom = this.Data;
                if (!geom)
                    return _super.prototype._GetFillRule.call(this);
                return (geom).FillRule;
            };
            Path.prototype._DrawPath = function (ctx) {
                var geom = this.Data;
                if (!geom)
                    return;
                geom.Draw(ctx);
            };
            Path.prototype._ComputeShapeBoundsImpl = function (logical, matrix) {
                var geom = this.Data;
                if (!geom) {
                    this._ShapeFlags = Shapes.ShapeFlags.Empty;
                    return new rect();
                }
                if (logical)
                    return geom.GetBounds();
                var thickness = (logical || this._Stroke != null) ? 0.0 : this.StrokeThickness;
                return geom.GetBounds(thickness);
            };
            Path.DataProperty = DependencyProperty.RegisterFull("Data", function () {
                return Fayde.Media.Geometry;
            }, Path, undefined, function (d, args) {
                return (d)._InvalidateNaturalBounds();
            }, Path._DataCoercer);
            return Path;
        })(Shapes.Shape);
        Shapes.Path = Path;
        Fayde.RegisterType(Path, {
            Name: "Path",
            Namespace: "Fayde.Shapes",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        var Polygon = (function (_super) {
            __extends(Polygon, _super);
            function Polygon() {
                _super.apply(this, arguments);
            }
            Polygon._PointsCoercer = function (d, propd, value) {
                if (typeof value === "string")
                    value = Shapes.PointCollection.FromData(value);
                if (value instanceof Array)
                    value = Shapes.PointCollection.FromArray(value);
                return value;
            };

            Polygon.prototype._PointsChanged = function (args) {
                var oldColl = args.OldValue;
                var newColl = args.NewValue;
                if (oldColl instanceof Shapes.PointCollection)
                    (oldColl).Owner = null;
                if (newColl instanceof Shapes.PointCollection)
                    (newColl).Owner = this;
                this._InvalidateNaturalBounds();
            };
            Polygon.prototype._BuildPath = function () {
                var points = this.Points;
                var count;
                if (!points || (count = points.Count) < 2) {
                    this._ShapeFlags = Shapes.ShapeFlags.Empty;
                    return;
                }
                this._ShapeFlags = Shapes.ShapeFlags.Normal;
                var path = new Shapes.RawPath();
                var enumerator = points.GetEnumerator();
                enumerator.MoveNext();
                var p = enumerator.Current;
                if (count === 2) {
                    enumerator.MoveNext();
                    var p2 = enumerator.Current;
                    extendLine(p, p2, this.StrokeThickness);
                    path.Move(p.X, p.Y);
                    path.Line(p2.X, p2.Y);
                } else {
                    path.Move(p.X, p.Y);
                    while (enumerator.MoveNext()) {
                        p = enumerator.Current;
                        path.Line(p.X, p.Y);
                    }
                }
                path.Close();
                return path;
            };
            Polygon.prototype._FillRuleChanged = function (args) {
                this.XamlNode.LayoutUpdater.Invalidate();
            };
            Polygon.FillRuleProperty = DependencyProperty.RegisterCore("FillRule", function () {
                return new Enum(Shapes.FillRule);
            }, Polygon, Shapes.FillRule.EvenOdd, function (d, args) {
                return (d)._FillRuleChanged(args);
            });
            Polygon.PointsProperty = DependencyProperty.RegisterFull("Points", function () {
                return Shapes.PointCollection;
            }, Polygon, undefined, function (d, args) {
                return (d)._PointsChanged(args);
            }, Polygon._PointsCoercer);
            return Polygon;
        })(Shapes.Shape);
        Shapes.Polygon = Polygon;
        Fayde.RegisterType(Polygon, {
            Name: "Polygon",
            Namespace: "Fayde.Shapes",
            XmlNamespace: Fayde.XMLNS
        });
        function extendLine(p1, p2, thickness) {
            var t5 = thickness * 5.0;
            var dx = p1.X - p2.X;
            var dy = p1.Y - p2.Y;
            if (dy === 0.0) {
                t5 -= thickness / 2.0;
                if (dx > 0.0) {
                    p1.X += t5;
                    p2.X -= t5;
                } else {
                    p1.X -= t5;
                    p2.X += t5;
                }
            } else if (dx === 0.0) {
                t5 -= thickness / 2.0;
                if (dy > 0.0) {
                    p1.Y += t5;
                    p2.Y -= t5;
                } else {
                    p1.Y -= t5;
                    p2.Y += t5;
                }
            } else {
                var angle = Math.atan2(dy, dx);
                var ax = Math.abs(Math.sin(angle) * t5);
                if (dx > 0.0) {
                    p1.X += ax;
                    p2.X -= ax;
                } else {
                    p1.X -= ax;
                    p2.X += ax;
                }
                var ay = Math.abs(Math.sin(Math.PI / 2 - angle)) * t5;
                if (dy > 0.0) {
                    p1.Y += ay;
                    p2.Y -= ay;
                } else {
                    p1.Y -= ay;
                    p2.Y += ay;
                }
            }
        }
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        var Polyline = (function (_super) {
            __extends(Polyline, _super);
            function Polyline() {
                _super.apply(this, arguments);
            }
            Polyline._PointsCoercer = function (d, propd, value) {
                if (typeof value === "string")
                    value = Shapes.PointCollection.FromData(value);
                if (value instanceof Array)
                    value = Shapes.PointCollection.FromArray(value);
                return value;
            };

            Polyline.prototype._PointsChanged = function (args) {
                var oldColl = args.OldValue;
                var newColl = args.NewValue;
                if (oldColl instanceof Shapes.PointCollection)
                    (oldColl).Owner = null;
                if (newColl instanceof Shapes.PointCollection)
                    (newColl).Owner = this;
                this._InvalidateNaturalBounds();
            };
            Polyline.prototype._BuildPath = function () {
                var points = this.Points;
                var count;
                if (!points || (count = points.Count) < 2) {
                    this._ShapeFlags = Shapes.ShapeFlags.Empty;
                    return;
                }
                this._ShapeFlags = Shapes.ShapeFlags.Normal;
                var path = new Shapes.RawPath();
                var enumerator = points.GetEnumerator();
                enumerator.MoveNext();
                var p = enumerator.Current;
                path.Move(p.X, p.Y);
                while (enumerator.MoveNext()) {
                    p = enumerator.Current;
                    path.Line(p.X, p.Y);
                }
                path.Close();
                return path;
            };
            Polyline.prototype._FillRuleChanged = function (args) {
                this.XamlNode.LayoutUpdater.Invalidate();
            };
            Polyline.FillRuleProperty = DependencyProperty.RegisterCore("FillRule", function () {
                return new Enum(Shapes.FillRule);
            }, Polyline, Shapes.FillRule.EvenOdd, function (d, args) {
                return (d)._FillRuleChanged(args);
            });
            Polyline.PointsProperty = DependencyProperty.RegisterFull("Points", function () {
                return Shapes.PointCollection;
            }, Polyline, undefined, function (d, args) {
                return (d)._PointsChanged(args);
            }, Polyline._PointsCoercer);
            return Polyline;
        })(Shapes.Shape);
        Shapes.Polyline = Polyline;
        Fayde.RegisterType(Polyline, {
            Name: "Polyline",
            Namespace: "Fayde.Shapes",
            XmlNamespace: Fayde.XMLNS
        });
        function extendLine(p1, p2, thickness) {
            var t5 = thickness * 5.0;
            var dx = p1.X - p2.X;
            var dy = p1.Y - p2.Y;
            if (dy === 0.0) {
                t5 -= thickness / 2.0;
                if (dx > 0.0) {
                    p1.X += t5;
                    p2.X -= t5;
                } else {
                    p1.X -= t5;
                    p2.X += t5;
                }
            } else if (dx === 0.0) {
                t5 -= thickness / 2.0;
                if (dy > 0.0) {
                    p1.Y += t5;
                    p2.Y -= t5;
                } else {
                    p1.Y -= t5;
                    p2.Y += t5;
                }
            } else {
                var angle = Math.atan2(dy, dx);
                var ax = Math.abs(Math.sin(angle) * t5);
                if (dx > 0.0) {
                    p1.X += ax;
                    p2.X -= ax;
                } else {
                    p1.X -= ax;
                    p2.X += ax;
                }
                var ay = Math.abs(Math.sin(Math.PI / 2 - angle)) * t5;
                if (dy > 0.0) {
                    p1.Y += ay;
                    p2.Y -= ay;
                } else {
                    p1.Y -= ay;
                    p2.Y += ay;
                }
            }
        }
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Shapes) {
        var Rectangle = (function (_super) {
            __extends(Rectangle, _super);
            function Rectangle() {
                _super.call(this);
                this.Stretch = Fayde.Media.Stretch.Fill;
            }
            Rectangle.prototype._BuildPath = function () {
                var stretch = this.Stretch;
                var t = this._Stroke != null ? this.StrokeThickness : 0.0;
                var irect = new rect();
                irect.Width = this.ActualWidth;
                irect.Height = this.ActualHeight;
                switch (stretch) {
                    case Fayde.Media.Stretch.None:
                        irect.Width = irect.Height = 0;
                        break;
                    case Fayde.Media.Stretch.Uniform:
                        irect.Width = irect.Height = Math.min(irect.Width, irect.Height);
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        irect.Width = irect.Height = Math.max(irect.Width, irect.Height);
                        break;
                    case Fayde.Media.Stretch.Fill:
                        break;
                }
                if (irect.Width === 0)
                    irect.X = t * 0.5;
                if (irect.Height === 0)
                    irect.Y = t * 0.5;
                var ta;
                if (t >= irect.Width || t >= irect.Height) {
                    ta = t * 0.001;
                    rect.growBy(irect, ta, ta, ta, ta);
                    this._ShapeFlags = Shapes.ShapeFlags.Degenerate;
                } else {
                    ta = -t * 0.5;
                    rect.growBy(irect, ta, ta, ta, ta);
                    this._ShapeFlags = Shapes.ShapeFlags.Normal;
                }
                var radiusX = Math.min(Math.abs(this.RadiusX), irect.Width / 2.0);
                if (isNaN(radiusX))
                    radiusX = 0;
                var radiusY = Math.min(Math.abs(this.RadiusY), irect.Height / 2.0);
                if (isNaN(radiusY))
                    radiusX = 0;
                var path = new Shapes.RawPath();
                path.RoundedRect(irect.X, irect.Y, irect.Width, irect.Height, radiusX, radiusY);
                return path;
            };
            Rectangle.prototype._ComputeShapeBounds = function (logical) {
                var irect = new rect();
                irect.Width = this.ActualWidth;
                irect.Height = this.ActualHeight;
                this._ShapeFlags = Shapes.ShapeFlags.Normal;
                var width = this.Width;
                var height = this.Height;
                if (irect.Width < 0.0 || irect.Height < 0.0 || width <= 0.0 || height <= 0.0) {
                    this._ShapeFlags = Shapes.ShapeFlags.Empty;
                    return new rect();
                }
                var node = this.XamlNode;
                var vpNode = node.VisualParentNode;
                if (vpNode instanceof Fayde.Controls.CanvasNode) {
                    if (isNaN(width) !== isNaN(height)) {
                        this._ShapeFlags = Shapes.ShapeFlags.Empty;
                        return new rect();
                    }
                }
                var t = this._Stroke != null ? this.StrokeThickness : 0.0;
                switch (this.Stretch) {
                    case Fayde.Media.Stretch.None:
                        irect.Width = irect.Height = 0.0;
                        break;
                    case Fayde.Media.Stretch.Uniform:
                        irect.Width = irect.Height = Math.min(irect.Width, irect.Height);
                        break;
                    case Fayde.Media.Stretch.UniformToFill:
                        irect.Width = irect.Height = Math.max(irect.Width, irect.Height);
                        break;
                    case Fayde.Media.Stretch.Fill:
                        break;
                }
                if (irect.Width === 0)
                    irect.X = t * 0.5;
                if (irect.Height === 0)
                    irect.Y = t * 0.5;
                if (t >= irect.Width || t >= irect.Height) {
                    var g = t * 0.5005;
                    rect.growBy(irect, g, g, g, g);
                    this._ShapeFlags = Shapes.ShapeFlags.Degenerate;
                } else {
                    this._ShapeFlags = Shapes.ShapeFlags.Normal;
                }
                return irect;
            };
            Rectangle.prototype._ComputeShapeBoundsImpl = function (logical, matrix) {
                var r = new rect();
                if (logical) {
                    r.Width = 1.0;
                    r.Height = 1.0;
                }
                return r;
            };
            Rectangle.prototype._ComputeStretchBounds = function () {
                return this._ComputeShapeBounds(false);
            };
            Rectangle.prototype._RadiusChanged = function (args) {
                var lu = this.XamlNode.LayoutUpdater;
                lu.InvalidateMeasure();
                this._InvalidatePathCache();
                lu.Invalidate();
            };
            Rectangle.RadiusXProperty = DependencyProperty.Register("RadiusX", function () {
                return Number;
            }, Rectangle, 0.0, function (d, args) {
                return (d)._RadiusChanged(args);
            });
            Rectangle.RadiusYProperty = DependencyProperty.Register("RadiusY", function () {
                return Number;
            }, Rectangle, 0.0, function (d, args) {
                return (d)._RadiusChanged(args);
            });
            return Rectangle;
        })(Shapes.Shape);
        Shapes.Rectangle = Rectangle;
        Fayde.RegisterType(Rectangle, {
            Name: "Rectangle",
            Namespace: "Fayde.Shapes",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Shapes || (Fayde.Shapes = {}));
    var Shapes = Fayde.Shapes;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var CanvasNode = (function (_super) {
            __extends(CanvasNode, _super);
            function CanvasNode(xobj) {
                _super.call(this, xobj);
                this.LayoutUpdater.BreaksLayoutClipRender = true;
            }
            CanvasNode.prototype.AttachVisualChild = function (uie, error) {
                if (!_super.prototype.AttachVisualChild.call(this, uie, error))
                    return false;
                this._UpdateIsLayoutContainerOnAdd(uie);
            };
            CanvasNode.prototype.DetachVisualChild = function (uie, error) {
                if (!_super.prototype.DetachVisualChild.call(this, uie, error))
                    return false;
                this._UpdateIsLayoutContainerOnRemove(uie);
            };
            CanvasNode.prototype._UpdateIsLayoutContainerOnAdd = function (uie) {
                var lu = this.LayoutUpdater;
                if (lu.IsLayoutContainer)
                    return;
                var walker = Fayde.DeepTreeWalker(uie.XamlNode);
                var childNode;
                while (childNode = walker.Step()) {
                    if (!(childNode instanceof CanvasNode) && childNode.LayoutUpdater.IsLayoutContainer) {
                        lu.IsLayoutContainer = true;
                        break;
                    }
                }
            };
            CanvasNode.prototype._UpdateIsLayoutContainerOnRemove = function (uie) {
                var lu = this.LayoutUpdater;
                if (!lu.IsLayoutContainer)
                    return;
                var walker = Fayde.DeepTreeWalker(this);
                var childNode;
                while (childNode = walker.Step()) {
                    if (!(childNode instanceof CanvasNode) && childNode.LayoutUpdater.IsLayoutContainer) {
                        lu.IsLayoutContainer = true;
                        break;
                    }
                }
                lu.IsLayoutContainer = false;
            };
            CanvasNode.prototype.ComputeBounds = function (baseComputer, lu) {
                var surface = this._Surface;
                if (surface && this.IsAttached && this.IsTopLevel) {
                    var surfaceSize = surface.Extents;
                    rect.set(lu.Extents, 0, 0, surfaceSize.Width, surfaceSize.Height);
                    rect.copyTo(lu.Extents, lu.ExtentsWithChildren);
                    rect.copyTo(lu.Extents, lu.Bounds);
                    rect.copyTo(lu.Bounds, lu.BoundsWithChildren);
                    lu.ComputeGlobalBounds();
                    lu.ComputeSurfaceBounds();
                } else {
                    _super.prototype.ComputeBounds.call(this, baseComputer, lu);
                }
            };
            return CanvasNode;
        })(Controls.PanelNode);
        Controls.CanvasNode = CanvasNode;
        Fayde.RegisterType(CanvasNode, {
            Name: "CanvasNode",
            Namespace: "Fayde.Controls"
        });
        function invalidateTopLeft(d, args) {
            if (!(d instanceof Fayde.UIElement))
                return;
            var n;
            var lu;
            var uie = d;
            if (uie instanceof Canvas) {
                n = uie.XamlNode;
                if (n.VisualParentNode == null) {
                    lu = n.LayoutUpdater;
                    lu.UpdateTransform();
                    lu.InvalidateArrange();
                }
            }
            var vpNode = uie.XamlNode.VisualParentNode;
            if (!(vpNode instanceof CanvasNode))
                return;
            n = uie.XamlNode;
            lu = n.LayoutUpdater;
            var childFinal = rect.fromSize(lu.DesiredSize);
            childFinal.X = Canvas.GetLeft(uie);
            childFinal.Y = Canvas.GetTop(uie);
            if (uie.UseLayoutRounding) {
                childFinal.X = Math.round(childFinal.X);
                childFinal.Y = Math.round(childFinal.Y);
                childFinal.Width = Math.round(childFinal.Width);
                childFinal.Height = Math.round(childFinal.Height);
            }
            lu.LayoutSlot = childFinal;
            lu.InvalidateArrange();
        }
        var Canvas = (function (_super) {
            __extends(Canvas, _super);
            function Canvas() {
                _super.apply(this, arguments);
            }
            Canvas.GetTop = function (d) {
                return d.GetValue(Canvas.TopProperty);
            };
            Canvas.SetTop = function (d, value) {
                d.SetValue(Canvas.TopProperty, value);
            };

            Canvas.GetLeft = function (d) {
                return d.GetValue(Canvas.LeftProperty);
            };
            Canvas.SetLeft = function (d, value) {
                d.SetValue(Canvas.LeftProperty, value);
            };
            Canvas.prototype._MeasureOverride = function (availableSize, error) {
                var childSize = size.createInfinite();
                var enumerator = this.XamlNode.GetVisualTreeEnumerator();
                while (enumerator.MoveNext()) {
                    var childNode = enumerator.Current;
                    childNode.LayoutUpdater._Measure(childSize, error);
                }
                return new size();
            };
            Canvas.prototype._ArrangeOverride = function (finalSize, error) {
                var enumerator = this.XamlNode.GetVisualTreeEnumerator();
                while (enumerator.MoveNext()) {
                    var childNode = enumerator.Current;
                    var lu = childNode.LayoutUpdater;
                    var childFinal = rect.fromSize(lu.DesiredSize);
                    childFinal.X = Canvas.GetLeft(childNode.XObject);
                    childFinal.Y = Canvas.GetTop(childNode.XObject);
                    lu._Arrange(childFinal, error);
                }
                return finalSize;
            };
            Canvas.TopProperty = DependencyProperty.RegisterAttached("Top", function () {
                return Number;
            }, Canvas, 0.0, invalidateTopLeft);

            Canvas.LeftProperty = DependencyProperty.RegisterAttached("Left", function () {
                return Number;
            }, Canvas, 0.0, invalidateTopLeft);
            return Canvas;
        })(Controls.Panel);
        Controls.Canvas = Canvas;
        Fayde.RegisterType(Canvas, {
            Name: "Canvas",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ComboBox = (function (_super) {
            __extends(ComboBox, _super);
            function ComboBox() {
                _super.call(this);
                this.DropDownOpened = new MulticastEvent();
                this.DropDownClosed = new MulticastEvent();
                this.$DisplayedItem = null;
                this.$SelectionBoxItem = null;
                this.$SelectionBoxItemTemplate = null;
                this._FocusedIndex = -1;
                this.DefaultStyleKey = (this).constructor;
            }
            ComboBox.prototype._IsDropDownOpenChanged = function (args) {
                var open = args.NewValue;
                if (this.$Popup != null)
                    this.$Popup.IsOpen = open;
                if (this.$DropDownToggle != null)
                    this.$DropDownToggle.IsChecked = open;
                if (open) {
                    this._FocusedIndex = this.Items.Count > 0 ? Math.max(this.SelectedIndex, 0) : -1;
                    if (this._FocusedIndex > -1) {
                        var focusedItem = this.ItemContainerGenerator.ContainerFromIndex(this._FocusedIndex);
                        if (focusedItem instanceof Controls.ComboBoxItem)
                            (focusedItem).Focus();
                    }
                    this.LayoutUpdated.Subscribe(this._UpdatePopupSizeAndPosition, this);
                    this.DropDownOpened.Raise(this, EventArgs.Empty);
                } else {
                    this.Focus();
                    this.LayoutUpdated.Unsubscribe(this._UpdatePopupSizeAndPosition, this);
                    this.DropDownClosed.Raise(this, EventArgs.Empty);
                }
                var selectedItem = this.SelectedItem;
                this._UpdateDisplayedItem(open && selectedItem instanceof Fayde.UIElement ? null : selectedItem);
                this.UpdateVisualState(true);
            };
            ComboBox.prototype._MaxDropDownHeightChanged = function (args) {
                this._UpdatePopupMaxHeight(args.NewValue);
            };
            ComboBox.prototype._GetChildOfType = function (name, type) {
                var temp = this.GetTemplateChild(name);
                if (temp instanceof type)
                    return temp;
            };
            ComboBox.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.UpdateVisualState(false);
                this.$ContentPresenter = this._GetChildOfType("ContentPresenter", Controls.ContentPresenter);
                this.$Popup = this._GetChildOfType("Popup", Controls.Primitives.Popup);
                this.$DropDownToggle = this._GetChildOfType("DropDownToggle", Controls.Primitives.ToggleButton);
                if (this.$ContentPresenter != null)
                    this._NullSelFallback = this.$ContentPresenter.Content;
                if (this.$Popup != null) {
                    this._UpdatePopupMaxHeight(this.MaxDropDownHeight);
                    this.$Popup.XamlNode.CatchClickedOutside();
                    this.$Popup.ClickedOutside.Subscribe(this._PopupClickedOutside, this);
                    var child = this.$Popup.Child;
                    if (child != null) {
                        child.KeyDown.Subscribe(this._OnChildKeyDown, this);
                        (child).SizeChanged.Subscribe(this._UpdatePopupSizeAndPosition, this);
                    }
                }
                if (this.$DropDownToggle != null) {
                    this.$DropDownToggle.Checked.Subscribe(this._OnToggleChecked, this);
                    this.$DropDownToggle.Unchecked.Subscribe(this._OnToggleUnchecked, this);
                }
                this.UpdateVisualState(false);
                this._UpdateDisplayedItem(this.SelectedItem);
            };
            ComboBox.prototype.OnItemContainerStyleChanged = function (args) {
                var newStyle = args.NewValue;
                var items = this.Items;
                var count = items.Count;
                var icg = this.ItemContainerGenerator;
                for (var i = 0; i < count; i++) {
                    var item = items.GetValueAt(i);
                    var container = icg.ContainerFromIndex(i);
                    if (container && item !== container)
                        container.Style = newStyle;
                }
            };
            ComboBox.prototype.IsItemItsOwnContainer = function (item) {
                return item instanceof Controls.ComboBoxItem;
            };
            ComboBox.prototype.GetContainerForItem = function () {
                return new Controls.ComboBoxItem();
            };
            ComboBox.prototype.PrepareContainerForItem = function (container, item) {
                _super.prototype.PrepareContainerForItem.call(this, container, item);
                var cbi = container;
                if (cbi !== item) {
                    var ics = this.ItemContainerStyle;
                    if (!cbi.Style && ics)
                        cbi.Style = ics;
                }
            };
            ComboBox.prototype.GetVisualStateFocus = function () {
                var isEnabled = this.IsEnabled;
                if (this.IsDropDownOpen && isEnabled)
                    return "FocusedDropDown";
else if (this.IsFocused && isEnabled)
                    return "Focused";
else
                    return "Unfocused";
            };
            ComboBox.prototype.OnIsEnabledChanged = function (e) {
                _super.prototype.OnIsEnabledChanged.call(this, e);
                if (!this.IsEnabled)
                    this.IsDropDownOpen = false;
            };
            ComboBox.prototype.OnMouseLeftButtonDown = function (e) {
                _super.prototype.OnMouseLeftButtonDown.call(this, e);
                if (!e.Handled) {
                    e.Handled = true;
                    this.SetValueInternal(ComboBox.IsSelectionActiveProperty, true);
                    this.IsDropDownOpen = !this.IsDropDownOpen;
                }
            };
            ComboBox.prototype.OnMouseEnter = function (e) {
                _super.prototype.OnMouseEnter.call(this, e);
                this.UpdateVisualState(true);
            };
            ComboBox.prototype.OnMouseLeave = function (e) {
                _super.prototype.OnMouseLeave.call(this, e);
                this.UpdateVisualState(true);
            };
            ComboBox.prototype.OnKeyDown = function (e) {
                _super.prototype.OnKeyDown.call(this, e);
                if (e.Handled)
                    return;
                e.Handled = true;
                var key = e.Key;
                if (this.FlowDirection === Fayde.FlowDirection.RightToLeft) {
                    if (key === Fayde.Input.Key.Left)
                        key = Fayde.Input.Key.Right;
else if (key === Fayde.Input.Key.Right)
                        key = Fayde.Input.Key.Left;
                }
                switch (key) {
                    case Fayde.Input.Key.Escape:
                        this.IsDropDownOpen = false;
                        break;
                    case Fayde.Input.Key.Enter:
                    case Fayde.Input.Key.Space:
                        if (this.IsDropDownOpen && this._FocusedIndex !== this.SelectedIndex) {
                            this.SelectedIndex = this._FocusedIndex;
                            this.IsDropDownOpen = false;
                        } else {
                            this.IsDropDownOpen = true;
                        }
                        break;
                    case Fayde.Input.Key.Right:
                    case Fayde.Input.Key.Down:
                        if (this.IsDropDownOpen) {
                            if (this._FocusedIndex < (this.Items.Count - 1)) {
                                this._FocusedIndex++;
                                (this.ItemContainerGenerator.ContainerFromIndex(this._FocusedIndex)).Focus();
                            }
                        } else {
                            this.SelectedIndex = Math.min(this.SelectedIndex + 1, this.Items.Count - 1);
                        }
                        break;
                    case Fayde.Input.Key.Left:
                    case Fayde.Input.Key.Up:
                        if (this.IsDropDownOpen) {
                            if (this._FocusedIndex > 0) {
                                this._FocusedIndex--;
                                (this.ItemContainerGenerator.ContainerFromIndex(this._FocusedIndex)).Focus();
                            }
                        } else {
                            this.SelectedIndex = Math.max(this.SelectedIndex - 1, 0);
                        }
                        break;
                    default:
                        e.Handled = false;
                        break;
                }
            };
            ComboBox.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.UpdateVisualState(true);
            };
            ComboBox.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.SetValueInternal(ComboBox.IsSelectionActiveProperty, this.$Popup == null ? false : this.$Popup.IsOpen);
                this.UpdateVisualState(true);
            };
            ComboBox.prototype._OnChildKeyDown = function (sender, e) {
                this.OnKeyDown(e);
            };
            ComboBox.prototype.OnSelectionChanged = function (e) {
                if (!this.IsDropDownOpen)
                    this._UpdateDisplayedItem(this.SelectedItem);
            };
            ComboBox.prototype._OnToggleChecked = function (sender, e) {
                this.IsDropDownOpen = true;
            };
            ComboBox.prototype._OnToggleUnchecked = function (sender, e) {
                this.IsDropDownOpen = false;
            };
            ComboBox.prototype._PopupClickedOutside = function () {
                this.IsDropDownOpen = false;
            };
            ComboBox.prototype._UpdateDisplayedItem = function (selectedItem) {
                if (!this.$ContentPresenter)
                    return;
                if (this.$DisplayedItem != null) {
                    this.$DisplayedItem.Content = this.$ContentPresenter.Content;
                    this.$DisplayedItem = null;
                }
                this.$ContentPresenter.Content = null;
                if (selectedItem == null) {
                    this.$ContentPresenter.Content = this._NullSelFallback;
                    this.$ContentPresenter.ContentTemplate = null;
                    this.$SelectionBoxItem = null;
                    this.$SelectionBoxItemTemplate = null;
                    return;
                }
                var content = selectedItem;
                if (content instanceof Controls.ComboBoxItem)
                    content = content.Content;
                var icg = this.ItemContainerGenerator;
                var selectedIndex = this.SelectedIndex;
                var temp = icg.ContainerFromIndex(selectedIndex);
                if (temp instanceof Controls.ComboBoxItem)
                    this.$DisplayedItem = temp;
                this.$SelectionBoxItem = content;
                this.$SelectionBoxItemTemplate = this.ItemTemplate;
                if (this.$DisplayedItem != null) {
                    this.$SelectionBoxItemTemplate = this.$DisplayedItem.ContentTemplate;
                    if (content instanceof Fayde.UIElement)
                        this.$DisplayedItem.Content = null;
else
                        this.$DisplayedItem = null;
                } else {
                    temp = icg.ContainerFromIndex(selectedIndex);
                    var container;
                    if (temp instanceof Controls.ComboBoxItem)
                        container = temp;
                    if (!container) {
                        var position = icg.GeneratorPositionFromIndex(selectedIndex);
                        var state = icg.StartAt(position, false, true);
                        try  {
                            temp = icg.GenerateNext({ Value: null });
                            if (temp instanceof Controls.ComboBoxItem)
                                container = temp;
                        } finally {
                            state.Dispose();
                        }
                        icg.PrepareItemContainer(container);
                    }
                    this.$SelectionBoxItemTemplate = container.ContentTemplate;
                }
                this.$ContentPresenter.Content = this.$SelectionBoxItem;
                this.$ContentPresenter.ContentTemplate = this.$SelectionBoxItemTemplate;
            };
            ComboBox.prototype._UpdatePopupSizeAndPosition = function (sender, e) {
                var popup = this.$Popup;
                if (!popup)
                    return;
                var child = popup.Child;
                if (!(child instanceof Fayde.FrameworkElement))
                    return;
                child.MinWidth = this.ActualWidth;
                var root = Fayde.VisualTreeHelper.GetRoot(this);
                if (!root)
                    return;
                try  {
                    var xform = this.TransformToVisual(null);
                } catch (err) {
                    return;
                }
                var offset = new Point(0, this.ActualHeight);
                var bottomRight = new Point(offset.X + child.ActualWidth, offset.Y + child.ActualHeight);
                var topLeft = xform.Transform(offset);
                bottomRight = xform.Transform(bottomRight);
                var isRightToLeft = (this.FlowDirection === Fayde.FlowDirection.RightToLeft);
                if (isRightToLeft) {
                    var left = bottomRight.X;
                    bottomRight.X = topLeft.X;
                    topLeft.X = left;
                }
                var finalOffset = new Point();
                var raw = root.ActualWidth;
                if (bottomRight.X > raw) {
                    finalOffset.X = raw - bottomRight.X;
                } else if (topLeft.X < 0) {
                    finalOffset.X = offset.X - topLeft.X;
                } else {
                    finalOffset.X = offset.X;
                }
                if (isRightToLeft)
                    finalOffset.X = -finalOffset.X;
                var rah = root.ActualHeight;
                if (bottomRight.Y > rah) {
                    finalOffset.Y = -child.ActualHeight;
                } else {
                    finalOffset.Y = this.RenderSize.Height;
                }
                popup.HorizontalOffset = finalOffset.X;
                popup.VerticalOffset = finalOffset.Y;
                this._UpdatePopupMaxHeight(this.MaxDropDownHeight);
            };
            ComboBox.prototype._UpdatePopupMaxHeight = function (height) {
                var child;
                if (this.$Popup && (child = this.$Popup.Child) && child instanceof Fayde.FrameworkElement) {
                    if (height === Number.POSITIVE_INFINITY)
                        height = Fayde.Application.Current.MainSurface.Extents.Height / 2.0;
                    child.MaxHeight = height;
                }
            };
            ComboBox.IsDropDownOpenProperty = DependencyProperty.Register("IsDropDownOpen", function () {
                return Boolean;
            }, ComboBox, false, function (d, args) {
                return (d)._IsDropDownOpenChanged(args);
            });
            ComboBox.ItemContainerStyleProperty = DependencyProperty.RegisterCore("ItemContainerStyle", function () {
                return Fayde.Style;
            }, ComboBox, undefined, function (d, args) {
                return (d).OnItemContainerStyleChanged(args);
            });
            ComboBox.MaxDropDownHeightProperty = DependencyProperty.Register("MaxDropDownHeight", function () {
                return Number;
            }, ComboBox, Number.POSITIVE_INFINITY, function (d, args) {
                return (d)._MaxDropDownHeightChanged(args);
            });
            ComboBox.IsSelectionActiveProperty = Controls.Primitives.Selector.IsSelectionActiveProperty;
            return ComboBox;
        })(Controls.Primitives.Selector);
        Controls.ComboBox = ComboBox;
        Fayde.RegisterType(ComboBox, {
            Name: "ComboBox",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ContentControlNode = (function (_super) {
            __extends(ContentControlNode, _super);
            function ContentControlNode(xobj) {
                _super.call(this, xobj);
            }
            ContentControlNode.prototype.GetDefaultVisualTree = function () {
                var xobj = this.XObject;
                var content = xobj.Content;
                if (content instanceof Fayde.UIElement)
                    return content;
                var presenter = new Controls.ContentPresenter();
                presenter.TemplateOwner = this.XObject;
                presenter.SetValue(Controls.ContentPresenter.ContentProperty, new Fayde.TemplateBindingExpression(ContentControl.ContentProperty, Controls.ContentPresenter.ContentProperty));
                presenter.SetValue(Controls.ContentPresenter.ContentTemplateProperty, new Fayde.TemplateBindingExpression(ContentControl.ContentTemplateProperty, Controls.ContentPresenter.ContentTemplateProperty));
                return presenter;
            };
            return ContentControlNode;
        })(Controls.ControlNode);
        Controls.ContentControlNode = ContentControlNode;
        Fayde.RegisterType(ContentControlNode, {
            Name: "ContentControlNode",
            Namespace: "Fayde.Controls"
        });
        var ContentControl = (function (_super) {
            __extends(ContentControl, _super);
            function ContentControl() {
                _super.apply(this, arguments);
                this._ContentSetsParent = true;
            }
            ContentControl.prototype.CreateNode = function () {
                return new ContentControlNode(this);
            };

            ContentControl.prototype.OnContentChanged = function (oldContent, newContent) {
            };
            ContentControl.prototype.OnContentTemplateChanged = function (oldContentTemplate, newContentTemplate) {
            };
            ContentControl.ContentProperty = DependencyProperty.Register("Content", function () {
                return Object;
            }, ContentControl, undefined, function (d, args) {
                return (d).OnContentChanged(args.OldValue, args.NewValue);
            });
            ContentControl.ContentTemplateProperty = DependencyProperty.Register("ContentTemplate", function () {
                return Fayde.DataTemplate;
            }, ContentControl, undefined, function (d, args) {
                return (d).OnContentTemplateChanged(args.OldValue, args.NewValue);
            });

            ContentControl.Annotations = { ContentProperty: ContentControl.ContentProperty };
            return ContentControl;
        })(Controls.Control);
        Controls.ContentControl = ContentControl;
        Fayde.RegisterType(ContentControl, {
            Name: "ContentControl",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ERROR_PAGE_XAML = "<Page xmlns=\"" + Fayde.XMLNS + "\" xmlns:x=\"" + Fayde.XMLNSX + "\"><TextBlock Text=\"An error occurred navigating.\" /></Page>";
        var ERROR_PAGE = undefined;
        function getErrorPage() {
            if (!ERROR_PAGE)
                ERROR_PAGE = Fayde.Xaml.Load(ERROR_PAGE_XAML);
            return ERROR_PAGE;
        }
        var Frame = (function (_super) {
            __extends(Frame, _super);
            function Frame() {
                _super.call(this);
                this._NavService = new Fayde.Navigation.NavigationService();
                this.Loaded.Subscribe(this._FrameLoaded, this);
            }
            Frame.prototype.Navigate = function (uri) {
                this._LoadContent(uri);
            };
            Frame.prototype.GoForward = function () {
            };
            Frame.prototype.GoBackward = function () {
            };
            Frame.prototype.StopLoading = function () {
                if (this._PageResolver) {
                    this._PageResolver.Stop();
                    this._PageResolver = null;
                }
            };
            Frame.prototype._FrameLoaded = function (sender, e) {
                if (this.IsDeepLinked) {
                    this._NavService.LocationChanged.Subscribe(this._HandleDeepLink, this);
                    this._HandleDeepLink();
                }
            };
            Frame.prototype._HandleDeepLink = function () {
                this._LoadContent(new Uri(this._NavService.Href + "#" + this._NavService.Hash));
            };
            Frame.prototype._LoadContent = function (source) {
                var _this = this;
                this.SetValueInternal(Frame.CurrentSourceProperty, source);
                this.StopLoading();
                var fragment = source.Fragment;
                TimelineProfile.Navigate(true, fragment);
                var targetUri = new Uri(fragment, UriKind.Relative);
                if (this.UriMapper)
                    targetUri = this.UriMapper.MapUri(targetUri);
                var target = targetUri.toString();
                if (!target)
                    throw new InvalidOperationException("Cannot resolve empty url.");
                this._PageResolver = Fayde.Xaml.PageResolver.Resolve(target, function (xaml) {
                    return _this._HandleSuccess(xaml);
                }, function (error) {
                    return _this._HandleError(error);
                });
            };
            Frame.prototype._HandleSuccess = function (xaml) {
                this._PageResolver = null;
                TimelineProfile.Parse(true, "Page");
                var page = Fayde.Xaml.LoadDocument(xaml);
                TimelineProfile.Parse(false, "Page");
                this.Content = page;
                document.title = page.Title;
                TimelineProfile.Navigate(false);
                TimelineProfile.IsNextLayoutPassProfiled = true;
            };
            Frame.prototype._HandleError = function (error) {
                this._PageResolver = null;
                document.title = "Error";
                var page = getErrorPage();
                page.DataContext = error;
                this.Content = page;
                TimelineProfile.Navigate(false);
            };
            Frame.prototype.SourcePropertyChanged = function (args) {
                if (true)
                    this.Navigate(args.NewValue);
            };
            Frame.IsDeepLinkedProperty = DependencyProperty.Register("IsDeepLinked", function () {
                return Boolean;
            }, Frame, true);
            Frame.CurrentSourceProperty = DependencyProperty.RegisterReadOnly("CurrentSource", function () {
                return Uri;
            }, Frame);
            Frame.SourceProperty = DependencyProperty.Register("Source", function () {
                return Uri;
            }, Frame, undefined, function (d, args) {
                return (d).SourcePropertyChanged(args);
            });
            Frame.UriMapperProperty = DependencyProperty.Register("UriMapper", function () {
                return Fayde.Navigation.UriMapper;
            }, Frame);
            return Frame;
        })(Controls.ContentControl);
        Controls.Frame = Frame;
        Fayde.RegisterType(Frame, {
            Name: "Frame",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var GridNode = (function (_super) {
            __extends(GridNode, _super);
            function GridNode(xobj) {
                _super.call(this, xobj);
            }
            GridNode.prototype.ComputeBounds = function (baseComputer, lu) {
                if (this.XObject.ShowGridLines) {
                    rect.set(lu.Extents, 0, 0, lu.ActualWidth, lu.ActualHeight);
                    rect.union(lu.ExtentsWithChildren, lu.Extents);
                    lu.IntersectBoundsWithClipPath(lu.Bounds, lu.AbsoluteXform);
                    rect.union(lu.BoundsWithChildren, lu.Bounds);
                    lu.ComputeGlobalBounds();
                    lu.ComputeSurfaceBounds();
                } else {
                    _super.prototype.ComputeBounds.call(this, baseComputer, lu);
                }
            };
            return GridNode;
        })(Controls.PanelNode);
        Controls.GridNode = GridNode;
        Fayde.RegisterType(GridNode, {
            Name: "GridNode",
            Namespace: "Fayde.Controls"
        });

        function createSegment(offered, min, max, unitType) {
            if (offered == null)
                offered = 0.0;
            if (min == null)
                min = 0.0;
            if (max == null)
                max = Number.POSITIVE_INFINITY;
            if (unitType == null)
                unitType = Controls.GridUnitType.Pixel;
            if (offered < min)
                offered = min;
else if (offered > max)
                offered = max;
            return {
                DesiredSize: 0,
                OfferedSize: offered,
                OriginalSize: offered,
                Min: min,
                Max: max,
                Stars: 0,
                Type: unitType,
                Clamp: function (value) {
                    if (value < this.Min)
                        return this.Min;
                    if (value > this.Max)
                        return this.Max;
                    return value;
                },
                SetOfferedToDesired: function () {
                    return this.OfferedSize = this.DesiredSize;
                },
                SetDesiredToOffered: function () {
                    return this.DesiredSize = this.OfferedSize;
                }
            };
        }

        function createGridChildPlacement(matrix, row, col, size) {
            return {
                Matrix: matrix,
                Row: row,
                Col: col,
                Size: size
            };
        }
        function walkGrid(grid, rowMatrix, colMatrix) {
            var haa = false;
            var hsa = false;
            var has = false;
            var starCol = false;
            var starRow = false;
            var autoCol = false;
            var autoRow = false;
            var col = 0;
            var row = 0;
            var colspan = 1;
            var rowspan = 1;
            var rowCount = rowMatrix.length;
            var colCount = colMatrix.length;
            var childNode = null;
            var child;
            var enumerator = grid.XamlNode.GetVisualTreeEnumerator(Fayde.VisualTreeDirection.Logical);
            while (enumerator.MoveNext()) {
                childNode = enumerator.Current;
                child = childNode.XObject;
                starCol = false;
                starRow = false;
                autoCol = false;
                autoRow = false;
                col = Math.min(Grid.GetColumn(child), colCount - 1);
                row = Math.min(Grid.GetRow(child), rowCount - 1);
                colspan = Math.min(Grid.GetColumnSpan(child), colCount - col);
                rowspan = Math.min(Grid.GetRowSpan(child), rowCount - row);
                for (var r = row; r < row + rowspan; r++) {
                    starRow = starRow || (rowMatrix[r][r].Type === Controls.GridUnitType.Star);
                    autoRow = autoRow || (rowMatrix[r][r].Type === Controls.GridUnitType.Auto);
                }
                for (var c = col; c < col + colspan; c++) {
                    starCol = starCol || (colMatrix[c][c].Type === Controls.GridUnitType.Star);
                    autoCol = autoCol || (colMatrix[c][c].Type === Controls.GridUnitType.Auto);
                }
                haa = haa || (autoRow && autoCol && !starRow && !starCol);
                hsa = hsa || (starRow && autoCol);
                has = has || (autoRow && starCol);
            }
            return {
                HasAutoAuto: haa,
                HasStarAuto: hsa,
                HasAutoStar: has
            };
        }
        var Grid = (function (_super) {
            __extends(Grid, _super);
            function Grid() {
                _super.call(this);
                Grid.ColumnDefinitionsProperty.Initialize(this).Listen(this);
                Grid.RowDefinitionsProperty.Initialize(this).Listen(this);
            }
            Grid.prototype.CreateNode = function () {
                return new GridNode(this);
            };
            Grid._AttachedPropChanged = function (d, args) {
                var dNode = d.XamlNode;
                var gridNode = dNode.VisualParentNode;
                if (gridNode)
                    gridNode.LayoutUpdater.InvalidateMeasure();
                dNode.LayoutUpdater.InvalidateMeasure();
            };

            Grid.GetColumn = function (d) {
                return d.GetValue(Grid.ColumnProperty);
            };
            Grid.SetColumn = function (d, value) {
                d.SetValue(Grid.ColumnProperty, value);
            };

            Grid.GetColumnSpan = function (d) {
                return d.GetValue(Grid.ColumnSpanProperty);
            };
            Grid.SetColumnSpan = function (d, value) {
                d.SetValue(Grid.ColumnSpanProperty, value);
            };

            Grid.GetRow = function (d) {
                return d.GetValue(Grid.RowProperty);
            };
            Grid.SetRow = function (d, value) {
                d.SetValue(Grid.RowProperty, value);
            };

            Grid.GetRowSpan = function (d) {
                return d.GetValue(Grid.RowSpanProperty);
            };
            Grid.SetRowSpan = function (d, value) {
                d.SetValue(Grid.RowSpanProperty, value);
            };

            Grid.prototype._MeasureOverride = function (availableSize, error) {
                var totalSize = size.copyTo(availableSize);
                var cols = this.ColumnDefinitions;
                var rows = this.RowDefinitions;
                var colCount = cols ? cols.Count : 0;
                var rowCount = rows ? rows.Count : 0;
                var totalStars = new size();
                var emptyRows = rowCount === 0;
                var emptyCols = colCount === 0;
                var hasChildren = this.Children.Count > 0;
                if (emptyRows)
                    rowCount = 1;
                if (emptyCols)
                    colCount = 1;
                this._CreateMatrices(rowCount, colCount);
                var rm = this._RowMatrix;
                var cm = this._ColMatrix;
                var defaultGridLength = new Controls.GridLength(1.0, Controls.GridUnitType.Star);
                var i = 0;
                var cell = null;
                if (emptyRows) {
                    cell = createSegment(0.0, 0, Number.POSITIVE_INFINITY, Controls.GridUnitType.Star);
                    cell.Stars = 1.0;
                    rm[0][0] = cell;
                    totalStars.Height += 1.0;
                } else {
                    i = 0;
                    var enumerator = rows.GetEnumerator();
                    var rowdef = null;
                    var height = null;
                    while (enumerator.MoveNext()) {
                        rowdef = enumerator.Current;
                        height = rowdef.Height;
                        if (!height)
                            height = defaultGridLength;
                        rowdef.SetValueInternal(Controls.RowDefinition.ActualHeightProperty, Number.POSITIVE_INFINITY);
                        cell = createSegment(0.0, rowdef.MinHeight, rowdef.MaxHeight, height.Type);
                        if (height.Type === Controls.GridUnitType.Pixel) {
                            cell.OfferedSize = cell.Clamp(height.Value);
                            rowdef.SetValueInternal(Controls.RowDefinition.ActualHeightProperty, cell.SetDesiredToOffered());
                        } else if (height.Type === Controls.GridUnitType.Star) {
                            cell.Stars = height.Value;
                            totalStars.Height += height.Value;
                        } else if (height.Type === Controls.GridUnitType.Auto) {
                            cell.OfferedSize = cell.Clamp(0);
                            cell.SetDesiredToOffered();
                        }
                        rm[i][i] = cell;
                        i++;
                    }
                }
                if (emptyCols) {
                    cell = createSegment(0.0, 0, Number.POSITIVE_INFINITY, Controls.GridUnitType.Star);
                    cell.Stars = 1.0;
                    cm[0][0] = cell;
                    totalStars.Width += 1.0;
                } else {
                    i = 0;
                    var enumerator2 = cols.GetEnumerator();
                    var coldef = null;
                    var width = null;
                    while (enumerator2.MoveNext()) {
                        coldef = enumerator2.Current;
                        var width = coldef.Width;
                        if (!width)
                            width = defaultGridLength;
                        coldef.SetValueInternal(Controls.ColumnDefinition.ActualWidthProperty, Number.POSITIVE_INFINITY);
                        cell = createSegment(0.0, coldef.MinWidth, coldef.MaxWidth, width.Type);
                        if (width.Type === Controls.GridUnitType.Pixel) {
                            cell.OfferedSize = cell.Clamp(width.Value);
                            coldef.SetValueInternal(Controls.ColumnDefinition.ActualWidthProperty, cell.SetDesiredToOffered());
                        } else if (width.Type === Controls.GridUnitType.Star) {
                            cell.Stars = width.Value;
                            totalStars.Width += width.Value;
                        } else if (width.Type === Controls.GridUnitType.Auto) {
                            cell.OfferedSize = cell.Clamp(0);
                            cell.SetDesiredToOffered();
                        }
                        cm[i][i] = cell;
                        i++;
                    }
                }
                var sizes = [];
                var separator = {
                    Matrix: null,
                    Row: 0,
                    Col: 0,
                    Size: 0,
                    Cell: null
                };
                sizes.push(separator);
                var separatorIndex = 0;
                var c = 0;
                var r = 0;
                var childNode = null;
                var child = null;
                var childLu = null;
                var childSize = new size();
                var starCol = false;
                var starRow = false;
                var autoCol = false;
                var autoRow = false;
                var col = 0;
                var row = 0;
                var colspan = 0;
                var rowspan = 0;
                var node = null;
                var gridState = walkGrid(this, rm, cm);
                for (i = 0; i < 6; i++) {
                    var autoAuto = i === 0;
                    var starAuto = i === 1;
                    var autoStar = i === 2;
                    var starAutoAgain = i === 3;
                    var nonStar = i === 4;
                    var remainingStar = i === 5;
                    if (hasChildren) {
                        this._ExpandStarCols(totalSize);
                        this._ExpandStarRows(totalSize);
                    }
                    var e4 = this.XamlNode.GetVisualTreeEnumerator();
                    while (e4.MoveNext()) {
                        childNode = e4.Current;
                        child = childNode.XObject;
                        childLu = childNode.LayoutUpdater;
                        childSize = new size();
                        starCol = false;
                        starRow = false;
                        autoCol = false;
                        autoRow = false;
                        col = Math.min(Grid.GetColumn(child), colCount - 1);
                        row = Math.min(Grid.GetRow(child), rowCount - 1);
                        colspan = Math.min(Grid.GetColumnSpan(child), colCount - col);
                        rowspan = Math.min(Grid.GetRowSpan(child), rowCount - row);
                        for (r = row; r < row + rowspan; r++) {
                            starRow = starRow || (rm[r][r].Type === Controls.GridUnitType.Star);
                            autoRow = autoRow || (rm[r][r].Type === Controls.GridUnitType.Auto);
                        }
                        for (c = col; c < col + colspan; c++) {
                            starCol = starCol || (cm[c][c].Type === Controls.GridUnitType.Star);
                            autoCol = autoCol || (cm[c][c].Type === Controls.GridUnitType.Auto);
                        }
                        if (autoRow && autoCol && !starRow && !starCol) {
                            if (!autoAuto)
                                continue;
                            childSize.Width = Number.POSITIVE_INFINITY;
                            childSize.Height = Number.POSITIVE_INFINITY;
                        } else if (starRow && autoCol && !starCol) {
                            if (!(starAuto || starAutoAgain))
                                continue;
                            if (starAuto && gridState.HasAutoStar)
                                childSize.Height = Number.POSITIVE_INFINITY;
                            childSize.Width = Number.POSITIVE_INFINITY;
                        } else if (autoRow && starCol && !starRow) {
                            if (!autoStar)
                                continue;
                            childSize.Height = Number.POSITIVE_INFINITY;
                        } else if ((autoRow || autoCol) && !(starRow || starCol)) {
                            if (!nonStar)
                                continue;
                            if (autoRow)
                                childSize.Height = Number.POSITIVE_INFINITY;
                            if (autoCol)
                                childSize.Width = Number.POSITIVE_INFINITY;
                        } else if (!(starRow || starCol)) {
                            if (!nonStar)
                                continue;
                        } else {
                            if (!remainingStar)
                                continue;
                        }
                        for (r = row; r < row + rowspan; r++) {
                            childSize.Height += rm[r][r].OfferedSize;
                        }
                        for (c = col; c < col + colspan; c++) {
                            childSize.Width += cm[c][c].OfferedSize;
                        }
                        childLu._Measure(childSize, error);
                        if (!starAuto) {
                            node = createGridChildPlacement(rm, row + rowspan - 1, row, childLu.DesiredSize.Height);
                            if (node.Row === node.Col) {
                                sizes.splice(separatorIndex + 1, 0, node);
                            } else {
                                sizes.splice(separatorIndex, 0, node);
                                separatorIndex++;
                            }
                        }
                        node = createGridChildPlacement(cm, col + colspan - 1, col, childLu.DesiredSize.Width);
                        if (node.Row === node.Col) {
                            sizes.splice(separatorIndex + 1, 0, node);
                        } else {
                            sizes.splice(separatorIndex, 0, node);
                            separatorIndex++;
                        }
                    }
                    sizes.splice(separatorIndex, 1);
                    separatorIndex = -1;
                    while (node = sizes.pop()) {
                        cell = node.Matrix[node.Row][node.Col];
                        cell.DesiredSize = Math.max(cell.DesiredSize, node.Size);
                        this._AllocateDesiredSize(rowCount, colCount);
                    }
                    separatorIndex = sizes.push(separator) - 1;
                }
                this._SaveMeasureResults();
                var gridSize = new size();
                for (c = 0; c < colCount; c++) {
                    gridSize.Width += cm[c][c].DesiredSize;
                }
                for (r = 0; r < rowCount; r++) {
                    gridSize.Height += rm[r][r].DesiredSize;
                }
                return gridSize;
            };
            Grid.prototype._ArrangeOverride = function (finalSize, error) {
                var cols = this.ColumnDefinitions;
                var rows = this.RowDefinitions;
                this._RestoreMeasureResults();
                var c = 0;
                var r = 0;
                var totalConsumed = new size();
                var cm = this._ColMatrix;
                for (c = 0; c < cm.length; c++) {
                    totalConsumed.Width += cm[c][c].SetOfferedToDesired();
                }
                var rm = this._RowMatrix;
                for (r = 0; r < rm.length; r++) {
                    totalConsumed.Height += rm[r][r].SetOfferedToDesired();
                }
                if (totalConsumed.Width !== finalSize.Width)
                    this._ExpandStarCols(finalSize);
                if (totalConsumed.Height !== finalSize.Height)
                    this._ExpandStarRows(finalSize);
                var i = 0;
                var enumerator = cols.GetEnumerator();
                while (enumerator.MoveNext()) {
                    enumerator.Current.SetValueInternal(Controls.ColumnDefinition.ActualWidthProperty, cm[i][i].OfferedSize);
                    i++;
                }
                i = 0;
                var enumerator2 = rows.GetEnumerator();
                while (enumerator2.MoveNext()) {
                    enumerator2.Current.SetValueInternal(Controls.RowDefinition.ActualHeightProperty, rm[i][i].OfferedSize);
                    i++;
                }
                var enumerator3 = this.XamlNode.GetVisualTreeEnumerator();
                var childNode;
                var child;
                while (enumerator3.MoveNext()) {
                    childNode = enumerator3.Current;
                    child = childNode.XObject;
                    var col = Math.min(Grid.GetColumn(child), cm.length - 1);
                    var row = Math.min(Grid.GetRow(child), rm.length - 1);
                    var colspan = Math.min(Grid.GetColumnSpan(child), cm.length - col);
                    var rowspan = Math.min(Grid.GetRowSpan(child), rm.length - row);
                    var childFinal = new rect();
                    for (c = 0; c < col; c++) {
                        childFinal.X += cm[c][c].OfferedSize;
                    }
                    for (c = col; c < col + colspan; c++) {
                        childFinal.Width += cm[c][c].OfferedSize;
                    }
                    for (r = 0; r < row; r++) {
                        childFinal.Y += rm[r][r].OfferedSize;
                    }
                    for (r = row; r < row + rowspan; r++) {
                        childFinal.Height += rm[r][r].OfferedSize;
                    }
                    childNode.LayoutUpdater._Arrange(childFinal, error);
                }
                return finalSize;
            };
            Grid.prototype.Render = function (ctx, lu, region) {
                var background = this.Background;
                var showGridLines = this.ShowGridLines;
                if (!background && !showGridLines)
                    return;
                var framework = lu.CoerceSize(size.fromRaw(lu.ActualWidth, lu.ActualHeight));
                if (framework.Width <= 0 || framework.Height <= 0)
                    return;
                var area = rect.fromSize(framework);
                ctx.Save();
                lu.RenderLayoutClip(ctx);
                if (background)
                    ctx.FillRect(background, area);
                if (showGridLines) {
                    var cctx = ctx.CanvasContext;
                    var cuml = -1;
                    var cols = this.ColumnDefinitions;
                    if (cols) {
                        var enumerator = cols.GetEnumerator();
                        while (enumerator.MoveNext()) {
                            cuml += enumerator.Current.ActualWidth;
                            cctx.beginPath();
                            ctx.SetLineDash([5]);
                            cctx.moveTo(cuml, 0);
                            cctx.lineTo(cuml, framework.Height);
                            cctx.stroke();
                        }
                    }
                    var rows = this.RowDefinitions;
                    if (rows) {
                        cuml = -1;
                        var enumerator2 = rows.GetEnumerator();
                        while (enumerator2.MoveNext()) {
                            cuml += enumerator2.Current.ActualHeight;
                            cctx.beginPath();
                            ctx.SetLineDash([5]);
                            cctx.moveTo(0, cuml);
                            cctx.lineTo(framework.Width, cuml);
                            cctx.stroke();
                        }
                    }
                }
                ctx.Restore();
            };
            Grid.prototype._ExpandStarRows = function (availableSize) {
                availableSize = size.copyTo(availableSize);
                var rows = this.RowDefinitions;
                var rowsCount = rows ? rows.Count : 0;
                var rm = this._RowMatrix;
                var i = 0;
                var cur = null;
                for (i = 0; i < rm.length; i++) {
                    cur = rm[i][i];
                    if (cur.Type === Controls.GridUnitType.Star)
                        cur.OfferedSize = 0;
else
                        availableSize.Height = Math.max(availableSize.Height - cur.OfferedSize, 0);
                }
                availableSize.Height = this._AssignSize(rm, 0, rm.length - 1, availableSize.Height, Controls.GridUnitType.Star, false);
                var row = null;
                i = 0;
                var enumerator = rows.GetEnumerator();
                while (enumerator.MoveNext()) {
                    row = enumerator.Current;
                    cur = rm[i][i];
                    if (cur.Type === Controls.GridUnitType.Star)
                        row.SetValueInternal(Controls.RowDefinition.ActualHeightProperty, cur.OfferedSize);
                    i++;
                }
            };
            Grid.prototype._ExpandStarCols = function (availableSize) {
                availableSize = size.copyTo(availableSize);
                var cols = this.ColumnDefinitions;
                var columnsCount = cols ? cols.Count : 0;
                var i = 0;
                var cur = null;
                var cm = this._ColMatrix;
                for (i = 0; i < cm.length; i++) {
                    cur = cm[i][i];
                    if (cur.Type === Controls.GridUnitType.Star)
                        cur.OfferedSize = 0;
else
                        availableSize.Width = Math.max(availableSize.Width - cur.OfferedSize, 0);
                }
                availableSize.Width = this._AssignSize(cm, 0, cm.length - 1, availableSize.Width, Controls.GridUnitType.Star, false);
                var col = null;
                i = 0;
                var enumerator = cols.GetEnumerator();
                while (enumerator.MoveNext()) {
                    col = enumerator.Current;
                    cur = cm[i][i];
                    if (cur.Type === Controls.GridUnitType.Star)
                        col.SetValueInternal(Controls.ColumnDefinition.ActualWidthProperty, cur.OfferedSize);
                    i++;
                }
            };
            Grid.prototype._AllocateDesiredSize = function (rowCount, colCount) {
                var matrix;
                for (var i = 0; i < 2; i++) {
                    matrix = i === 0 ? this._RowMatrix : this._ColMatrix;
                    var count = i === 0 ? rowCount : colCount;
                    for (var row = count - 1; row >= 0; row--) {
                        for (var col = row; col >= 0; col--) {
                            var spansStar = false;
                            for (var j = row; j >= col; j--) {
                                spansStar = spansStar || (matrix[j][j].Type === Controls.GridUnitType.Star);
                            }
                            var current = matrix[row][col].DesiredSize;
                            var totalAllocated = 0;
                            for (var a = row; a >= col; a--) {
                                totalAllocated += matrix[a][a].DesiredSize;
                            }
                            if (totalAllocated < current) {
                                var additional = current - totalAllocated;
                                if (spansStar) {
                                    additional = this._AssignSize(matrix, col, row, additional, Controls.GridUnitType.Star, true);
                                } else {
                                    additional = this._AssignSize(matrix, col, row, additional, Controls.GridUnitType.Pixel, true);
                                    additional = this._AssignSize(matrix, col, row, additional, Controls.GridUnitType.Auto, true);
                                }
                            }
                        }
                    }
                }
                matrix = this._RowMatrix;
                for (var r = 0; r < matrix.length; r++) {
                    matrix[r][r].OfferedSize = matrix[r][r].DesiredSize;
                }
                matrix = this._ColMatrix;
                for (var c = 0; c < matrix.length; c++) {
                    matrix[c][c].OfferedSize = matrix[c][c].DesiredSize;
                }
            };
            Grid.prototype._AssignSize = function (matrix, start, end, size, unitType, desiredSize) {
                var count = 0;
                var assigned = false;
                var segmentSize = 0;
                var i = 0;
                var cur = null;
                for (i = start; i <= end; i++) {
                    cur = matrix[i][i];
                    segmentSize = desiredSize ? cur.DesiredSize : cur.OfferedSize;
                    if (segmentSize < cur.Max)
                        count += (unitType === Controls.GridUnitType.Star) ? cur.Stars : 1;
                }
                do {
                    assigned = false;
                    var contribution = size / count;
                    for (i = start; i <= end; i++) {
                        cur = matrix[i][i];
                        segmentSize = desiredSize ? cur.DesiredSize : cur.OfferedSize;
                        if (!(cur.Type === unitType && segmentSize < cur.Max))
                            continue;
                        var newSize = segmentSize;
                        newSize += contribution * (unitType === Controls.GridUnitType.Star ? cur.Stars : 1);
                        newSize = Math.min(newSize, cur.Max);
                        assigned = assigned || (newSize > segmentSize);
                        size -= newSize - segmentSize;
                        if (desiredSize)
                            cur.DesiredSize = newSize;
else
                            cur.OfferedSize = newSize;
                    }
                } while(assigned);
                return size;
            };

            Grid.prototype._CreateMatrices = function (rowCount, colCount) {
                var rm = this._RowMatrix = [];
                for (var r = 0; r < rowCount; r++) {
                    rm.push([]);
                    for (var rr = 0; rr <= r; rr++) {
                        rm[r].push(createSegment());
                    }
                }
                var cm = this._ColMatrix = [];
                for (var c = 0; c < colCount; c++) {
                    cm.push([]);
                    for (var cc = 0; cc <= c; cc++) {
                        cm[c].push(createSegment());
                    }
                }
            };
            Grid.prototype._SaveMeasureResults = function () {
                var i;
                var j;
                var rm = this._RowMatrix;
                for (i = 0; i < rm.length; i++) {
                    for (j = 0; j <= i; j++) {
                        rm[i][j].OriginalSize = rm[i][j].OfferedSize;
                    }
                }
                var cm = this._ColMatrix;
                for (i = 0; i < cm.length; i++) {
                    for (j = 0; j <= i; j++) {
                        cm[i][j].OriginalSize = cm[i][j].OfferedSize;
                    }
                }
            };
            Grid.prototype._RestoreMeasureResults = function () {
                var i;
                var j;
                var rm = this._RowMatrix;
                for (i = 0; i < rm.length; i++) {
                    for (j = 0; j <= i; j++) {
                        rm[i][j].OfferedSize = rm[i][j].OriginalSize;
                    }
                }
                var cm = this._ColMatrix;
                for (i = 0; i < cm.length; i++) {
                    for (j = 0; j <= i; j++) {
                        cm[i][j].OfferedSize = cm[i][j].OriginalSize;
                    }
                }
            };
            Grid.prototype._ShowGridLinesChanged = function (args) {
                var lu = this.XamlNode.LayoutUpdater;
                lu.Invalidate();
                lu.InvalidateMeasure();
            };
            Grid.prototype.RowDefinitionsChanged = function (rowDefinitions) {
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
            };
            Grid.prototype.ColumnDefinitionsChanged = function (colDefinitions) {
                this.XamlNode.LayoutUpdater.InvalidateMeasure();
            };
            Grid.ColumnProperty = DependencyProperty.RegisterAttached("Column", function () {
                return Number;
            }, Grid, 0, Grid._AttachedPropChanged);

            Grid.ColumnSpanProperty = DependencyProperty.RegisterAttached("ColumnSpan", function () {
                return Number;
            }, Grid, 1, Grid._AttachedPropChanged);

            Grid.RowProperty = DependencyProperty.RegisterAttached("Row", function () {
                return Number;
            }, Grid, 0, Grid._AttachedPropChanged);

            Grid.RowSpanProperty = DependencyProperty.RegisterAttached("RowSpan", function () {
                return Number;
            }, Grid, 1, Grid._AttachedPropChanged);

            Grid.ColumnDefinitionsProperty = DependencyProperty.RegisterImmutable("ColumnDefinitions", function () {
                return Controls.ColumnDefinitionCollection;
            }, Grid);
            Grid.RowDefinitionsProperty = DependencyProperty.RegisterImmutable("RowDefinitions", function () {
                return Controls.RowDefinitionCollection;
            }, Grid);
            Grid.ShowGridLinesProperty = DependencyProperty.Register("ShowGridLines", function () {
                return Boolean;
            }, Grid, false, function (d, args) {
                return (d)._ShowGridLinesChanged(args);
            });
            return Grid;
        })(Controls.Panel);
        Controls.Grid = Grid;
        Fayde.RegisterType(Grid, {
            Name: "Grid",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ListBox = (function (_super) {
            __extends(ListBox, _super);
            function ListBox() {
                _super.apply(this, arguments);
                this._FocusedIndex = 0;
            }
            ListBox.prototype.SelectAll = function () {
                this._Selection.SelectAll(this.Items.ToArray());
            };
            ListBox.prototype.ScrollIntoView = function (item) {
                var tsv = this.$TemplateScrollViewer;
                if (!tsv)
                    return;
                var items = this.Items;
                if (!items.Contains(item))
                    return;
                var ihro = { Value: null };
                var lbiro = { Value: null };
                var virtualizing = Controls.VirtualizingStackPanel.GetIsVirtualizing(this);
                if (this._IsOnCurrentPage(item, ihro, lbiro))
                    return;
                var ihr = ihro.Value;
                var lbir = lbiro.Value;
                if (this._GetIsVerticalOrientation()) {
                    if (virtualizing) {
                        tsv.ScrollToVerticalOffset(this.SelectedIndex);
                        return;
                    }
                    var verticalOffset = tsv.VerticalOffset;
                    var verticalDelta = 0;
                    if (ihr.GetBottom() < lbir.GetBottom()) {
                        verticalDelta = lbir.GetBottom() - ihr.GetBottom();
                        verticalOffset += verticalDelta;
                    }
                    if ((lbir.Y - verticalDelta) < ihr.Y) {
                        verticalOffset -= ihr.Y - (lbir.Y - verticalDelta);
                    }
                    tsv.ScrollToVerticalOffset(verticalOffset);
                } else {
                    if (virtualizing) {
                        tsv.ScrollToHorizontalOffset(this.SelectedIndex);
                        return;
                    }
                    var horizontalOffset = tsv.HorizontalOffset;
                    var horizontalDelta = 0;
                    if (ihr.GetRight() < lbir.GetRight()) {
                        horizontalDelta = lbir.GetRight() - ihr.GetRight();
                        horizontalOffset += horizontalDelta;
                    }
                    if ((ihr.X - horizontalDelta) < ihr.X) {
                        horizontalOffset -= ihr.X - (lbir.X - horizontalDelta);
                    }
                    tsv.ScrollToHorizontalOffset(horizontalOffset);
                }
            };
            ListBox.prototype._NavigateByPage = function (forward) {
                var tsv = this.$TemplateScrollViewer;
                var newFocusedIndex = -1;
                var item = (this._FocusedIndex !== -1) ? this.Items.GetValueAt(this._FocusedIndex) : null;
                if (item != null && !this._IsOnCurrentPage(item)) {
                    this.ScrollIntoView(item);
                    if (tsv != null)
                        tsv.UpdateLayout();
                }
                if (item == null) {
                    newFocusedIndex = this._GetFirstItemOnCurrentPage(this._FocusedIndex, forward);
                } else {
                    var firstItemOnCurrentPage = this._GetFirstItemOnCurrentPage(this._FocusedIndex, forward);
                    if (firstItemOnCurrentPage !== this._FocusedIndex) {
                        newFocusedIndex = firstItemOnCurrentPage;
                    } else {
                        if (tsv != null) {
                            if (this._GetIsVerticalOrientation()) {
                                tsv.ScrollToVerticalOffset(Math.max(0, Math.min(tsv.ScrollableHeight, tsv.VerticalOffset + (tsv.ViewportHeight * (forward ? 1 : -1)))));
                            } else {
                                tsv.ScrollToHorizontalOffset(Math.max(0, Math.min(tsv.ScrollableWidth, tsv.HorizontalOffset + (tsv.ViewportWidth * (forward ? 1 : -1)))));
                            }
                            tsv.UpdateLayout();
                        }
                        newFocusedIndex = this._GetFirstItemOnCurrentPage(this._FocusedIndex, forward);
                    }
                }
                return newFocusedIndex;
            };
            ListBox.prototype._ScrollInDirection = function (key) {
                if (this.$TemplateScrollViewer)
                    this.$TemplateScrollViewer.ScrollInDirection(key);
            };
            ListBox.prototype._IsOnCurrentPage = function (item, itemsHostRectOut, listBoxItemsRectOut) {
                if (!itemsHostRectOut)
                    itemsHostRectOut = { Value: null };
                if (!listBoxItemsRectOut)
                    listBoxItemsRectOut = { Value: null };
                var itemsHost = Fayde.VisualTreeHelper.GetChild(Fayde.VisualTreeHelper.GetChild(this, 0), 0);
                var tsv = this.$TemplateScrollViewer;
                if (tsv != null) {
                    itemsHost = tsv;
                    if (tsv.$ScrollContentPresenter != null)
                        itemsHost = tsv.$ScrollContentPresenter;
                }
                if (!(itemsHost instanceof Fayde.FrameworkElement))
                    itemsHost = null;
                var ihro = itemsHostRectOut.Value = new rect();
                var lbiro = listBoxItemsRectOut.Value = new rect();
                if (!itemsHost)
                    return false;
                ihro.Width = itemsHost.RenderSize.Width;
                ihro.Height = itemsHost.RenderSize.Height;
                var lbi = this.ItemContainerGenerator.ContainerFromItem(item);
                if (!lbi)
                    return false;
                lbiro.Width = lbi.RenderSize.Width;
                lbiro.Height = lbi.RenderSize.Height;
                if (itemsHost instanceof Controls.Control) {
                    var padding = (itemsHost).Padding;
                    if (padding) {
                        ihro.X = ihro.X + padding.Left;
                        ihro.Y = ihro.Y + padding.Top;
                        ihro.Width = ihro.Width - padding.Left - padding.Right;
                        ihro.Height = ihro.Height - padding.Top - padding.Bottom;
                    }
                }
                var genXform = lbi.TransformToVisual(itemsHost);
                if (genXform != null) {
                    var ptl = genXform.Transform(new Point());
                    var pbr = genXform.Transform(new Point(lbi.RenderSize.Width, lbi.RenderSize.Height));
                    lbiro.X = Math.min(ptl.X, pbr.X);
                    lbiro.Y = Math.min(ptl.Y, pbr.Y);
                    lbiro.Width = Math.abs(ptl.X - pbr.X);
                    lbiro.Height = Math.abs(ptl.Y - pbr.Y);
                }
                return this._GetIsVerticalOrientation() ? ihro.X <= lbiro.Y && rect.getBottom(ihro) >= rect.getBottom(lbiro) : ihro.X <= lbiro.X && rect.getRight(ihro) >= rect.getRight(lbiro);
            };
            ListBox.prototype._GetFirstItemOnCurrentPage = function (startingIndex, forward) {
                var delta = forward ? 1 : -1;
                var fiocp = -1;
                var probeIndex = startingIndex;
                var items = this.Items;
                var itemsCount = items.Count;
                while (probeIndex >= 0 && probeIndex < itemsCount && !this._IsOnCurrentPage(items.GetValueAt(probeIndex))) {
                    fiocp = probeIndex;
                    probeIndex += delta;
                }
                while (probeIndex >= 0 && probeIndex < itemsCount && this._IsOnCurrentPage(items.GetValueAt(probeIndex))) {
                    fiocp = probeIndex;
                    probeIndex += delta;
                }
                return fiocp;
            };
            ListBox.prototype.OnItemContainerStyleChanged = function (args) {
                var oldStyle = args.OldValue;
                var newStyle = args.NewValue;
                var count = this.Items.Count;
                for (var i = 0; i < count; i++) {
                    var lbi = this.ItemContainerGenerator.ContainerFromIndex(i);
                    if (lbi != null && lbi.Style === oldStyle)
                        lbi.Style = newStyle;
                }
            };
            ListBox.prototype.OnKeyDown = function (args) {
                if (args.Handled)
                    return;
                var handled = false;
                var newFocusedIndex = -1;
                switch (args.Key) {
                    case Fayde.Input.Key.Space:
                    case Fayde.Input.Key.Enter:
                        if (Fayde.Input.Key.Enter !== args.Key || Fayde.Input.KeyboardNavigation.GetAcceptsReturn(this)) {
                            if (!Fayde.Input.Keyboard.HasAlt()) {
                                var focusedEl = this.XamlNode.GetFocusedElement();
                                var lbi;
                                if (focusedEl instanceof Controls.ListBoxItem)
                                    lbi = focusedEl;
                                if (lbi) {
                                    if (Fayde.Input.Keyboard.HasControl() && lbi.IsSelected) {
                                        this.SelectedItem = null;
                                    } else {
                                        this.SelectedItem = this.ItemContainerGenerator.ItemFromContainer(lbi);
                                    }
                                    handled = true;
                                }
                            }
                        }
                        break;
                    case Fayde.Input.Key.Home:
                        newFocusedIndex = 0;
                        break;
                    case Fayde.Input.Key.End:
                        newFocusedIndex = this.Items.Count - 1;
                        break;
                    case Fayde.Input.Key.PageUp:
                        newFocusedIndex = this._NavigateByPage(false);
                        break;
                    case Fayde.Input.Key.PageDown:
                        newFocusedIndex = this._NavigateByPage(true);
                        break;
                    case Fayde.Input.Key.Left:
                        if (this._GetIsVerticalOrientation()) {
                            this._ScrollInDirection(Fayde.Input.Key.Left);
                        } else {
                            newFocusedIndex = this._FocusedIndex - 1;
                        }
                        break;
                    case Fayde.Input.Key.Up:
                        if (this._GetIsVerticalOrientation()) {
                            newFocusedIndex = this._FocusedIndex - 1;
                        } else {
                            this._ScrollInDirection(Fayde.Input.Key.Up);
                        }
                        break;
                    case Fayde.Input.Key.Right:
                        if (this._GetIsVerticalOrientation()) {
                            this._ScrollInDirection(Fayde.Input.Key.Right);
                        } else {
                            newFocusedIndex = this._FocusedIndex + 1;
                        }
                        break;
                    case Fayde.Input.Key.Down:
                        if (this._GetIsVerticalOrientation()) {
                            newFocusedIndex = this._FocusedIndex + 1;
                        } else {
                            this._ScrollInDirection(Fayde.Input.Key.Down);
                        }
                        break;
                }
                if (newFocusedIndex !== -1 && this._FocusedIndex !== -1 && newFocusedIndex !== this._FocusedIndex && newFocusedIndex >= 0 && newFocusedIndex < this.Items.Count) {
                    var icg = this.ItemContainerGenerator;
                    var lbi = icg.ContainerFromIndex(newFocusedIndex);
                    var item = icg.ItemFromContainer(lbi);
                    this.ScrollIntoView(item);
                    if (Fayde.Input.Keyboard.HasControl()) {
                        lbi.Focus();
                    } else {
                        this.SelectedItem = item;
                    }
                    handled = true;
                }
                if (handled)
                    args.Handled = true;
            };
            ListBox.prototype._GetIsVerticalOrientation = function () {
                var p = this.Panel;
                if (p instanceof Controls.StackPanel)
                    return (p).Orientation === Fayde.Orientation.Vertical;
                if (p instanceof Controls.VirtualizingStackPanel)
                    return (p).Orientation === Fayde.Orientation.Vertical;
                return true;
            };
            ListBox.prototype.IsItemItsOwnContainer = function (item) {
                return item instanceof Controls.ListBoxItem;
            };
            ListBox.prototype.GetContainerForItem = function () {
                var item = new Controls.ListBoxItem();
                var ics = this.ItemContainerStyle;
                if (ics != null)
                    item.Style = ics;
                return item;
            };
            ListBox.prototype.PrepareContainerForItem = function (element, item) {
                _super.prototype.PrepareContainerForItem.call(this, element, item);
                var ics = this.ItemContainerStyle;
                var lbi = element;
                if (!lbi.Style && ics)
                    lbi.Style = ics;
            };
            ListBox.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.SetValueInternal(ListBox.IsSelectionActiveProperty, true);
            };
            ListBox.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.SetValueInternal(ListBox.IsSelectionActiveProperty, false);
            };
            ListBox.prototype.NotifyListItemGotFocus = function (lbi) {
                this._FocusedIndex = this.ItemContainerGenerator.IndexFromContainer(lbi);
            };
            ListBox.prototype.NotifyListItemLostFocus = function (lbi) {
                this._FocusedIndex = -1;
            };
            ListBox.ItemContainerStyleProperty = DependencyProperty.RegisterCore("ItemContainerStyle", function () {
                return Fayde.Style;
            }, ListBox, undefined, function (d, args) {
                return (d).OnItemContainerStyleChanged(args);
            });
            ListBox.SelectionModeProperty = DependencyProperty.Register("SelectionMode", function () {
                return new Enum(Controls.SelectionMode);
            }, ListBox, undefined, function (d, args) {
                return (d)._Selection.Mode = args.NewValue;
            });
            ListBox.IsSelectionActiveProperty = Controls.Primitives.Selector.IsSelectionActiveProperty;
            return ListBox;
        })(Controls.Primitives.Selector);
        Controls.ListBox = ListBox;
        Fayde.RegisterType(ListBox, {
            Name: "ListBox",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ListBoxItem = (function (_super) {
            __extends(ListBoxItem, _super);
            function ListBoxItem() {
                _super.call(this);
                this.ParentSelectorChanged = new MulticastEvent();
                this.DefaultStyleKey = (this).constructor;
            }
            Object.defineProperty(ListBoxItem.prototype, "ParentSelector", {
                get: function () {
                    return this._ParentSelector;
                },
                set: function (value) {
                    if (this._ParentSelector === value)
                        return;
                    this._ParentSelector = value;
                    this.ParentSelectorChanged.Raise(this, EventArgs.Empty);
                },
                enumerable: true,
                configurable: true
            });

            ListBoxItem.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.UpdateVisualState(false);
            };
            ListBoxItem.prototype.OnMouseLeftButtonDown = function (e) {
                if (e.Handled)
                    return;
                e.Handled = true;
                if (!this.XamlNode.Focus(true))
                    return;
                if (this._ParentSelector != null)
                    this._ParentSelector.NotifyListItemClicked(this);
            };
            ListBoxItem.prototype.OnMouseEnter = function (e) {
                _super.prototype.OnMouseEnter.call(this, e);
                this.UpdateVisualState();
            };
            ListBoxItem.prototype.OnMouseLeave = function (e) {
                _super.prototype.OnMouseLeave.call(this, e);
                this.UpdateVisualState();
            };
            ListBoxItem.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.UpdateVisualState();
                if (this._ParentSelector != null) {
                    this._ParentSelector.NotifyListItemGotFocus(this);
                }
            };
            ListBoxItem.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.UpdateVisualState();
                if (this._ParentSelector != null) {
                    this._ParentSelector.NotifyListItemLostFocus(this);
                }
            };
            ListBoxItem.prototype.GetVisualStateNamesToActivate = function () {
                var arr = _super.prototype.GetVisualStateNamesToActivate.call(this);
                arr.push(this.GetVisualStateSelection());
                return arr;
            };
            ListBoxItem.prototype.GetVisualStateCommon = function () {
                if (!this.IsEnabled) {
                    return this.Content instanceof Controls.Control ? "Normal" : "Disabled";
                } else if (this.IsMouseOver) {
                    return "MouseOver";
                } else {
                    return "Normal";
                }
            };
            ListBoxItem.prototype.GetVisualStateSelection = function () {
                if (this.IsSelected) {
                    return this.IsFocused ? "Selected" : "SelectedUnfocused";
                } else {
                    return "Unselected";
                }
            };
            ListBoxItem.prototype.OnIsSelectedChanged = function (args) {
                this.UpdateVisualState();
            };
            ListBoxItem.IsSelectedProperty = DependencyProperty.RegisterCore("IsSelected", function () {
                return Boolean;
            }, ListBoxItem, null, function (d, args) {
                return (d).OnIsSelectedChanged(args);
            });
            return ListBoxItem;
        })(Controls.ContentControl);
        Controls.ListBoxItem = ListBoxItem;
        Fayde.RegisterType(ListBoxItem, {
            Name: "ListBoxItem",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var Page = (function (_super) {
            __extends(Page, _super);
            function Page() {
                _super.call(this);
            }
            Page.TitleProperty = DependencyProperty.Register("Title", function () {
                return String;
            }, Page);
            return Page;
        })(Controls.UserControl);
        Controls.Page = Page;
        Fayde.RegisterType(Page, {
            Name: "Page",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var PasswordBox = (function (_super) {
            __extends(PasswordBox, _super);
            function PasswordBox() {
                _super.call(this, Controls.TextBoxEmitChangedType.TEXT, PasswordBox.PasswordProperty);
                this.PasswordChangedEvent = new Fayde.RoutedEvent();
                this.DefaultStyleKey = (this).constructor;
            }
            Object.defineProperty(PasswordBox.prototype, "DisplayText", {
                get: function () {
                    var result = "";
                    var count = this._Buffer.length;
                    var pattern = this.PasswordChar;
                    while (count > 0) {
                        if (count & 1)
                            result += pattern;
                        count >>= 1, pattern += pattern;
                    }
                    return result;
                },
                enumerable: true,
                configurable: true
            });
            PasswordBox.prototype.CursorDown = function (cursor, isPage) {
                return this._Buffer.length;
            };
            PasswordBox.prototype.CursorUp = function (cursor, isPage) {
                return 0;
            };
            PasswordBox.prototype.CursorNextWord = function (cursor) {
                return this._Buffer.length;
            };
            PasswordBox.prototype.CursorPrevWord = function (cursor) {
                return 0;
            };
            PasswordBox.prototype.CursorLineBegin = function (cursor) {
                return 0;
            };
            PasswordBox.prototype.CursorLineEnd = function (cursor) {
                return this._Buffer.length;
            };
            PasswordBox.prototype._EmitTextChanged = function () {
                this.PasswordChangedEvent.RaiseAsync(this, new Fayde.RoutedEventArgs());
            };

            PasswordBox.prototype._SelectionBackgroundChanged = function (args) {
                var _this = this;
                var newBrush = args.NewValue;
                if (this._SelectionBackgroundListener)
                    this._SelectionBackgroundListener.Detach();
                this._SelectionBackgroundListener = null;
                if (newBrush) {
                    this._SelectionBackgroundListener = newBrush.Listen(function (brush) {
                        _this._ModelChanged(Controls.TextBoxModelChangedType.Brush, newBrush);
                        _this.XamlNode.LayoutUpdater.Invalidate();
                    });
                }
                this._ModelChanged(Controls.TextBoxModelChangedType.Brush, newBrush);
                this.XamlNode.LayoutUpdater.Invalidate();
            };

            PasswordBox.prototype._SelectionForegroundChanged = function (args) {
                var _this = this;
                var newBrush = args.NewValue;
                if (this._SelectionForegroundListener)
                    this._SelectionForegroundListener.Detach();
                this._SelectionForegroundListener = null;
                if (newBrush) {
                    this._SelectionForegroundListener = newBrush.Listen(function (brush) {
                        _this._ModelChanged(Controls.TextBoxModelChangedType.Brush, newBrush);
                        _this.XamlNode.LayoutUpdater.Invalidate();
                    });
                }
                this._ModelChanged(Controls.TextBoxModelChangedType.Brush, newBrush);
                this.XamlNode.LayoutUpdater.Invalidate();
            };
            PasswordBox.BaselineOffsetProperty = DependencyProperty.Register("BaselineOffset", function () {
                return Number;
            }, PasswordBox);
            PasswordBox.CaretBrushProperty = DependencyProperty.RegisterCore("CaretBrush", function () {
                return Fayde.Media.Brush;
            }, PasswordBox);
            PasswordBox.MaxLengthProperty = DependencyProperty.RegisterFull("MaxLength", function () {
                return Number;
            }, PasswordBox, 0, function (d, args) {
                return (d).$MaxLength = args.NewValue;
            }, undefined, undefined, positiveIntValidator);
            PasswordBox.PasswordCharProperty = DependencyProperty.Register("PasswordChar", function () {
                return String;
            }, PasswordBox, String.fromCharCode(9679), function (d, args) {
                return (d)._ModelChanged(Controls.TextBoxModelChangedType.Text, args.NewValue);
            });
            PasswordBox.PasswordProperty = DependencyProperty.Register("Password", function () {
                return String;
            }, PasswordBox, undefined, function (d, args) {
                return (d)._TextChanged(args.NewValue);
            });
            PasswordBox.SelectionForegroundProperty = DependencyProperty.RegisterCore("SelectionForeground", function () {
                return Fayde.Media.Brush;
            }, PasswordBox, undefined, function (d, args) {
                return (d)._SelectionForegroundChanged(args);
            });
            PasswordBox.SelectionBackgroundProperty = DependencyProperty.RegisterCore("SelectionBackground", function () {
                return Fayde.Media.Brush;
            }, PasswordBox, undefined, function (d, args) {
                return (d)._SelectionBackgroundChanged(args);
            });
            return PasswordBox;
        })(Controls.TextBoxBase);
        Controls.PasswordBox = PasswordBox;
        Fayde.RegisterType(PasswordBox, {
            Name: "PasswordBox",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
        function positiveIntValidator(dobj, propd, value) {
            if (typeof value !== 'number')
                return false;
            return value >= 0;
        }
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ProgressBar = (function (_super) {
            __extends(ProgressBar, _super);
            function ProgressBar() {
                _super.call(this);
                this.DefaultStyleKey = (this).constructor;
            }
            ProgressBar.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                var track = this._Track;
                if (track)
                    track.SizeChanged.Unsubscribe(this._OnTrackSizeChanged, this);
                track = this._Track = this.GetTemplateChild("ProgressBarTrack");
                this._Indicator = this.GetTemplateChild("ProgressBarIndicator");
                if (track)
                    track.SizeChanged.Subscribe(this._OnTrackSizeChanged, this);
                this.UpdateVisualState(false);
            };
            ProgressBar.prototype.OnValueChanged = function (oldValue, newValue) {
                _super.prototype.OnValueChanged.call(this, oldValue, newValue);
                this._UpdateIndicator();
            };
            ProgressBar.prototype._OnTrackSizeChanged = function (sender, e) {
                this._UpdateIndicator();
            };
            ProgressBar.prototype._IsIndeterminateChanged = function (args) {
                this.UpdateVisualState();
                this._UpdateIndicator();
            };
            ProgressBar.prototype._UpdateIndicator = function () {
                var min = this.Minimum;
                var max = this.Maximum;
                var val = this.Value;
                var indicator = this._Indicator;
                if (!indicator)
                    return;
                var parent = Fayde.VisualTreeHelper.GetParent(this);
                if (!parent)
                    return;
                var margin = indicator.Margin;
                var outerWidth = (margin) ? margin.Left + margin.Right : 0.0;
                var padding = null;
                if (parent instanceof Controls.Border)
                    padding = (parent).Padding;
else if (parent instanceof Controls.Control)
                    padding = (parent).Padding;
                if (padding) {
                    outerWidth += padding.Left;
                    outerWidth += padding.Right;
                }
                var progress = 1.0;
                if (!this.IsIndeterminate && max !== min)
                    progress = (val - min) / (max - min);
                var fullWidth = Math.max(0, (parent).ActualWidth - outerWidth);
                indicator.Width = fullWidth * progress;
            };
            ProgressBar.prototype.GetVisualStateNamesToActivate = function () {
                return this.IsIndeterminate ? ["Indeterminate"] : ["Determinate"];
            };
            ProgressBar.IsIndeterminateProperty = DependencyProperty.Register("IsIndeterminate", function () {
                return Boolean;
            }, ProgressBar, false, function (d, args) {
                return (d)._IsIndeterminateChanged(args);
            });
            return ProgressBar;
        })(Controls.Primitives.RangeBase);
        Controls.ProgressBar = ProgressBar;
        Fayde.RegisterType(ProgressBar, {
            Name: "ProgressBar",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ScrollViewer = (function (_super) {
            __extends(ScrollViewer, _super);
            function ScrollViewer() {
                _super.call(this);
                this.$TemplatedParentHandlesScrolling = false;
                this.DefaultStyleKey = (this).constructor;
            }
            ScrollViewer._ScrollBarVisibilityChanged = function (d, args) {
                if (!d)
                    return;
                if (d instanceof ScrollViewer) {
                    var sv = d;
                    sv.XamlNode.LayoutUpdater.InvalidateMeasure();
                    var scrollInfo = sv.ScrollInfo;
                    if (scrollInfo) {
                        scrollInfo.CanHorizontallyScroll = sv.HorizontalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                        scrollInfo.CanVerticallyScroll = sv.VerticalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                    }
                    sv._UpdateScrollBarVisibility();
                    return;
                }
                if (d instanceof Controls.ListBox) {
                    var listbox = d;
                    if (listbox.$TemplateScrollViewer)
                        listbox.$TemplateScrollViewer.SetValue(args.Property, args.NewValue);
                    return;
                }
            };

            ScrollViewer.GetHorizontalScrollBarVisibility = function (d) {
                return d.GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty);
            };
            ScrollViewer.SetHorizontalScrollBarVisibility = function (d, value) {
                d.SetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty, value);
            };
            Object.defineProperty(ScrollViewer.prototype, "HorizontalScrollBarVisibility", {
                get: function () {
                    return this.GetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty);
                },
                set: function (value) {
                    this.SetValue(ScrollViewer.HorizontalScrollBarVisibilityProperty, value);
                },
                enumerable: true,
                configurable: true
            });

            ScrollViewer.GetVerticalScrollBarVisibility = function (d) {
                return d.GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty);
            };
            ScrollViewer.SetVerticalScrollBarVisibility = function (d, value) {
                d.SetValue(ScrollViewer.VerticalScrollBarVisibilityProperty, value);
            };
            Object.defineProperty(ScrollViewer.prototype, "VerticalScrollBarVisibility", {
                get: function () {
                    return this.GetValue(ScrollViewer.VerticalScrollBarVisibilityProperty);
                },
                set: function (value) {
                    this.SetValue(ScrollViewer.VerticalScrollBarVisibilityProperty, value);
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(ScrollViewer.prototype, "ScrollInfo", {
                get: function () {
                    return this._ScrollInfo;
                },
                set: function (value) {
                    this._ScrollInfo = value;
                    if (value) {
                        value.CanHorizontallyScroll = this.HorizontalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                        value.CanVerticallyScroll = this.VerticalScrollBarVisibility !== Controls.ScrollBarVisibility.Disabled;
                    }
                },
                enumerable: true,
                configurable: true
            });
            ScrollViewer.prototype.InvalidateScrollInfo = function () {
                var scrollInfo = this.ScrollInfo;
                if (scrollInfo) {
                    this.SetValueInternal(ScrollViewer.ExtentWidthProperty, scrollInfo.ExtentWidth);
                    this.SetValueInternal(ScrollViewer.ExtentHeightProperty, scrollInfo.ExtentHeight);
                    this.SetValueInternal(ScrollViewer.ViewportWidthProperty, scrollInfo.ViewportWidth);
                    this.SetValueInternal(ScrollViewer.ViewportHeightProperty, scrollInfo.ViewportHeight);
                    this._UpdateScrollBar(Fayde.Orientation.Horizontal, scrollInfo.HorizontalOffset);
                    this._UpdateScrollBar(Fayde.Orientation.Vertical, scrollInfo.VerticalOffset);
                    this._UpdateScrollBarVisibility();
                }
                var lu = this.XamlNode.LayoutUpdater;
                var w = Math.max(0, this.ExtentWidth - this.ViewportWidth);
                if (w !== this.ScrollableWidth) {
                    this.SetValueInternal(ScrollViewer.ScrollableWidthProperty, w);
                    lu.InvalidateMeasure();
                }
                var h = Math.max(0, this.ExtentHeight - this.ViewportHeight);
                if (h !== this.ScrollableHeight) {
                    this.SetValueInternal(ScrollViewer.ScrollableHeightProperty, h);
                    lu.InvalidateMeasure();
                }
            };
            ScrollViewer.prototype._UpdateScrollBarVisibility = function () {
                var lu = this.XamlNode.LayoutUpdater;
                var scrollInfo = this.ScrollInfo;
                var horizontalVisibility = Fayde.Visibility.Visible;
                var hsbv = this.HorizontalScrollBarVisibility;
                switch (hsbv) {
                    case Controls.ScrollBarVisibility.Visible:
                        break;
                    case Controls.ScrollBarVisibility.Disabled:
                    case Controls.ScrollBarVisibility.Hidden:
                        horizontalVisibility = Fayde.Visibility.Collapsed;
                        break;
                    case Controls.ScrollBarVisibility.Auto:
                    default:
                        horizontalVisibility = (!scrollInfo || scrollInfo.ExtentWidth <= scrollInfo.ViewportWidth) ? Fayde.Visibility.Collapsed : Fayde.Visibility.Visible;
                        break;
                }
                if (horizontalVisibility !== this.ComputedHorizontalScrollBarVisibility) {
                    this.SetValueInternal(ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty, horizontalVisibility);
                    lu.InvalidateMeasure();
                }
                var verticalVisibility = Fayde.Visibility.Visible;
                var vsbv = this.VerticalScrollBarVisibility;
                switch (vsbv) {
                    case Controls.ScrollBarVisibility.Visible:
                        break;
                    case Controls.ScrollBarVisibility.Disabled:
                    case Controls.ScrollBarVisibility.Hidden:
                        verticalVisibility = Fayde.Visibility.Collapsed;
                        break;
                    case Controls.ScrollBarVisibility.Auto:
                    default:
                        verticalVisibility = (!scrollInfo || scrollInfo.ExtentHeight <= scrollInfo.ViewportHeight) ? Fayde.Visibility.Collapsed : Fayde.Visibility.Visible;
                        break;
                }
                if (verticalVisibility !== this.ComputedVerticalScrollBarVisibility) {
                    this.SetValueInternal(ScrollViewer.ComputedVerticalScrollBarVisibilityProperty, verticalVisibility);
                    lu.InvalidateMeasure();
                }
            };
            ScrollViewer.prototype._UpdateScrollBar = function (orientation, value) {
                try  {
                    var scrollInfo = this.ScrollInfo;
                    if (orientation === Fayde.Orientation.Horizontal) {
                        this.SetValueInternal(ScrollViewer.HorizontalOffsetProperty, value);
                        if (this.$HorizontalScrollBar) {
                            this.$HorizontalScrollBar.Value = value;
                        }
                    } else {
                        this.SetValueInternal(ScrollViewer.VerticalOffsetProperty, value);
                        if (this.$VerticalScrollBar) {
                            this.$VerticalScrollBar.Value = value;
                        }
                    }
                } finally {
                }
            };
            ScrollViewer.prototype._GetChildOfType = function (name, type) {
                var temp = this.GetTemplateChild(name);
                if (temp instanceof type)
                    return temp;
            };
            ScrollViewer.prototype.OnApplyTemplate = function () {
                var _this = this;
                _super.prototype.OnApplyTemplate.call(this);
                this.$ScrollContentPresenter = this._GetChildOfType("ScrollContentPresenter", Controls.ScrollContentPresenter);
                this.$HorizontalScrollBar = this._GetChildOfType("HorizontalScrollBar", Controls.Primitives.ScrollBar);
                if (this.$HorizontalScrollBar) {
                    this.$HorizontalScrollBar.Scroll.Subscribe(function (sender, e) {
                        return _this._HandleScroll(Fayde.Orientation.Horizontal, e);
                    }, this);
                }
                this.$VerticalScrollBar = this._GetChildOfType("VerticalScrollBar", Controls.Primitives.ScrollBar);
                if (this.$VerticalScrollBar) {
                    this.$VerticalScrollBar.Scroll.Subscribe(function (sender, e) {
                        return _this._HandleScroll(Fayde.Orientation.Vertical, e);
                    }, this);
                }
                this._UpdateScrollBarVisibility();
            };
            ScrollViewer.prototype.OnMouseLeftButtonDown = function (e) {
                if (!e.Handled && this.Focus())
                    e.Handled = true;
                _super.prototype.OnMouseLeftButtonDown.call(this, e);
            };
            ScrollViewer.prototype.OnMouseWheel = function (e) {
                _super.prototype.OnMouseWheel.call(this, e);
                if (e.Handled)
                    return;
                var scrollInfo = this.ScrollInfo;
                if (!scrollInfo)
                    return;
                if ((e.Delta > 0 && scrollInfo.VerticalOffset !== 0) || (e.Delta < 0 && scrollInfo.VerticalOffset < this.ScrollableHeight)) {
                    if (e.Delta >= 0)
                        scrollInfo.MouseWheelUp();
else
                        scrollInfo.MouseWheelDown();
                    e.Handled = true;
                }
            };
            ScrollViewer.prototype.OnKeyDown = function (e) {
                _super.prototype.OnKeyDown.call(this, e);
                this._HandleKeyDown(e);
            };
            ScrollViewer.prototype._HandleKeyDown = function (e) {
                if (e.Handled)
                    return;
                if (!this.$TemplatedParentHandlesScrolling)
                    return;
                var orientation = Fayde.Orientation.Vertical;
                var scrollEventType = Controls.Primitives.ScrollEventType.ThumbTrack;
                switch (e.Key) {
                    case Fayde.Input.Key.PageUp:
                        scrollEventType = Controls.Primitives.ScrollEventType.LargeDecrement;
                        break;
                    case Fayde.Input.Key.PageDown:
                        scrollEventType = Controls.Primitives.ScrollEventType.LargeIncrement;
                        break;
                    case Fayde.Input.Key.End:
                        if (!e.Modifiers.Ctrl)
                            orientation = Fayde.Orientation.Horizontal;
                        scrollEventType = Controls.Primitives.ScrollEventType.Last;
                        break;
                    case Fayde.Input.Key.Home:
                        if (!e.Modifiers.Ctrl)
                            orientation = Fayde.Orientation.Horizontal;
                        scrollEventType = Controls.Primitives.ScrollEventType.First;
                        break;
                    case Fayde.Input.Key.Left:
                        orientation = Fayde.Orientation.Horizontal;
                        scrollEventType = Controls.Primitives.ScrollEventType.SmallDecrement;
                    case Fayde.Input.Key.Up:
                        scrollEventType = Controls.Primitives.ScrollEventType.SmallDecrement;
                        break;
                    case Fayde.Input.Key.Right:
                        orientation = Fayde.Orientation.Horizontal;
                        scrollEventType = Controls.Primitives.ScrollEventType.SmallIncrement;
                    case Fayde.Input.Key.Down:
                        scrollEventType = Controls.Primitives.ScrollEventType.SmallIncrement;
                        break;
                }
                if (scrollEventType !== Controls.Primitives.ScrollEventType.ThumbTrack) {
                    this._HandleScroll(orientation, new Controls.Primitives.ScrollEventArgs(scrollEventType, 0));
                    e.Handled = true;
                }
            };
            ScrollViewer.prototype.ScrollInDirection = function (key) {
                switch (key) {
                    case Fayde.Input.Key.PageUp:
                        this.PageUp();
                        break;
                    case Fayde.Input.Key.PageDown:
                        this.PageDown();
                        break;
                    case Fayde.Input.Key.End:
                        this.PageEnd();
                        break;
                    case Fayde.Input.Key.Home:
                        this.PageHome();
                        break;
                    case Fayde.Input.Key.Left:
                        this.LineLeft();
                        break;
                    case Fayde.Input.Key.Up:
                        this.LineUp();
                        break;
                    case Fayde.Input.Key.Right:
                        this.LineRight();
                        break;
                    case Fayde.Input.Key.Down:
                        this.LineDown();
                        break;
                }
            };
            ScrollViewer.prototype.ScrollToHorizontalOffset = function (offset) {
                this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.ThumbPosition, offset));
            };
            ScrollViewer.prototype.ScrollToVerticalOffset = function (offset) {
                this._HandleVerticalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.ThumbPosition, offset));
            };
            ScrollViewer.prototype.LineUp = function () {
                this._HandleVerticalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.SmallDecrement, 0));
            };
            ScrollViewer.prototype.LineDown = function () {
                this._HandleVerticalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.SmallIncrement, 0));
            };
            ScrollViewer.prototype.LineLeft = function () {
                this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.SmallDecrement, 0));
            };
            ScrollViewer.prototype.LineRight = function () {
                this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.SmallIncrement, 0));
            };
            ScrollViewer.prototype.PageHome = function () {
                this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.First, 0));
            };
            ScrollViewer.prototype.PageEnd = function () {
                this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.Last, 0));
            };
            ScrollViewer.prototype.PageUp = function () {
                this._HandleVerticalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.LargeDecrement, 0));
            };
            ScrollViewer.prototype.PageDown = function () {
                this._HandleVerticalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.LargeIncrement, 0));
            };
            ScrollViewer.prototype.PageLeft = function () {
                this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.LargeDecrement, 0));
            };
            ScrollViewer.prototype.PageRight = function () {
                this._HandleHorizontalScroll(new Controls.Primitives.ScrollEventArgs(Controls.Primitives.ScrollEventType.LargeIncrement, 0));
            };
            ScrollViewer.prototype._HandleScroll = function (orientation, e) {
                if (orientation !== Fayde.Orientation.Horizontal)
                    this._HandleVerticalScroll(e);
else
                    this._HandleHorizontalScroll(e);
            };
            ScrollViewer.prototype._HandleHorizontalScroll = function (e) {
                var scrollInfo = this.ScrollInfo;
                if (!scrollInfo)
                    return;
                var offset = scrollInfo.HorizontalOffset;
                var newValue = offset;
                switch (e.ScrollEventType) {
                    case Controls.Primitives.ScrollEventType.SmallDecrement:
                        scrollInfo.LineLeft();
                        break;
                    case Controls.Primitives.ScrollEventType.SmallIncrement:
                        scrollInfo.LineRight();
                        break;
                    case Controls.Primitives.ScrollEventType.LargeDecrement:
                        scrollInfo.PageLeft();
                        break;
                    case Controls.Primitives.ScrollEventType.LargeIncrement:
                        scrollInfo.PageRight();
                        break;
                    case Controls.Primitives.ScrollEventType.ThumbPosition:
                    case Controls.Primitives.ScrollEventType.ThumbTrack:
                        newValue = e.Value;
                        break;
                    case Controls.Primitives.ScrollEventType.First:
                        newValue = Number.NEGATIVE_INFINITY;
                        break;
                    case Controls.Primitives.ScrollEventType.Last:
                        newValue = Number.POSITIVE_INFINITY;
                        break;
                }
                newValue = Math.max(newValue, 0);
                newValue = Math.min(this.ScrollableWidth, newValue);
                if (!areNumbersClose(offset, newValue))
                    scrollInfo.SetHorizontalOffset(newValue);
            };
            ScrollViewer.prototype._HandleVerticalScroll = function (e) {
                var scrollInfo = this.ScrollInfo;
                if (!scrollInfo)
                    return;
                var offset = scrollInfo.VerticalOffset;
                var newValue = offset;
                switch (e.ScrollEventType) {
                    case Controls.Primitives.ScrollEventType.SmallDecrement:
                        scrollInfo.LineUp();
                        break;
                    case Controls.Primitives.ScrollEventType.SmallIncrement:
                        scrollInfo.LineDown();
                        break;
                    case Controls.Primitives.ScrollEventType.LargeDecrement:
                        scrollInfo.PageUp();
                        break;
                    case Controls.Primitives.ScrollEventType.LargeIncrement:
                        scrollInfo.PageDown();
                        break;
                    case Controls.Primitives.ScrollEventType.ThumbPosition:
                    case Controls.Primitives.ScrollEventType.ThumbTrack:
                        newValue = e.Value;
                        break;
                    case Controls.Primitives.ScrollEventType.First:
                        newValue = Number.NEGATIVE_INFINITY;
                        break;
                    case Controls.Primitives.ScrollEventType.Last:
                        newValue = Number.POSITIVE_INFINITY;
                        break;
                }
                newValue = Math.max(newValue, 0);
                newValue = Math.min(this.ScrollableHeight, newValue);
                if (!areNumbersClose(offset, newValue))
                    scrollInfo.SetVerticalOffset(newValue);
            };
            ScrollViewer.HorizontalScrollBarVisibilityProperty = DependencyProperty.RegisterAttachedCore("HorizontalScrollBarVisibility", function () {
                return new Enum(Controls.ScrollBarVisibility);
            }, ScrollViewer, Controls.ScrollBarVisibility.Disabled, ScrollViewer._ScrollBarVisibilityChanged);

            ScrollViewer.VerticalScrollBarVisibilityProperty = DependencyProperty.RegisterAttachedCore("VerticalScrollBarVisibility", function () {
                return new Enum(Controls.ScrollBarVisibility);
            }, ScrollViewer, Controls.ScrollBarVisibility.Disabled, ScrollViewer._ScrollBarVisibilityChanged);

            ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty = DependencyProperty.RegisterReadOnlyCore("ComputedHorizontalScrollBarVisibility", function () {
                return new Enum(Fayde.Visibility);
            }, ScrollViewer);
            ScrollViewer.ComputedVerticalScrollBarVisibilityProperty = DependencyProperty.RegisterReadOnlyCore("ComputedVerticalScrollBarVisibility", function () {
                return new Enum(Fayde.Visibility);
            }, ScrollViewer);
            ScrollViewer.HorizontalOffsetProperty = DependencyProperty.RegisterReadOnlyCore("HorizontalOffset", function () {
                return Number;
            }, ScrollViewer);
            ScrollViewer.VerticalOffsetProperty = DependencyProperty.RegisterReadOnlyCore("VerticalOffset", function () {
                return Number;
            }, ScrollViewer);
            ScrollViewer.ScrollableWidthProperty = DependencyProperty.RegisterReadOnlyCore("ScrollableWidth", function () {
                return Number;
            }, ScrollViewer);
            ScrollViewer.ScrollableHeightProperty = DependencyProperty.RegisterReadOnlyCore("ScrollableHeight", function () {
                return Number;
            }, ScrollViewer);
            ScrollViewer.ViewportWidthProperty = DependencyProperty.RegisterReadOnlyCore("ViewportWidth", function () {
                return Number;
            }, ScrollViewer);
            ScrollViewer.ViewportHeightProperty = DependencyProperty.RegisterReadOnlyCore("ViewportHeight", function () {
                return Number;
            }, ScrollViewer);
            ScrollViewer.ExtentWidthProperty = DependencyProperty.RegisterReadOnlyCore("ExtentWidth", function () {
                return Number;
            }, ScrollViewer);
            ScrollViewer.ExtentHeightProperty = DependencyProperty.RegisterReadOnlyCore("ExtentHeight", function () {
                return Number;
            }, ScrollViewer);
            return ScrollViewer;
        })(Controls.ContentControl);
        Controls.ScrollViewer = ScrollViewer;
        Fayde.RegisterType(ScrollViewer, {
            Name: "ScrollViewer",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
        function areNumbersClose(val1, val2) {
            if (val1 === val2)
                return true;
            var num1 = (Math.abs(val1) + Math.abs(val2) + 10) * 1.11022302462516E-16;
            var num2 = val1 - val2;
            return -num1 < num2 && num1 > num2;
        }
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var Slider = (function (_super) {
            __extends(Slider, _super);
            function Slider() {
                _super.call(this);
                this._DragValue = 0;
                this.DefaultStyleKey = (this).constructor;
                this.SizeChanged.Subscribe(this._HandleSizeChanged, this);
            }
            Slider.prototype._GetChildOfType = function (name, type) {
                var temp = this.GetTemplateChild(name);
                if (temp instanceof type)
                    return temp;
            };
            Slider.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.$HorizontalTemplate = this._GetChildOfType("HorizontalTemplate", Fayde.FrameworkElement);
                this.$HorizontalLargeIncrease = this._GetChildOfType("HorizontalTrackLargeChangeIncreaseRepeatButton", Controls.Primitives.RepeatButton);
                this.$HorizontalLargeDecrease = this._GetChildOfType("HorizontalTrackLargeChangeDecreaseRepeatButton", Controls.Primitives.RepeatButton);
                this.$HorizontalThumb = this._GetChildOfType("HorizontalThumb", Controls.Primitives.Thumb);
                this.$VerticalTemplate = this._GetChildOfType("VerticalTemplate", Fayde.FrameworkElement);
                this.$VerticalLargeIncrease = this._GetChildOfType("VerticalTrackLargeChangeIncreaseRepeatButton", Controls.Primitives.RepeatButton);
                this.$VerticalLargeDecrease = this._GetChildOfType("VerticalTrackLargeChangeDecreaseRepeatButton", Controls.Primitives.RepeatButton);
                this.$VerticalThumb = this._GetChildOfType("VerticalThumb", Controls.Primitives.Thumb);
                if (this.$HorizontalThumb != null) {
                    this.$HorizontalThumb.DragStarted.Subscribe(this._OnThumbDragStarted, this);
                    this.$HorizontalThumb.DragDelta.Subscribe(this._OnThumbDragDelta, this);
                }
                if (this.$HorizontalLargeDecrease != null) {
                    this.$HorizontalLargeDecrease.Click.Subscribe(function (sender, e) {
                        this.Focus();
                        this.Value -= this.LargeChange;
                    }, this);
                }
                if (this.$HorizontalLargeIncrease != null) {
                    this.$HorizontalLargeIncrease.Click.Subscribe(function (sender, e) {
                        this.Focus();
                        this.Value += this.LargeChange;
                    }, this);
                }
                if (this.$VerticalThumb != null) {
                    this.$VerticalThumb.DragStarted.Subscribe(this._OnThumbDragStarted, this);
                    this.$VerticalThumb.DragDelta.Subscribe(this._OnThumbDragDelta, this);
                }
                if (this.$VerticalLargeDecrease != null) {
                    this.$VerticalLargeDecrease.Click.Subscribe(function (sender, e) {
                        this.Focus();
                        this.Value -= this.LargeChange;
                    }, this);
                }
                if (this.$VerticalLargeIncrease != null) {
                    this.$VerticalLargeIncrease.Click.Subscribe(function (sender, e) {
                        this.Focus();
                        this.Value += this.LargeChange;
                    }, this);
                }
                this._OnOrientationChanged();
                this.UpdateVisualState(false);
            };
            Slider.prototype.OnIsEnabledChanged = function (e) {
                _super.prototype.OnIsEnabledChanged.call(this, e);
                this.UpdateVisualState();
            };
            Slider.prototype.OnMinimumChanged = function (oldMin, newMin) {
                _super.prototype.OnMinimumChanged.call(this, oldMin, newMin);
                this._UpdateTrackLayout();
            };
            Slider.prototype.OnMaximumChanged = function (oldMax, newMax) {
                _super.prototype.OnMaximumChanged.call(this, oldMax, newMax);
                this._UpdateTrackLayout();
            };
            Slider.prototype.OnValueChanged = function (oldValue, newValue) {
                _super.prototype.OnValueChanged.call(this, oldValue, newValue);
                this._UpdateTrackLayout();
            };
            Slider.prototype._HandleSizeChanged = function (sender, e) {
                this._UpdateTrackLayout();
            };
            Slider.prototype._OnOrientationChanged = function () {
                var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                if (this.$HorizontalTemplate != null)
                    this.$HorizontalTemplate.Visibility = isHorizontal ? Fayde.Visibility.Visible : Fayde.Visibility.Collapsed;
                if (this.$VerticalTemplate != null)
                    this.$VerticalTemplate.Visibility = !isHorizontal ? Fayde.Visibility.Visible : Fayde.Visibility.Collapsed;
                this._UpdateTrackLayout();
            };
            Slider.prototype._UpdateTrackLayout = function () {
                var max = this.Maximum;
                var min = this.Minimum;
                var val = this.Value;
                var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                var temp = isHorizontal ? this.$HorizontalTemplate : this.$VerticalTemplate;
                if (!(temp instanceof Controls.Grid))
                    return;
                var templateGrid = temp;
                var isReversed = this.IsDirectionReversed;
                var largeDecrease;
                var largeIncrease;
                var thumb;
                if (isHorizontal) {
                    var coldefs = templateGrid.ColumnDefinitions;
                    largeDecrease = this.$HorizontalLargeDecrease;
                    largeIncrease = this.$HorizontalLargeIncrease;
                    thumb = this.$HorizontalThumb;
                    if (coldefs && coldefs.Count === 3) {
                        (coldefs.GetValueAt(0)).Width = new Controls.GridLength(1, isReversed ? Controls.GridUnitType.Star : Controls.GridUnitType.Auto);
                        (coldefs.GetValueAt(2)).Width = new Controls.GridLength(1, isReversed ? Controls.GridUnitType.Auto : Controls.GridUnitType.Star);
                        if (largeDecrease != null)
                            Controls.Grid.SetColumn(largeDecrease, isReversed ? 2 : 0);
                        if (largeIncrease != null)
                            Controls.Grid.SetColumn(largeIncrease, isReversed ? 0 : 2);
                    }
                } else {
                    var rowdefs = templateGrid.RowDefinitions;
                    largeDecrease = this.$VerticalLargeDecrease;
                    largeIncrease = this.$VerticalLargeIncrease;
                    thumb = this.$VerticalThumb;
                    if (rowdefs && rowdefs.Count === 3) {
                        (rowdefs.GetValueAt(0)).Height = new Controls.GridLength(1, isReversed ? Controls.GridUnitType.Auto : Controls.GridUnitType.Star);
                        (rowdefs.GetValueAt(2)).Height = new Controls.GridLength(1, isReversed ? Controls.GridUnitType.Star : Controls.GridUnitType.Auto);
                        if (largeDecrease != null)
                            Controls.Grid.SetRow(largeDecrease, isReversed ? 0 : 2);
                        if (largeIncrease != null)
                            Controls.Grid.SetRow(largeIncrease, isReversed ? 2 : 0);
                    }
                }
                if (max === min)
                    return;
                var percent = val / (max - min);
                if (largeDecrease != null && thumb != null) {
                    if (isHorizontal)
                        largeDecrease.Width = Math.max(0, percent * (this.ActualWidth - thumb.ActualWidth));
else
                        largeDecrease.Height = Math.max(0, percent * (this.ActualHeight - thumb.ActualHeight));
                }
            };
            Slider.prototype._OnThumbDragStarted = function (sender, e) {
                this.Focus();
                this._DragValue = this.Value;
            };
            Slider.prototype._OnThumbDragDelta = function (sender, e) {
                var offset = 0;
                var isHorizontal = this.Orientation === Fayde.Orientation.Horizontal;
                if (isHorizontal && this.$HorizontalThumb != null) {
                    offset = e.HorizontalChange / (this.ActualWidth - this.$HorizontalThumb.ActualWidth) * (this.Maximum - this.Minimum);
                } else if (!isHorizontal && this.$VerticalThumb != null) {
                    offset = -e.VerticalChange / (this.ActualHeight - this.$VerticalThumb.ActualHeight) * (this.Maximum - this.Minimum);
                }
                if (!isNaN(offset) && isFinite(offset)) {
                    this._DragValue += this.IsDirectionReversed ? -offset : offset;
                    var newValue = Math.min(this.Maximum, Math.max(this.Minimum, this._DragValue));
                    if (newValue != this.Value)
                        this.Value = newValue;
                }
            };
            Slider.prototype.OnMouseEnter = function (e) {
                _super.prototype.OnMouseEnter.call(this, e);
                if ((this.Orientation === Fayde.Orientation.Horizontal && this.$HorizontalThumb != null && this.$HorizontalThumb.IsDragging) || (this.Orientation === Fayde.Orientation.Vertical && this.$VerticalThumb != null && this.$VerticalThumb.IsDragging)) {
                    this.UpdateVisualState();
                }
            };
            Slider.prototype.OnMouseLeave = function (e) {
                _super.prototype.OnMouseLeave.call(this, e);
                if ((this.Orientation === Fayde.Orientation.Horizontal && this.$HorizontalThumb != null && this.$HorizontalThumb.IsDragging) || (this.Orientation === Fayde.Orientation.Vertical && this.$VerticalThumb != null && this.$VerticalThumb.IsDragging)) {
                    this.UpdateVisualState();
                }
            };
            Slider.prototype.OnMouseLeftButtonDown = function (e) {
                _super.prototype.OnMouseLeftButtonDown.call(this, e);
                if (e.Handled)
                    return;
                e.Handled = true;
                this.Focus();
                this.CaptureMouse();
            };
            Slider.prototype.OnLostMouseCapture = function (e) {
                _super.prototype.OnLostMouseCapture.call(this, e);
                this.UpdateVisualState();
            };
            Slider.prototype.OnKeyDown = function (e) {
                _super.prototype.OnKeyDown.call(this, e);
                if (e.Handled)
                    return;
                if (!this.IsEnabled)
                    return;
                switch (e.Key) {
                    case Fayde.Input.Key.Left:
                    case Fayde.Input.Key.Down:
                        this.Value += (this.IsDirectionReversed ? this.SmallChange : -this.SmallChange);
                        break;
                    case Fayde.Input.Key.Right:
                    case Fayde.Input.Key.Up:
                        this.Value += (this.IsDirectionReversed ? -this.SmallChange : this.SmallChange);
                        break;
                    case Fayde.Input.Key.Home:
                        this.Value = this.Minimum;
                        break;
                    case Fayde.Input.Key.End:
                        this.Value = this.Maximum;
                        break;
                }
            };
            Slider.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.SetValueInternal(Slider.IsFocusedProperty, true);
            };
            Slider.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.SetValueInternal(Slider.IsFocusedProperty, false);
            };
            Slider.IsDirectionReversedProperty = DependencyProperty.RegisterCore("IsDirectionReversed", function () {
                return Boolean;
            }, Slider, false, function (d, args) {
                return (d)._UpdateTrackLayout();
            });
            Slider.IsFocusedProperty = DependencyProperty.RegisterReadOnlyCore("IsFocused", function () {
                return Boolean;
            }, Slider, false, function (d, args) {
                return (d).UpdateVisualState();
            });
            Slider.OrientationProperty = DependencyProperty.RegisterCore("Orientation", function () {
                return new Enum(Fayde.Orientation);
            }, Slider, Fayde.Orientation.Horizontal, function (d, args) {
                return (d)._OnOrientationChanged();
            });
            return Slider;
        })(Controls.Primitives.RangeBase);
        Controls.Slider = Slider;
        Fayde.RegisterType(Slider, {
            Name: "Slider",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var TextBox = (function (_super) {
            __extends(TextBox, _super);
            function TextBox() {
                _super.call(this, Controls.TextBoxEmitChangedType.TEXT | Controls.TextBoxEmitChangedType.SELECTION, TextBox.TextProperty);
                this.SelectionChanged = new Fayde.RoutedEvent();
                this.TextChanged = new Fayde.RoutedEvent();
                this.DefaultStyleKey = (this).constructor;
            }
            TextBox.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                var ce = this.$ContentElement;
                if (!ce)
                    return;
                var ceType = (ce).constructor;
                var propd = DependencyProperty.GetDependencyProperty(ceType, "VerticalScrollBarVisibility", true);
                if (propd)
                    ce.SetValueInternal(propd, this.VerticalScrollBarVisibility);
                propd = DependencyProperty.GetDependencyProperty(ceType, "HorizontalScrollBarVisibility", true);
                if (propd) {
                    var vis = (this.TextWrapping === Controls.TextWrapping.Wrap) ? Controls.ScrollBarVisibility.Disabled : this.HorizontalScrollBarVisibility;
                    ce.SetValueInternal(propd, vis);
                }
            };
            Object.defineProperty(TextBox.prototype, "DisplayText", {
                get: function () {
                    return this.Text;
                },
                enumerable: true,
                configurable: true
            });
            TextBox.prototype.CursorDown = function (cursor, isPage) {
                return cursor;
            };
            TextBox.prototype.CursorUp = function (cursor, isPage) {
                return cursor;
            };
            TextBox.prototype.CursorNextWord = function (cursor) {
                return cursor;
            };
            TextBox.prototype.CursorPrevWord = function (cursor) {
                return cursor;
            };
            TextBox.prototype.CursorLineBegin = function (cursor) {
                var buffer = this._Buffer;
                var len = buffer.length;
                var r = buffer.lastIndexOf("\r", cursor);
                var n = buffer.lastIndexOf("\n", cursor);
                return Math.max(r, n, 0);
            };
            TextBox.prototype.CursorLineEnd = function (cursor) {
                var buffer = this._Buffer;
                var len = buffer.length;
                var r = buffer.indexOf("\r", cursor);
                if (r < 0)
                    r = len;
                var n = buffer.indexOf("\n", cursor);
                if (n < 0)
                    n = len;
                return Math.min(r, n);
            };
            TextBox.prototype._EmitTextChanged = function () {
                this.TextChanged.RaiseAsync(this, new Fayde.RoutedEventArgs());
            };
            TextBox.prototype._EmitSelectionChanged = function () {
                this.SelectionChanged.RaiseAsync(this, new Fayde.RoutedEventArgs());
            };
            TextBox.prototype._IsReadOnlyChanged = function (args) {
                this.$IsReadOnly = args.NewValue === true;
                if (this.$IsFocused) {
                    if (this.$IsReadOnly) {
                        this._ResetIMContext();
                    } else {
                    }
                }
                if (this.$View)
                    this.$View.SetEnableCursor(!this.$IsReadOnly);
            };
            TextBox.prototype._FontChanged = function (args) {
                this._ModelChanged(Controls.TextBoxModelChangedType.Font, args.NewValue);
            };

            TextBox.prototype._SelectionBackgroundChanged = function (args) {
                var _this = this;
                var newBrush = args.NewValue;
                if (this._SelectionBackgroundListener)
                    this._SelectionBackgroundListener.Detach();
                this._SelectionBackgroundListener = null;
                if (newBrush) {
                    this._SelectionBackgroundListener = newBrush.Listen(function (brush) {
                        _this._ModelChanged(Controls.TextBoxModelChangedType.Brush, newBrush);
                        _this.XamlNode.LayoutUpdater.Invalidate();
                    });
                }
                this._ModelChanged(Controls.TextBoxModelChangedType.Brush, newBrush);
                this.XamlNode.LayoutUpdater.Invalidate();
            };

            TextBox.prototype._SelectionForegroundChanged = function (args) {
                var _this = this;
                var newBrush = args.NewValue;
                if (this._SelectionForegroundListener)
                    this._SelectionForegroundListener.Detach();
                this._SelectionForegroundListener = null;
                if (newBrush) {
                    this._SelectionForegroundListener = newBrush.Listen(function (brush) {
                        _this._ModelChanged(Controls.TextBoxModelChangedType.Brush, newBrush);
                        _this.XamlNode.LayoutUpdater.Invalidate();
                    });
                }
                this._ModelChanged(Controls.TextBoxModelChangedType.Brush, newBrush);
                this.XamlNode.LayoutUpdater.Invalidate();
            };
            TextBox.prototype._TextAlignmentChanged = function (args) {
                this._ModelChanged(Controls.TextBoxModelChangedType.TextAlignment, args.NewValue);
            };
            TextBox.prototype._TextWrappingChanged = function (args) {
                var ce = this.$ContentElement;
                if (ce) {
                    var ceType = (ce).constructor;
                    var propd = DependencyProperty.GetDependencyProperty(ceType, "HorizontalScrollBarVisibility", true);
                    if (propd) {
                        var vis = (args.NewValue === Controls.TextWrapping.Wrap) ? Controls.ScrollBarVisibility.Disabled : this.HorizontalScrollBarVisibility;
                        ce.SetValueInternal(propd, vis);
                    }
                }
                this._ModelChanged(Controls.TextBoxModelChangedType.TextWrapping, args.NewValue);
            };
            TextBox.prototype._HorizontalScrollBarVisibilityChanged = function (args) {
                var ce = this.$ContentElement;
                if (!ce)
                    return;
                var ceType = (ce).constructor;
                var propd = DependencyProperty.GetDependencyProperty(ceType, "HorizontalScrollBarVisibility");
                if (!propd)
                    return;
                var vis = (this.TextWrapping === Controls.TextWrapping.Wrap) ? Controls.ScrollBarVisibility.Disabled : args.NewValue;
                ce.SetValueInternal(propd, vis);
            };
            TextBox.prototype._VerticalScrollBarVisibilityChanged = function (args) {
                var ce = this.$ContentElement;
                if (!ce)
                    return;
                var ceType = (ce).constructor;
                var propd = DependencyProperty.GetDependencyProperty(ceType, "VerticalScrollBarVisibility");
                if (!propd)
                    return;
                ce.SetValueInternal(propd, args.NewValue);
            };
            TextBox.prototype.OnMouseEnter = function (e) {
                _super.prototype.OnMouseEnter.call(this, e);
                this.UpdateVisualState();
            };
            TextBox.prototype.OnMouseLeave = function (e) {
                _super.prototype.OnMouseLeave.call(this, e);
                this.UpdateVisualState();
            };
            TextBox.prototype.OnGotFocus = function (e) {
                _super.prototype.OnGotFocus.call(this, e);
                this.UpdateVisualState();
            };
            TextBox.prototype.OnLostFocus = function (e) {
                _super.prototype.OnLostFocus.call(this, e);
                this.UpdateVisualState();
            };
            TextBox.prototype.GetVisualStateCommon = function () {
                if (!this.IsEnabled) {
                    return "Disabled";
                } else if (this.IsReadOnly) {
                    return "ReadOnly";
                } else if (this.IsMouseOver) {
                    return "MouseOver";
                } else {
                    return "Normal";
                }
            };
            TextBox.AcceptsReturnProperty = DependencyProperty.Register("AcceptsReturn", function () {
                return Boolean;
            }, TextBox, false, function (d, args) {
                return (d).$AcceptsReturn = (args.NewValue === true);
            });
            TextBox.CaretBrushProperty = DependencyProperty.RegisterCore("CaretBrush", function () {
                return Fayde.Media.Brush;
            }, TextBox);
            TextBox.MaxLengthProperty = DependencyProperty.RegisterFull("MaxLength", function () {
                return Number;
            }, TextBox, 0, function (d, args) {
                return (d).$MaxLength = args.NewValue;
            }, undefined, undefined, positiveIntValidator);
            TextBox.IsReadOnlyProperty = DependencyProperty.Register("IsReadOnly", function () {
                return Boolean;
            }, TextBox, undefined, function (d, args) {
                return (d)._IsReadOnlyChanged(args);
            });
            TextBox.SelectionForegroundProperty = DependencyProperty.RegisterCore("SelectionForeground", function () {
                return Fayde.Media.Brush;
            }, TextBox, undefined, function (d, args) {
                return (d)._SelectionForegroundChanged(args);
            });
            TextBox.SelectionBackgroundProperty = DependencyProperty.RegisterCore("SelectionBackground", function () {
                return Fayde.Media.Brush;
            }, TextBox, undefined, function (d, args) {
                return (d)._SelectionBackgroundChanged(args);
            });
            TextBox.BaselineOffsetProperty = DependencyProperty.Register("BaselineOffset", function () {
                return Number;
            }, TextBox);
            TextBox.SelectionLengthProperty = DependencyProperty.RegisterFull("SelectionLength", function () {
                return Number;
            }, TextBox, 0, function (d, args) {
                return (d)._SelectionLengthChanged(args.NewValue);
            }, undefined, true, positiveIntValidator);
            TextBox.SelectionStartProperty = DependencyProperty.RegisterFull("SelectionStart", function () {
                return Number;
            }, TextBox, 0, function (d, args) {
                return (d)._SelectionStartChanged(args.NewValue);
            }, undefined, true, positiveIntValidator);
            TextBox.TextProperty = DependencyProperty.Register("Text", function () {
                return String;
            }, TextBox, undefined, function (d, args) {
                return (d)._TextChanged(args.NewValue);
            });
            TextBox.TextAlignmentProperty = DependencyProperty.Register("TextAlignment", function () {
                return new Enum(Fayde.TextAlignment);
            }, TextBox, Fayde.TextAlignment.Left, function (d, args) {
                return (d)._TextAlignmentChanged(args);
            });
            TextBox.TextWrappingProperty = DependencyProperty.Register("TextWrapping", function () {
                return new Enum(Controls.TextWrapping);
            }, TextBox, Controls.TextWrapping.NoWrap, function (d, args) {
                return (d)._TextWrappingChanged(args);
            });
            TextBox.HorizontalScrollBarVisibilityProperty = DependencyProperty.Register("HorizontalScrollBarVisibility", function () {
                return new Enum(Controls.ScrollBarVisibility);
            }, TextBox, Controls.ScrollBarVisibility.Hidden, function (d, args) {
                return (d)._HorizontalScrollBarVisibilityChanged(args);
            });
            TextBox.VerticalScrollBarVisibilityProperty = DependencyProperty.Register("VerticalScrollBarVisibility", function () {
                return new Enum(Controls.ScrollBarVisibility);
            }, TextBox, Controls.ScrollBarVisibility.Hidden, function (d, args) {
                return (d)._VerticalScrollBarVisibilityChanged(args);
            });
            return TextBox;
        })(Controls.TextBoxBase);
        Controls.TextBox = TextBox;
        Fayde.RegisterType(TextBox, {
            Name: "TextBox",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
        function positiveIntValidator(dobj, propd, value) {
            if (typeof value !== 'number')
                return false;
            return value >= 0;
        }
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ToolTip = (function (_super) {
            __extends(ToolTip, _super);
            function ToolTip() {
                _super.apply(this, arguments);
            }
            ToolTip.HorizontalOffsetProperty = DependencyProperty.Register("HorizontalOffset", function () {
                return Number;
            }, ToolTip);
            ToolTip.VerticalOffsetProperty = DependencyProperty.Register("VerticalOffset", function () {
                return Number;
            }, ToolTip);
            ToolTip.IsOpenProperty = DependencyProperty.Register("IsOpen", function () {
                return Boolean;
            }, ToolTip);
            ToolTip.PlacementProperty = DependencyProperty.Register("Placement", function () {
                return new Enum(Controls.PlacementMode);
            }, ToolTip);
            ToolTip.PlacementTargetProperty = DependencyProperty.Register("PlacementTarget", function () {
                return Fayde.UIElement;
            }, ToolTip);
            return ToolTip;
        })(Controls.ContentControl);
        Controls.ToolTip = ToolTip;
        Fayde.RegisterType(ToolTip, {
            Name: "ToolTip",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var ButtonBase = (function (_super) {
                __extends(ButtonBase, _super);
                function ButtonBase() {
                    _super.call(this);
                    this.Click = new Fayde.RoutedEvent();
                    this._IsMouseCaptured = false;
                    this._IsMouseLeftButtonDown = false;
                    this._IsSpaceKeyDown = false;
                    this._MousePosition = new Point();
                    this._SuspendStateChanges = false;
                    this.IsTabStop = true;
                }
                ButtonBase.prototype.OnIsPressedChanged = function (args) {
                    this.UpdateVisualState();
                };
                ButtonBase.prototype.OnIsEnabledChanged = function (e) {
                    var isEnabled = e.NewValue;
                    this._SuspendStateChanges = true;
                    try  {
                        if (!isEnabled) {
                            this.SetValueInternal(ButtonBase.IsFocusedProperty, false);
                            this.SetValueInternal(ButtonBase.IsPressedProperty, false);
                            this._IsMouseCaptured = false;
                            this._IsSpaceKeyDown = false;
                            this._IsMouseLeftButtonDown = false;
                        }
                    } finally {
                        this._SuspendStateChanges = false;
                        this.UpdateVisualState();
                    }
                };
                ButtonBase.prototype.OnMouseEnter = function (e) {
                    _super.prototype.OnMouseEnter.call(this, e);
                    this._SuspendStateChanges = true;
                    try  {
                        if (this.ClickMode === Controls.ClickMode.Hover && this.IsEnabled) {
                            this.SetValueInternal(ButtonBase.IsPressedProperty, true);
                            this.OnClick();
                        }
                    } finally {
                        this._SuspendStateChanges = false;
                        this.UpdateVisualState();
                    }
                };
                ButtonBase.prototype.OnMouseLeave = function (e) {
                    _super.prototype.OnMouseLeave.call(this, e);
                    this._SuspendStateChanges = true;
                    try  {
                        if (this.ClickMode === Controls.ClickMode.Hover && this.IsEnabled)
                            this.SetValueInternal(ButtonBase.IsPressedProperty, false);
                    } finally {
                        this._SuspendStateChanges = false;
                        this.UpdateVisualState();
                    }
                };
                ButtonBase.prototype.OnMouseMove = function (e) {
                    _super.prototype.OnMouseMove.call(this, e);
                    this._MousePosition = e.GetPosition(this);
                    if (this._IsMouseLeftButtonDown && this.IsEnabled && this.ClickMode !== Controls.ClickMode.Hover && this._IsMouseCaptured && !this._IsSpaceKeyDown) {
                        this.SetValueInternal(ButtonBase.IsPressedProperty, this._IsValidMousePosition());
                    }
                };
                ButtonBase.prototype.OnMouseLeftButtonDown = function (e) {
                    _super.prototype.OnMouseLeftButtonDown.call(this, e);
                    this._IsMouseLeftButtonDown = true;
                    if (!this.IsEnabled)
                        return;
                    var clickMode = this.ClickMode;
                    if (clickMode === Controls.ClickMode.Hover)
                        return;
                    e.Handled = true;
                    this._SuspendStateChanges = true;
                    try  {
                        this.Focus();
                        this._CaptureMouseInternal();
                        if (this._IsMouseCaptured)
                            this.SetValueInternal(ButtonBase.IsPressedProperty, true);
                    } finally {
                        this._SuspendStateChanges = false;
                        this.UpdateVisualState();
                    }
                    if (clickMode === Controls.ClickMode.Press)
                        this.OnClick();
                };
                ButtonBase.prototype.OnMouseLeftButtonUp = function (e) {
                    _super.prototype.OnMouseLeftButtonDown.call(this, e);
                    this._IsMouseLeftButtonDown = false;
                    if (!this.IsEnabled)
                        return;
                    var clickMode = this.ClickMode;
                    if (clickMode === Controls.ClickMode.Hover)
                        return;
                    e.Handled = true;
                    if (!this._IsSpaceKeyDown && this.IsPressed && clickMode === Controls.ClickMode.Release)
                        this.OnClick();
                    if (!this._IsSpaceKeyDown) {
                        this._ReleaseMouseCaptureInternal();
                        this.SetValueInternal(ButtonBase.IsPressedProperty, false);
                    }
                };
                ButtonBase.prototype.OnGotFocus = function (e) {
                    _super.prototype.OnGotFocus.call(this, e);
                    this.SetValueInternal(ButtonBase.IsFocusedProperty, true);
                    this.UpdateVisualState();
                };
                ButtonBase.prototype.OnLostFocus = function (e) {
                    _super.prototype.OnLostFocus.call(this, e);
                    this.SetValueInternal(ButtonBase.IsFocusedProperty, false);
                    this._SuspendStateChanges = true;
                    try  {
                        if (this.ClickMode !== Controls.ClickMode.Hover) {
                            this.SetValueInternal(ButtonBase.IsPressedProperty, false);
                            this._ReleaseMouseCaptureInternal();
                            this._IsSpaceKeyDown = false;
                        }
                    } finally {
                        this._SuspendStateChanges = false;
                        this.UpdateVisualState();
                    }
                };
                ButtonBase.prototype.OnClick = function () {
                    var cmd = this.Command;
                    var par = this.CommandParameter;
                    if (cmd != null) {
                        var canf = cmd.CanExecute;
                        if ((canf == null || typeof canf !== "function" || canf(par)) && (cmd.Execute && typeof cmd.Execute === "function"))
                            cmd.Execute(par);
                    }
                    this.Click.Raise(this, new Fayde.RoutedEventArgs());
                };
                ButtonBase.prototype.UpdateVisualState = function (useTransitions) {
                    if (this._SuspendStateChanges)
                        return;
                    _super.prototype.UpdateVisualState.call(this, useTransitions);
                };
                ButtonBase.prototype.GetVisualStateCommon = function () {
                    if (!this.IsEnabled) {
                        return "Disabled";
                    } else if (this.IsPressed) {
                        return "Pressed";
                    } else if (this.IsMouseOver) {
                        return "MouseOver";
                    } else {
                        return "Normal";
                    }
                };
                ButtonBase.prototype._CaptureMouseInternal = function () {
                    if (!this._IsMouseCaptured)
                        this._IsMouseCaptured = this.CaptureMouse();
                };
                ButtonBase.prototype._ReleaseMouseCaptureInternal = function () {
                    this.ReleaseMouseCapture();
                    this._IsMouseCaptured = false;
                };
                ButtonBase.prototype._IsValidMousePosition = function () {
                    var pos = this._MousePosition;
                    return pos.X >= 0.0 && pos.X <= this.ActualWidth && pos.Y >= 0.0 && pos.Y <= this.ActualHeight;
                };
                ButtonBase.prototype.OnCommandChanged = function (args) {
                    var cmd;
                    if (Nullstone.ImplementsInterface(args.OldValue, Fayde.Input.ICommand_)) {
                        cmd = args.OldValue;
                        cmd.CanExecuteChanged.Unsubscribe(this.OnCommandCanExecuteChanged, this);
                    }
                    if (Nullstone.ImplementsInterface(args.NewValue, Fayde.Input.ICommand_)) {
                        cmd = args.NewValue;
                        cmd.CanExecuteChanged.Subscribe(this.OnCommandCanExecuteChanged, this);
                        this.IsEnabled = cmd.CanExecute(this.CommandParameter);
                    }
                };
                ButtonBase.prototype.OnCommandCanExecuteChanged = function (sender, e) {
                    this.IsEnabled = this.Command.CanExecute(this.CommandParameter);
                };
                ButtonBase.prototype.OnCommandParameterChanged = function (args) {
                    var cmd = this.Command;
                    if (cmd)
                        this.IsEnabled = cmd.CanExecute(args.NewValue);
                };
                ButtonBase.ClickModeProperty = DependencyProperty.Register("ClickMode", function () {
                    return new Enum(Controls.ClickMode);
                }, ButtonBase, Controls.ClickMode.Release);
                ButtonBase.IsPressedProperty = DependencyProperty.RegisterReadOnly("IsPressed", function () {
                    return Boolean;
                }, ButtonBase, false, function (d, args) {
                    return (d).OnIsPressedChanged(args);
                });
                ButtonBase.IsFocusedProperty = DependencyProperty.RegisterReadOnly("IsFocused", function () {
                    return Boolean;
                }, ButtonBase, false);
                ButtonBase.CommandProperty = DependencyProperty.RegisterCore("Command", function () {
                    return Fayde.Input.ICommand_;
                }, ButtonBase, undefined, function (d, args) {
                    return (d).OnCommandChanged(args);
                });
                ButtonBase.CommandParameterProperty = DependencyProperty.RegisterCore("CommandParameter", function () {
                    return Object;
                }, ButtonBase, undefined, function (d, args) {
                    return (d).OnCommandParameterChanged(args);
                });
                return ButtonBase;
            })(Controls.ContentControl);
            Primitives.ButtonBase = ButtonBase;
            Fayde.RegisterType(ButtonBase, {
                Name: "ButtonBase",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var RepeatButton = (function (_super) {
                __extends(RepeatButton, _super);
                function RepeatButton() {
                    _super.call(this);
                    this._KeyboardCausingRepeat = false;
                    this._MouseCausingRepeat = false;
                    this._MousePosition = null;
                    this._IntervalID = null;
                    this._NewInterval = null;
                    this._ElementRoot = null;
                    this.ClickMode = Controls.ClickMode.Press;
                    this.DefaultStyleKey = (this).constructor;
                }
                RepeatButton.prototype.OnApplyTemplate = function () {
                    _super.prototype.OnApplyTemplate.call(this);
                    var er = this.GetTemplateChild("Root");
                    if (er instanceof Fayde.FrameworkElement)
                        this._ElementRoot = er;
                    this.UpdateVisualState(false);
                };
                RepeatButton.prototype.OnDelayChanged = function (args) {
                    if (args.NewValue < 0)
                        throw new ArgumentException("Delay Property cannot be negative.");
                };
                RepeatButton.prototype.OnIntervalChanged = function (args) {
                    if (args.NewValue < 0)
                        throw new ArgumentException("Interval Property cannot be negative.");
                    this._NewInterval = args.NewValue;
                };
                RepeatButton.prototype.OnIsEnabledChanged = function (e) {
                    _super.prototype.OnIsEnabledChanged.call(this, e);
                    this._KeyboardCausingRepeat = false;
                    this._MouseCausingRepeat = false;
                    this._UpdateRepeatState();
                };
                RepeatButton.prototype.OnKeyDown = function (e) {
                    if (e.Key === Fayde.Input.Key.Space && this.ClickMode !== Controls.ClickMode.Hover) {
                        this._KeyboardCausingRepeat = true;
                        this._UpdateRepeatState();
                    }
                    _super.prototype.OnKeyDown.call(this, e);
                };
                RepeatButton.prototype.OnKeyUp = function (e) {
                    _super.prototype.OnKeyUp.call(this, e);
                    if (e.Key === Fayde.Input.Key.Space && this.ClickMode !== Controls.ClickMode.Hover) {
                        this._KeyboardCausingRepeat = false;
                        this._UpdateRepeatState();
                    }
                    this.UpdateVisualState();
                };
                RepeatButton.prototype.OnLostFocus = function (e) {
                    _super.prototype.OnLostFocus.call(this, e);
                    if (this.ClickMode !== Controls.ClickMode.Hover) {
                        this._KeyboardCausingRepeat = false;
                        this._MouseCausingRepeat = false;
                        this._UpdateRepeatState();
                    }
                };
                RepeatButton.prototype.OnMouseEnter = function (e) {
                    _super.prototype.OnMouseEnter.call(this, e);
                    if (this.ClickMode === Controls.ClickMode.Hover) {
                        this._MouseCausingRepeat = true;
                        this._UpdateRepeatState();
                    }
                    this.UpdateVisualState();
                    this._UpdateMousePosition(e);
                };
                RepeatButton.prototype.OnMouseLeave = function (e) {
                    _super.prototype.OnMouseLeave.call(this, e);
                    if (this.ClickMode === Controls.ClickMode.Hover) {
                        this._MouseCausingRepeat = false;
                        this._UpdateRepeatState();
                    }
                    this.UpdateVisualState();
                };
                RepeatButton.prototype.OnMouseLeftButtonDown = function (e) {
                    if (e.Handled)
                        return;
                    _super.prototype.OnMouseLeftButtonDown.call(this, e);
                    if (this.ClickMode !== Controls.ClickMode.Hover) {
                        this._MouseCausingRepeat = true;
                        this._UpdateRepeatState();
                    }
                };
                RepeatButton.prototype.OnMouseLeftButtonUp = function (e) {
                    if (e.Handled)
                        return;
                    _super.prototype.OnMouseLeftButtonUp.call(this, e);
                    if (this.ClickMode !== Controls.ClickMode.Hover) {
                        this._MouseCausingRepeat = false;
                        this._UpdateRepeatState();
                    }
                    this.UpdateVisualState();
                };
                RepeatButton.prototype.OnMouseMove = function (e) {
                    this._UpdateMousePosition(e);
                };
                RepeatButton.prototype._UpdateMousePosition = function (e) {
                    var curNode = this.XamlNode;
                    var parentNode = curNode;
                    while (curNode instanceof Fayde.FENode) {
                        parentNode = curNode;
                        curNode = curNode.ParentNode;
                    }
                    this._MousePosition = e.GetPosition(parentNode.XObject);
                };
                RepeatButton.prototype._UpdateRepeatState = function () {
                    var _this = this;
                    if (this._MouseCausingRepeat || this._KeyboardCausingRepeat) {
                        if (this._IntervalID == null)
                            this._IntervalID = window.setInterval(function () {
                                return _this._StartRepeatingAfterDelay();
                            }, this.Delay);
                    } else {
                        if (this._IntervalID != null)
                            window.clearInterval(this._IntervalID);
                        this._IntervalID = null;
                    }
                };
                RepeatButton.prototype._StartRepeatingAfterDelay = function () {
                    var _this = this;
                    window.clearInterval(this._IntervalID);
                    this._IntervalID = window.setInterval(function () {
                        return _this._OnTimeout();
                    }, this.Interval);
                };
                RepeatButton.prototype._OnTimeout = function () {
                    var _this = this;
                    if (this._NewInterval != null) {
                        window.clearInterval(this._IntervalID);
                        this._IntervalID = window.setInterval(function () {
                            return _this._OnTimeout();
                        }, this._NewInterval);
                        this._NewInterval = null;
                    }
                    if (!this.IsPressed)
                        return;
                    if (this._KeyboardCausingRepeat) {
                        this.OnClick();
                        return;
                    }
                    var er = this._ElementRoot;
                    var els = Fayde.VisualTreeHelper.FindElementsInHostCoordinates(this._MousePosition, this);
                    for (var i = 0; i < els.length; i++) {
                        if (els[i] === er)
                            this.OnClick();
                    }
                };
                RepeatButton.DelayProperty = DependencyProperty.Register("Delay", function () {
                    return Number;
                }, RepeatButton, 500, function (d, args) {
                    return (d).OnDelayChanged(args);
                });
                RepeatButton.IntervalProperty = DependencyProperty.Register("Interval", function () {
                    return Number;
                }, RepeatButton, 33, function (d, args) {
                    return (d).OnIntervalChanged(args);
                });
                return RepeatButton;
            })(Primitives.ButtonBase);
            Primitives.RepeatButton = RepeatButton;
            Fayde.RegisterType(RepeatButton, {
                Name: "RepeatButton",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        (function (Primitives) {
            var ToggleButton = (function (_super) {
                __extends(ToggleButton, _super);
                function ToggleButton() {
                    _super.call(this);
                    this.Checked = new Fayde.RoutedEvent();
                    this.Indeterminate = new Fayde.RoutedEvent();
                    this.Unchecked = new Fayde.RoutedEvent();
                    this.DefaultStyleKey = (this).constructor;
                }
                ToggleButton.prototype.OnApplyTemplate = function () {
                    _super.prototype.OnApplyTemplate.call(this);
                    this.UpdateVisualState(false);
                };
                ToggleButton.prototype.OnContentChanged = function (oldContent, newContent) {
                    _super.prototype.OnContentChanged.call(this, oldContent, newContent);
                    this.UpdateVisualState();
                };
                ToggleButton.prototype.OnClick = function () {
                    this.OnToggle();
                    _super.prototype.OnClick.call(this);
                };
                ToggleButton.prototype.UpdateVisualState = function (useTransitions) {
                    useTransitions = useTransitions !== false;
                    _super.prototype.UpdateVisualState.call(this, useTransitions);
                    var isChecked = this.IsChecked;
                    var vsm = Fayde.Media.VSM.VisualStateManager;
                    if (isChecked === true) {
                        vsm.GoToState(this, "Checked", useTransitions);
                    } else if (isChecked === false) {
                        vsm.GoToState(this, "Unchecked", useTransitions);
                    } else {
                        if (!vsm.GoToState(this, "Indeterminate", useTransitions)) {
                            vsm.GoToState(this, "Unchecked", useTransitions);
                        }
                    }
                };
                ToggleButton.prototype.OnIsCheckedChanged = function (args) {
                    var isChecked = args.NewValue;
                    this.UpdateVisualState();
                    var rargs = new Fayde.RoutedEventArgs();
                    if (isChecked === true) {
                        this.Checked.Raise(this, rargs);
                    } else if (isChecked === false) {
                        this.Unchecked.Raise(this, rargs);
                    } else {
                        this.Indeterminate.Raise(this, rargs);
                    }
                };
                ToggleButton.prototype.OnToggle = function () {
                    var isChecked = this.IsChecked;
                    if (isChecked === true) {
                        this.IsChecked = this.IsThreeState ? null : false;
                    } else {
                        this.IsChecked = isChecked != null;
                    }
                };
                ToggleButton.IsCheckedProperty = DependencyProperty.RegisterCore("IsChecked", function () {
                    return Boolean;
                }, ToggleButton, false, function (d, args) {
                    return (d).OnIsCheckedChanged(args);
                });
                ToggleButton.IsThreeStateProperty = DependencyProperty.RegisterCore("IsThreeState", function () {
                    return Boolean;
                }, ToggleButton, false);
                return ToggleButton;
            })(Primitives.ButtonBase);
            Primitives.ToggleButton = ToggleButton;
            Fayde.RegisterType(ToggleButton, {
                Name: "ToggleButton",
                Namespace: "Fayde.Controls.Primitives",
                XmlNamespace: Fayde.XMLNS
            });
        })(Controls.Primitives || (Controls.Primitives = {}));
        var Primitives = Controls.Primitives;
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var Button = (function (_super) {
            __extends(Button, _super);
            function Button() {
                _super.call(this);
                this.DefaultStyleKey = (this).constructor;
            }
            Button.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.UpdateVisualState(false);
            };
            Button.prototype.OnIsEnabledChanged = function (e) {
                _super.prototype.OnIsEnabledChanged.call(this, e);
                this.IsTabStop = e.NewValue;
            };
            return Button;
        })(Controls.Primitives.ButtonBase);
        Controls.Button = Button;
        Fayde.RegisterType(Button, {
            Name: "Button",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var CheckBox = (function (_super) {
            __extends(CheckBox, _super);
            function CheckBox() {
                _super.call(this);
                this.DefaultStyleKey = (this).constructor;
            }
            return CheckBox;
        })(Controls.Primitives.ToggleButton);
        Controls.CheckBox = CheckBox;
        Fayde.RegisterType(CheckBox, {
            Name: "CheckBox",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var ComboBoxItem = (function (_super) {
            __extends(ComboBoxItem, _super);
            function ComboBoxItem() {
                _super.call(this);
                this.DefaultStyleKey = (this).constructor;
            }
            ComboBoxItem.prototype.OnMouseLeftButtonUp = function (e) {
                _super.prototype.OnMouseLeftButtonUp.call(this, e);
                if (this.ParentSelector instanceof Controls.ComboBox)
                    (this.ParentSelector).IsDropDownOpen = false;
            };
            return ComboBoxItem;
        })(Controls.ListBoxItem);
        Controls.ComboBoxItem = ComboBoxItem;
        Fayde.RegisterType(ComboBoxItem, {
            Name: "ComboBoxItem",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var HyperlinkButton = (function (_super) {
            __extends(HyperlinkButton, _super);
            function HyperlinkButton() {
                _super.call(this);
                this.DefaultStyleKey = (this).constructor;
            }
            HyperlinkButton.prototype.OnApplyTemplate = function () {
                _super.prototype.OnApplyTemplate.call(this);
                this.UpdateVisualState(false);
            };
            HyperlinkButton.prototype.OnClick = function () {
                _super.prototype.OnClick.call(this);
                if (this.NavigateUri != null)
                    this._Navigate();
            };

            HyperlinkButton.prototype._Navigate = function () {
                var targetName = this.TargetName;
                if (!targetName) {
                    window.location.href = this.NavigateUri.toString();
                    return;
                }
                var targetUie = this.FindName(targetName);
                if (targetUie instanceof Controls.Frame) {
                    window.location.href = this.NavigateUri.toString();
                } else {
                    window.open(this.NavigateUri.toString(), targetName);
                }
            };
            HyperlinkButton.NavigateUriProperty = DependencyProperty.Register("NavigateUri", function () {
                return Uri;
            }, HyperlinkButton);
            HyperlinkButton.TargetNameProperty = DependencyProperty.Register("TargetName", function () {
                return String;
            }, HyperlinkButton);
            return HyperlinkButton;
        })(Controls.Primitives.ButtonBase);
        Controls.HyperlinkButton = HyperlinkButton;
        Fayde.RegisterType(HyperlinkButton, {
            Name: "HyperlinkButton",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));

var Fayde;
(function (Fayde) {
    (function (Controls) {
        var RadioButton = (function (_super) {
            __extends(RadioButton, _super);
            function RadioButton() {
                _super.call(this);
                RadioButton.Register("", this);
                this.DefaultStyleKey = (this).constructor;
            }
            RadioButton.Register = function (groupName, radioButton) {
                if (!groupName)
                    groupName = "";
                var list = RadioButton._GroupNameToElements[groupName];
                if (!list) {
                    list = [];
                    RadioButton._GroupNameToElements[groupName] = list;
                }
                list.push(radioButton);
            };
            RadioButton.Unregister = function (groupName, radioButton) {
                if (!groupName)
                    groupName = "";
                var list = RadioButton._GroupNameToElements[groupName];
                if (list) {
                    for (var i = 0; i < list.length; i++) {
                        if (radioButton === list[i]) {
                            list.splice(i, 1);
                            break;
                        }
                    }
                }
            };
            RadioButton.prototype.OnGroupNameChanged = function (e) {
                RadioButton.Unregister(e.OldValue, this);
                RadioButton.Register(e.NewValue, this);
            };
            RadioButton.prototype.OnIsCheckedChanged = function (e) {
                if (e.NewValue === true)
                    this.UpdateRadioButtonGroup();
                _super.prototype.OnIsCheckedChanged.call(this, e);
            };
            RadioButton.prototype.OnToggle = function () {
                this.IsChecked = true;
            };
            RadioButton.prototype.UpdateRadioButtonGroup = function () {
                var groupName = this.GroupName || "";
                var elements = RadioButton._GroupNameToElements[groupName];
                if (!elements)
                    return;
                var element = null;
                if (groupName) {
                    var rootNode = this.XamlNode.GetVisualRoot();
                    for (var i = 0; i < elements.length; i++) {
                        element = elements[i];
                        if (element === this)
                            continue;
                        if (!element.IsChecked)
                            continue;
                        if (rootNode !== element.XamlNode.GetVisualRoot())
                            continue;
                        element.IsChecked = false;
                    }
                } else {
                    var vpNode = this.XamlNode.VisualParentNode;
                    for (var i = 0; i < elements.length; i++) {
                        element = elements[i];
                        if (element === this)
                            continue;
                        if (!element.IsChecked)
                            continue;
                        if (vpNode !== element.XamlNode.VisualParentNode)
                            continue;
                        element.IsChecked = false;
                    }
                }
            };
            RadioButton.GroupNameProperty = DependencyProperty.RegisterReadOnly("GroupName", function () {
                return String;
            }, RadioButton, false, function (d, args) {
                return (d).OnGroupNameChanged(args);
            });

            RadioButton._GroupNameToElements = [];
            return RadioButton;
        })(Controls.Primitives.ToggleButton);
        Controls.RadioButton = RadioButton;
        Fayde.RegisterType(RadioButton, {
            Name: "RadioButton",
            Namespace: "Fayde.Controls",
            XmlNamespace: Fayde.XMLNS
        });
    })(Fayde.Controls || (Fayde.Controls = {}));
    var Controls = Fayde.Controls;
})(Fayde || (Fayde = {}));
//# sourceMappingURL=Fayde.js.map
